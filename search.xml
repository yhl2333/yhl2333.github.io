<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>张家界！</title>
      <link href="/%E5%BC%A0%E5%AE%B6%E7%95%8C/"/>
      <url>/%E5%BC%A0%E5%AE%B6%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="张家界游玩规划"><a href="#张家界游玩规划" class="headerlink" title="张家界游玩规划"></a>张家界游玩规划</h1><h2 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h2><p>&emsp;&emsp;往：北京出发坐<font color=DeepSkyBlue size=3 face="黑体">飞机</font> (北京大兴机场-&gt;张家界荷花机场)   </p><ol><li>往返价格：￥774</li><li>单次耗时6h，时间从15：55 — 21:55<br>PS：夏季：夏天的张家界自然是避暑休闲的好去处，可以漂流</li></ol><hr><h2 id="具体住宿位置、景点"><a href="#具体住宿位置、景点" class="headerlink" title="具体住宿位置、景点"></a>具体住宿位置、景点</h2><h2 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h2><p>张家界西站旁边民宿</p><h2 id="旅游地点"><a href="#旅游地点" class="headerlink" title="旅游地点"></a>旅游地点</h2><p>&emsp;&emsp;<font color=red size=4 face="黑体">主景点：</font><br>&emsp;&emsp; 两个5A级景区： <font color=DeepSkyBlue size=3 face="黑体">张家界武陵源风景名胜区、张家界天门山国家森林公园 </font><br>&emsp;&emsp;<font color=red size=4 face="黑体">其他：</font><br>&emsp;&emsp;黄龙洞、张家界大峡谷、红石林  </p><hr><h2 id="时间及路线安排"><a href="#时间及路线安排" class="headerlink" title="时间及路线安排"></a>时间及路线安排</h2><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>&emsp;&emsp;<font color=DeepSkyBlue size=3 face="黑体">黄龙洞+张家界峡谷 </font> (游览时间1day)</p><hr><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>&emsp;&emsp;<font color=DeepSkyBlue size=3 face="黑体">张家界武陵源风景名胜区 </font> (游览时间1day)<br><img src="/img/wulingl.png" alt="s"><br>门票：￥237<br>PS：张家界国家森林公园（不是张家界天门山国家森林公园）和张家界武陵源风景名胜区是一个地方。<br>&emsp;&emsp;<font color=red size=3 face="黑体">游玩顺序1</font>：武陵源标志门票站(环保车)-&gt;天子山索道上天子山-&gt;袁家界→百龙天梯-&gt;48将军岩-&gt;金鞭溪-&gt;回<br>&emsp;&emsp;<font color=red size=3 face="黑体">游玩顺序2</font>：武陵源标志门票站(环保车)-&gt;十里画廊-&gt;-&gt;袁家界→百龙天梯-&gt;48将军岩-&gt;天子山-&gt;回<br>&emsp;&emsp;<font color=red size=3 face="黑体">游玩顺序3</font>：森林公园门票站-&gt;金鞭溪-&gt;袁家界-&gt;百龙天梯-&gt;48将军岩-&gt;天子山-&gt;回<br>【袁家界】：百龙天梯、48将军岩、天下第一桥、哈利路亚山、迷魂台<br>【天子山】：空中田园、贺龙公园、天子峰<br>【金鞭溪】：7km、氧吧</p><hr><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><p>上午：<br>&emsp;&emsp;<font color=DeepSkyBlue size=3 face="黑体">张家界天门山国家森林公园 </font>  (游览时间4h)</p><p>&emsp;&emsp;票价:275 (双程索道+扶梯)、232（单程索道+扶梯）<br><img src="/img/tianmen1.png" alt="景区地图"></p><p><font color=red size=3 face="黑体">PS2:想爬999步天梯，A线、B线都可以。 </font><br>&emsp;&emsp;A线流程：张家界市区索道站（门票售票窗口）入口，大索道上山→山顶游览→玻璃栈道→穿山扶梯（下行）→天门洞→通天大道（999层台阶）→快线索道下山→后山停车场→景区环保车→市区索道站（停车场）<br>&emsp;&emsp;B 线流程： 张家界市区索道站（门票售票窗口）入口，环保车上山→后山停车场→快线索道上山→天门洞广场→通天大道（999层台阶）→天门洞→穿山扶梯（上行）→玻璃栈道→山顶游览→大索道下山→市区索道站（停车场） </p><p><font color=red size=3 face="黑体">PS3:只需要参考两条线的缆车，扶梯次序 </font><br>到山上：走西线，上<font color=DeepSkyBlue size=3 face="黑体">玻璃栈道 </font> -&gt;<font color=DeepSkyBlue size=3 face="黑体">天门山索桥 </font>（40min）<br>西线结束：此时到达天门山寺，两个选择，云梦仙顶/东线<br>东线：爱情桥-&gt;南府天门-&gt;爱情桥-&gt;玉壶峰（跳伞）-&gt;北府天门（50min）<br>东线之后可以去云梦仙顶或下山。</p><h2 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h2><h3 id="第四天上午"><a href="#第四天上午" class="headerlink" title="第四天上午"></a>第四天上午</h3><hr><h2 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h2><ol><li>照相机！</li><li>火车是充氧列车，确定氧气袋受否需要提前少量购买以及抑制高原反应的药物</li><li>及时购买返程车票</li><li>保暖衣物</li><li>一个轻薄本</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西藏318！</title>
      <link href="/%E8%A5%BF%E8%97%8F%EF%BC%81/"/>
      <url>/%E8%A5%BF%E8%97%8F%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="国道318旅游小结"><a href="#国道318旅游小结" class="headerlink" title="国道318旅游小结"></a>国道318旅游小结</h1><h2 id="旅游简介"><a href="#旅游简介" class="headerlink" title="旅游简介"></a>旅游简介</h2><p>&emsp;&emsp;什么是国道318？<br>&emsp;&emsp;国道318起于成都市，止于拉萨市，沿着国道318可以走过整个川西线，进藏线，最终两天在拉萨附近游玩。</p><p>&emsp;&emsp;318好玩在哪？<br>&emsp;&emsp;如果你看见过一些北欧比如冰岛的风景，那么318的风景会满足你的一切幻想。无数穿云而出的雪山，在公路上的云雾中穿梭，雪山下碧蓝纯净的圣湖，在国道上漫步的耗牛群，璀璨浩瀚的星河，人迹罕至的原始森林，涛涛怒鸣的江水，悬崖峭壁随处可见，珍稀动物我就拍摄到20余种，以及藏民的风土人情。除此之外，你可以看到人力所致的奇迹—成都搭到拉萨的国家电网，在山坡上的怒江72拐，以及318国道本身就可以说的上是一大奇迹。但同时318又是极其危险的一段旅途，318的美除了经典的景点外，需要自己探索，比如可以把车停下进到原始森林里去看看，看看真正无人触及的自然，真正自然生长的树木，总之越人迹罕至的地方越绝美。318绝对是力压国内所有旅游地点的存在，是我至今去过最好的旅游地点没有之一。</p><h2 id="出行谨记"><a href="#出行谨记" class="headerlink" title="出行谨记"></a>出行谨记</h2><ol><li>318不是自己租车自驾就能走得了的，其一是由于路程遥远，整个318线有2200km，而且大部分公路都是盘在山上的，普通人不熟悉路很难自驾，而且司机出现高反也将是致命的，不要认为整个旅程中海拔是逐渐升高的可以适应，我们第一天结束海拔就已经到达了3500m（拉萨的海拔）；</li><li>危险性：318上的危险因素是多方面的，比如高原反应，有的人在海拔5000米上蹿下跳啥事没有（比如鄙人），有些人到4000米就会呕吐吸氧难以呼吸；比如堵车，318经常性堵车！经常堵车！一首蓝莲花堵在318，你最先看到的绝对不是花海而是车海。318的路很险很崎岖，毫不夸张地说，在旅程的第一天每一个小时就能看到私家车侧翻滚下公路，然后后面的车就会堵死，旅程的第一天大部分时间都堵在路上了，因为前面的事故太多了。还有就是山间的滚石，可以毫不夸张地说，走318会不会出事是看命的，道路两旁都是山崖绝壁。刚进西藏的时候更是抽象，318一侧下方是湍急的河流，另一侧是悬崖绝壁。绝壁上的山岩随时都可能落下，而且318整条路是不存在护栏这类东西的，向下面的河里看可以看到河里密密麻麻全是悬崖上掉落的滚石，在公路上汽车每走一会就会看到新鲜的、砸在路面上还未清理的落石。这些石头小到手掌大小，大到卡车大小，砸到车上就是一起事故。下雨天则各种buff拉满，落石概率大大提升，还有可能解锁泥石流等自然灾害。当时我记得整车的人都是提心吊胆的，手紧握到出汗，生怕绝壁上的石头落下砸到车上。根据司机昊哥自述，上一次走川藏线时就有一块落石把挡风玻璃砸得粉碎。此外318的补给点非常少！相邻的补给点可能距离300km（5小时车程），可以想象一下车上的某个人出现了高反需要吸氧，一个氧气瓶一直吸基本只能吸15min，那么这么长时间的车程阁下又该如何应对呢？318的危险绝对不止以上提到几种，你会真切地感觉到远离文明，拥抱荒蛮的感觉。综上所述，如果自驾的话，你需要大量的金钱，一辆越野车，至少20天时间，提前做好攻略等等，普通人除了报团根本没有任何选择。因此在知道318的危险后，来这里需要一定的勇气，确实是会没命的危险。</li><li>温度：我是在6、7月份出行的，当你查拉萨温度的时候，任何时候基本是最低二十七度。但是问题就出在这里，当你走山路山里开始下雨的时候，阳光光照消失，气温骤降，这种湿冷会使周围空气降低20度，周围气温也就零上几度，严重的会导致失温，因此必须携带薄羽绒服，长裤等保暖衣物。</li><li>辐射：最开始我是没把高原的日晒辐射当一回事的，认为就穿一件防晒服戴个遮阳帽就可以了，结果就是当第八天在羊卓雍错的时候，在海拔4500米太阳光直射而下，我嫌热撸起了防晒服的袖子，结果仅仅过了一中午，双臂露出的部分被烧的火红，达到了辐射受伤的程度（挠一下就会剧痛）。因此防晒服，防晒霜必备，而且尽量要减少被阳光直射，本人目前肤色已从黄色变为黑炭，望诸位引以为戒。</li><li>高反：高反患者可以选择去之前一个月内喝红景天，自备高反药物。至于氧气，土豪可以购买或租借制氧机，平民可以少量携带氧气瓶，不要一直吸，感觉不行了再吸一口。如果发生高反，不要有大幅运动，一切产生吸气需求的运动都会加剧高反，比如正常走路，更不用说登高，跑跳这些行为，甚至是高原上上厕所。发生高反了也不必太慌，找个卫生所吸氧，挺两天。而且建议要乘坐底盘高的车，为什么要坐好车？稳，稳，还是他妈的稳。想想318部分路段本就颠簸，阁下要高反加晕车，我都不敢想，你不吐到死都怪。关于运动方面：本人来之前一直坚持高强度运动，318上并无任何高原反应。因此说来之前停止运动啥的我认为不靠谱，因为高反是因为血红蛋白携带氧气能力不足造成的，来之前几周都不要运动没道理的。</li><li>携带设备：单反相机，无人机，三脚架，自拍杆。无人机没有可以不带，单反你要还不带我都不知道你来318来干嘛。对于摄影爱好者一定要带三角架，因为这里是摄影爱好者的天堂，这里可以拍星空、雪山、花海、圣湖，手机可以带小米13pro及以上能拍到很清晰的银河，详情见我朋友圈。在新都桥的晚上，为了避免道路管控影响行程，我们选择三点启程，一看车窗外卧槽漫天的繁星，抬头仰望夜空直接就能肉眼看到银河。我们用小米13pro照到了清晰的银河核心。海拔4000+以及没有光污染，确实是拍摄银河的最好地点。</li><li>吃住：住的地方不要指望太好，因为都是在一些旅游城镇住宿，环境不会太好，不报团的话住宿价格极高。吃的话进西藏之前主要吃川菜，也有牦牛汤锅等，进西藏之后可以吃藏餐，一般的馆子，价格会稍贵。</li><li>我报的旅游团费用是4680，一共十天。这里注意，想走完整个318必须选10天以上的团，七天的团会感觉到整个旅程都在车上赶路，没时间去玩，那何苦去呢。整个旅程小3000km，自己按车速平均60计算一下就懂了。其他费用加在一起可能8000左右，贵是真的贵，你问我值不值？我是一个惜钱的人，但这次我觉得收我10000我也觉得值得，因为景色实在太美了，就是摄影爱好者的天堂。什么长白山张家界九寨沟，318线在自然风景上力压除新疆之外的所有内陆山水景色。因为你会见到无数巍峨的雪山，如四姑娘山，南迦巴瓦峰等等等等，河流类你能见到金沙江大渡河无量河，湖泊类你会见到姊妹胡、稻城亚丁的牛奶湖五色湖、拉萨的羊湖。峡谷你能看到怒江大峡谷，冰川你能见到米堆冰川，原始丛林只要你下车走进周遭的树林里就是原始丛林。事实证明玩318的过程中，除了最经典的景点，最好玩的永远是人迹罕至之处。推荐的游玩时间是2、3月份（能看到冰川，很多的雪山，但山路易出现事故），6月、7月份初（人少，雪山也没化，温度适宜）。此次旅游我和一个室友碰到了一对新婚夫妻，一个小黑子司机昊哥，简直就是运气爆棚碰到一车对的人，司机熟知318哪里好玩，我们直接跳过一些景点去玩别的地方，看到美景直接停车拍摄，氛围属于是融洽得不能再融洽了。</li><li>携带基础的药品，如感冒药，腹泻药等等。身份证必须随身携带。 必须要结伴而行！起码有个照应。</li><li>整个318行程中遇到了司机昊哥和一对结婚了八个月才度蜜月旅行的新婚夫妻，无论景色还是队友都过于完美欢乐了，但要说整个318旅程中美中不足的地方，我经过认真分析后认为有以下两点：<br>1、在理塘甚至没时间抽上一口芙蓉王；<br>2、进藏忽闻鸡棚塌了，整个丰田普拉多上顿时哀号之声四起，影响了大家后续旅游的兴致。司机昊哥更是过于悲伤，喊着和哥哥不求同年同日生，鸡脚已然是踩不住刹车了，险些直接冲进怒江。</li></ol><h2 id="旅游路线"><a href="#旅游路线" class="headerlink" title="旅游路线"></a>旅游路线</h2><h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1:"></a>Day1:</h3><p>从成都出发，基本一天都在堵车，一首蓝莲花堵在318，沿途下起了小雨，云雾缭绕拍了些照，晚上到达了丹巴住下。路上听昊哥讲了很多灵异故事，边开车边放音乐大家一起唱歌才是自驾游的灵魂。<br>住宿：丹巴</p><h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2:"></a>Day2:</h3><p>&emsp;&emsp;早上最先看了亚拉雪山，去了墨石公园，墨石公园的特色在于山的颜色真如石墨一般，特殊的地貌使得游客穿上宇航服，在上中行走仿佛在月亮的山上行走一般。由于鱼子西人太多了又下了雨，路堵死了，我们去了天空之城—格底拉姆，上山就拐了几十个弯路才得以上山，危险至极。山上的美景太绝了，有那种欧式的小屋，铺满石子的小路，有花海，看见了远方雪山的日照金山，日光云影洒在下方群山之中，还有晚上的夕阳西下。<br>住宿：新都桥</p><h3 id="Day3"><a href="#Day3" class="headerlink" title="Day3:"></a>Day3:</h3><p>&emsp;&emsp;到达世界最高城理塘，太美了家人们~！好吧也就那样。过理塘后到达无量河，传说在河里洗一下可以洗去自己之前的罪孽。经过海子山拍了天空之境，还在龙格观景台撒了隆达，晚上到达了稻城外在寺庙边许下了愿望，还拍到了彩虹。<br>住宿：香格里拉</p><h3 id="Day4"><a href="#Day4" class="headerlink" title="Day4:"></a>Day4:</h3><p>&emsp;&emsp;蓝色星球上最后一片净土—稻城亚丁。游亚丁，亚丁门票很贵，但很值，里面是很优美的自然景观，许多雪山，山间的丛林，山涧流水，飞瀑，五色湖，牛奶湖，拍到了好多野生动物，山顶海拔5000米，走的长线+挑战线，全程跑跳没啥问题。这里是真的好看。一天速通亚丁景区。<br>住宿：香格里拉</p><h3 id="Day5"><a href="#Day5" class="headerlink" title="Day5:"></a>Day5:</h3><p>&emsp;&emsp;看到了姊妹湖，姊妹湖依偎在雪山之下，只能远远的看，用无人机拍了一下。这一天主要还是赶路。同一天进藏，进藏的时候路边一侧是湍急的河水，头上是遮蔽日光的绝壁，绝壁上可以看到松动成块的岩石，道路上可以看到没来得及清理掉的新鲜滑下的滚石，险之又险，险象迭生，可以很清晰地感觉到进入到了蛮荒之地。<br>住宿：芒康</p><h3 id="Day6"><a href="#Day6" class="headerlink" title="Day6:"></a>Day6:</h3><p>&emsp;&emsp;星夜启程，看到了满天繁星与银河，拍到了银河核心。东达山垭口东达山垭口海拔5130米，是川藏线需要翻越海拔最高的地方。世界公路史上奇迹—怒江七十二拐，七十二拐是邦达至八宿段的一截悬崖公路，因道路险恶而闻名于世。由于四川境内几座高山隧道全通，通麦、排龙天险业已排除，故尔七十二拐成为川藏线上唯一令人胆战心惊的拦路虎了，经过了怒江72拐，怒江大桥，然乌湖，然乌湖去的时候水不是很清。<br>住宿：波密</p><h3 id="Day7"><a href="#Day7" class="headerlink" title="Day7:"></a>Day7:</h3><p>&emsp;&emsp;去了岗云杉林，但门票太贵感觉不值，就在旁边的林子中拍了拍青稞田；去了嘎朗村周边的一片牧场，给牛喂了些东西，还摸了牛角，很闲静的一片草地。下午去了朗秋冰川，半路去了路边的原始丛林，原始丛林里真的树怪，景怪。人迹罕至之处，景色更是绝美。回波密的时候还拍到了苍穹之光穿云而出。<br>住宿：波密</p><h3 id="Day8"><a href="#Day8" class="headerlink" title="Day8:"></a>Day8:</h3><p>&emsp;&emsp;再次星夜启程，昊哥和我们说了很多当兵的经历，过色季拉山看了南迦巴瓦峰和云海，但是云太多了，后面飞机上拍的弥补了这一遗憾。当天到达拉萨，去了布达拉宫广场，游了八廓街<br>住宿：拉萨</p><h3 id="Day9"><a href="#Day9" class="headerlink" title="Day9:"></a>Day9:</h3><p>&emsp;&emsp;去了羊湖，羊湖实在是绝美，运气好碰到了阳光直射，湖水蓝的和做梦一样。抱了小羊在羊湖拍照还被小羊尿了。水鸟是真多。晚上去了个轻吧喝了两杯，酒吧调的酒确实很好喝，不会使人醉。<br>住宿：拉萨</p><h3 id="Day10："><a href="#Day10：" class="headerlink" title="Day10："></a>Day10：</h3><p>去药王山拿着纸币和布达拉宫拍了照。收拾东西明天回家！<br>住宿：拉萨</p><h2 id="旅游小结"><a href="#旅游小结" class="headerlink" title="旅游小结"></a>旅游小结</h2><p>&emsp;&emsp;我为什么要去318？因为不想走马观花，因为想去别人去不到的地方，做别人做不到的事。人越少的地方越清净，越自然，还可以体验未曾感受的生活。这一路上除了山河绝美险峻，我更听到，看到了祖国的伟大。听着康定情歌，清晨穿过云雾缭绕的公路，远眺巍峨高耸的雪山，涉足无人知晓的原始森林，俯瞰碧蓝清澈的山间圣湖，雨中漫步在天空之城的花海中，痴迷于夕阳西下的日照金山，夜晚仰望漫天璀璨的繁星，感受着异域城镇的人间烟火，人世间绝景也不过如此。见景洗眼，见人洗心，见到了千金求渡的商贾，也见到了虔诚朝圣的信徒。</p><h2 id="emsp-emsp-在稻城许下了三个愿望后出现了彩虹，在羊湖也抱了可爱的小羊。仿佛过往如云烟一般消散，人世间少了许多疾苦。可以确信的是，人长期处于一种环境之下，会对生命与意义产生不同程度的误判。这也就是为什么要开阔自己的眼界，要见多，要识广。以后有机会也一定要去新疆体验异域风情，去青藏线穿越无人禁区，旅行的作用远远不止调整自己的心态，也能为自己解答不了的问题找到自己答案。318之行是我人生中的一笔财富，美好的回忆会永远熠熠生辉。"><a href="#emsp-emsp-在稻城许下了三个愿望后出现了彩虹，在羊湖也抱了可爱的小羊。仿佛过往如云烟一般消散，人世间少了许多疾苦。可以确信的是，人长期处于一种环境之下，会对生命与意义产生不同程度的误判。这也就是为什么要开阔自己的眼界，要见多，要识广。以后有机会也一定要去新疆体验异域风情，去青藏线穿越无人禁区，旅行的作用远远不止调整自己的心态，也能为自己解答不了的问题找到自己答案。318之行是我人生中的一笔财富，美好的回忆会永远熠熠生辉。" class="headerlink" title="&emsp;&emsp;在稻城许下了三个愿望后出现了彩虹，在羊湖也抱了可爱的小羊。仿佛过往如云烟一般消散，人世间少了许多疾苦。可以确信的是，人长期处于一种环境之下，会对生命与意义产生不同程度的误判。这也就是为什么要开阔自己的眼界，要见多，要识广。以后有机会也一定要去新疆体验异域风情，去青藏线穿越无人禁区，旅行的作用远远不止调整自己的心态，也能为自己解答不了的问题找到自己答案。318之行是我人生中的一笔财富，美好的回忆会永远熠熠生辉。"></a>&emsp;&emsp;在稻城许下了三个愿望后出现了彩虹，在羊湖也抱了可爱的小羊。仿佛过往如云烟一般消散，人世间少了许多疾苦。可以确信的是，人长期处于一种环境之下，会对生命与意义产生不同程度的误判。这也就是为什么要开阔自己的眼界，要见多，要识广。以后有机会也一定要去新疆体验异域风情，去青藏线穿越无人禁区，旅行的作用远远不止调整自己的心态，也能为自己解答不了的问题找到自己答案。318之行是我人生中的一笔财富，美好的回忆会永远熠熠生辉。</h2>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大语言的跨平台开发总结</title>
      <link href="/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
      <url>/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p><font color=red size=5 face="黑体">Ask:</font>跨平台指的是C++程序编译后的可执行文件如 main.o可以直接复制到windows或linux上，并且可以正常运行吗？</p><p><font color=DeepSkyBlue size=5 face="黑体">Answer:</font><br>在理论上，将C++程序的编译后的可执行文件（例如 main.o）从一个平台复制到另一个平台可能会面临以下问题：</p><p>二进制兼容性：不同操作系统和硬件架构使用不同的二进制文件格式和指令集。因此，将一个平台上编译的二进制文件直接复制到另一个平台可能无法识别或执行。</p><p>依赖项和运行时环境：可执行文件可能依赖于特定的库文件、操作系统功能、动态链接器等。如果目标平台上缺少这些依赖项或运行时环境不兼容，那么可执行文件可能无法正常运行。</p><p>系统调用和文件路径：不同的操作系统使用不同的系统调用和文件路径规范。如果程序在一个平台上使用了特定于该平台的系统调用或文件路径，而在目标平台上这些调用或路径不可用或不同，那么程序可能会出现错误或无法正常工作。</p><p>综上所述，将C++程序的编译后的可执行文件直接从一个平台复制到另一个平台并不保证能够直接运行。在跨平台部署时，通常需要重新编译可执行文件以适应目标平台的架构、依赖项和运行时环境，并进行适当的修改以处理不同操作系统的差异。</p><p><font color=red size=5 face="黑体">Ask:</font><br>就是说我在windows上的QT开发了一款应用软件，将这个应用软件复制到linux系统上，会出现二进制不兼容问题吗？</p><p><font color=DeepSkyBlue size=5 face="黑体">Answer:</font><br>当你在Windows上使用Qt开发应用软件时，将生成的可执行文件复制到Linux系统上可能会出现二进制不兼容的问题。这是由于Windows和Linux使用不同的操作系统、不同的二进制文件格式以及不同的系统调用和库的差异所导致的。</p><p>在Windows上编译的可执行文件通常使用PE（Portable Executable）格式，而Linux上使用的是ELF（Executable and Linkable Format）格式。这两种格式是不兼容的，因此无法直接在不同的操作系统上运行。</p><p>此外，Linux和Windows上的系统调用和库也存在差异。如果你的应用程序依赖于特定于Windows的系统调用、库或功能，这些在Linux上可能是不可用的或与Windows上的版本不兼容。</p><p>为了在Linux系统上运行你的应用程序，通常需要在Linux上重新编译你的源代码，并使用适用于Linux的编译器和工具链进行构建。这样可以确保生成适用于Linux的可执行文件，同时处理平台差异和依赖项的问题。</p><p>虽然Qt为跨平台开发提供了很大的便利性，但仍需要在目标平台上进行适当的编译和部署，以确保软件能够在该平台上正常运行。</p><p><font color=red size=5 face="黑体">Ask:</font><br>JAVA程序的跨平台也是指代码得在另一个操作系统上重新由JVM解释和执行才可以，而不是把可执行文件粘贴过去就能用？</p><p><font color=DeepSkyBlue size=5 face="黑体">Answer:</font><br>是的，你的理解是正确的。在Java中，跨平台性是指你的Java代码需要在目标操作系统上重新由JVM解释和执行，而不是简单地将可执行文件复制到另一个操作系统上。</p><p>Java程序通过编译成字节码（.class 文件），这是一种平台无关的中间代码。然后，目标操作系统上的Java虚拟机（JVM）将解释和执行这些字节码。JVM根据具体的操作系统和硬件架构来提供适当的运行环境。</p><p>当你将Java程序的字节码文件（.class 文件）复制到另一个操作系统上时，该操作系统上需要安装适当版本的Java虚拟机（JVM）。JVM会读取并解释字节码，并将其转换为适用于该操作系统的本地机器码，从而执行Java程序。</p><p>因此，跨平台性意味着你可以将Java程序的字节码文件在不同的操作系统上运行，只要目标操作系统上安装了相应的JVM。这样的设计使得Java具有很好的可移植性和兼容性，但仍需要在目标操作系统上提供适当的运行时环境。</p><p>总结而言，Java程序的跨平台性是指你的Java代码在目标操作系统上需要由JVM重新解释和执行，而不是简单地复制可执行文件。这种跨平台性是通过JVM提供的中间层实现的，它在不同的操作系统上提供了统一的运行环境。</p><p><font color=red size=5 face="黑体">Ask:</font><br>那C++中的汇编文件是与中间平台无关的代码吗？</p><p><font color=DeepSkyBlue size=5 face="黑体">Answer:</font><br>C++中的汇编文件（.s 或 .asm 文件）包含了汇编语言代码，它是与特定的硬件架构相关的低级代码。汇编语言是一种与机器码相对应的人类可读的低级语言，用于直接操作计算机的指令集和寄存器。</p><p>汇编文件通常与特定的处理器架构相关，因此与中间平台无关。这意味着汇编文件本身不具备跨平台性。在不同的硬件架构上，汇编文件需要适应不同的指令集和寄存器，因此不能直接在不同的平台上使用相同的汇编文件。</p><p>要使汇编文件在不同的平台上工作，需要根据目标平台的架构和指令集进行适当的修改和调整。这通常需要编写针对特定平台的不同汇编代码，以确保正确地使用该平台的指令和寄存器。</p><p>然而，需要注意的是，C++代码编译成的目标文件（例如，ELF格式的文件）是与平台相关的。目标文件包含了机器码和与特定平台相关的信息，如符号表、重定位表等。因此，即使使用C++编写的源代码是跨平台的，但编译生成的目标文件通常是与特定平台相关的。</p><p>总结起来，C++中的汇编文件是与特定的硬件架构相关的低级代码，并且与中间平台无关。然而，汇编文件本身并不具备跨平台性，需要根据不同平台的指令集和寄存器进行适当的修改。编译生成的目标文件是与特定平台相关的。</p><p><font color=red size=5 face="黑体">Ask:</font><br>那python的跨平台开发呢？</p><p><font color=DeepSkyBlue size=5 face="黑体">Answer:</font><br>Python是一种解释型语言，它的跨平台性非常强。Python的跨平台性是由于以下几个方面的特点：</p><p>解释型语言：Python是一种解释型语言，它的源代码在运行之前不需要编译成机器码。Python解释器会在运行时逐行解释执行代码。由于解释器的存在，Python程序可以在任何安装了Python解释器的操作系统上运行，无需重新编译。</p><p>跨平台的Python解释器：Python解释器本身是跨平台的。它提供了针对各种操作系统的不同版本，例如Windows、Linux、macOS等。你可以选择适用于目标平台的Python解释器进行安装和使用。</p><p>统一的标准库：Python具有丰富的标准库，其中包含了大量的功能模块和工具，可以在不同的操作系统上通用地使用。这些标准库对于Python的跨平台开发提供了很大的便利性，因为它们提供了一致的API和功能，使得你可以在不同的操作系统上编写相同的代码。</p><p>第三方库和框架：Python拥有庞大的第三方库和框架生态系统，提供了各种用于跨平台开发的工具和库。这些库和框架可以帮助你处理不同平台的差异，提供了跨平台开发的解决方案。</p><p>总而言之，Python具有很好的跨平台性，你可以在不同的操作系统上运行相同的Python代码，而无需进行额外的修改或重新编译。这使得Python成为一种流行的选择，特别是在跨平台应用程序开发、脚本编写和数据分析等领域。</p><p><font color=red size=5 face="黑体">Ask:</font><br>那在windows上用python开发的软件复制粘贴到linux系统就可以直接运行吗</p><p><font color=DeepSkyBlue size=5 face="黑体">Answer:</font><br>在Windows上使用Python开发的软件不能直接复制粘贴到Linux系统上并直接运行。尽管Python本身是跨平台的，但在不同的操作系统上仍然存在一些差异和依赖关系需要处理。</p><p>下面是一些需要考虑的关键点：</p><p>Python解释器：确保目标Linux系统上已经安装了适当版本的Python解释器。不同的Linux发行版和版本可能会预装不同的Python版本，因此需要确保Python解释器的兼容性。</p><p>依赖库和模块：你的Python软件可能依赖于各种第三方库和模块。在将软件从Windows复制到Linux时，需要确保目标系统上已经安装了相应的依赖项，包括特定版本的库和模块。</p><p>文件路径和操作系统差异：在代码中使用的文件路径、操作系统相关的功能调用以及其他平台特定的功能可能会有差异。你需要确保代码在Linux系统上适应正确的文件路径格式和操作系统调用。</p><p>脚本解释器头部：在Python脚本的顶部通常会包含一个指定脚本解释器的头部声明，例如 #!/usr/bin/env python。在将脚本从Windows复制到Linux时，需要确保头部声明正确指向目标系统上的Python解释器路径。</p><p>因此，尽管Python具有跨平台的特性，但在将Python软件从一个操作系统复制到另一个操作系统时，仍然需要进行一些调整和配置，以适应目标系统的环境和要求。确保目标系统上已经安装了适当的Python解释器和依赖项，并对代码进行必要的修改，才能确保软件能够在Linux系统上正确运行。</p>]]></content>
      
      
      <categories>
          
          <category> 软硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨平台开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cMake总结</title>
      <link href="/cMake/"/>
      <url>/cMake/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;在了解cMake之前，可以从本站博客《操作系统发展简史》先了解一下GNU，GCC,g++,gcc的区别</p><h1 id="如何使用cMake"><a href="#如何使用cMake" class="headerlink" title="如何使用cMake"></a><font color=DeepSkyBlue size=5 face="黑体">如何使用cMake</font></h1><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p>&emsp;&emsp;你或许听过好几种 Make 工具，例如 GNU Make ，QT 的 qmake ，微软的 MS nmake，BSD Make（pmake），Makepp，等等。这些 Make 工具遵循着不同的规范和标准，所执行的 Makefile 格式也千差万别。这样就带来了一个严峻的问题：如果软件想跨平台，必须要保证能够在不同平台编译。而如果使用上面的 Make 工具，就得为每一种标准写一次 Makefile ，这将是一件让人抓狂的工作。CMake 就是针对上面问题所设计的工具：它首先允许开发者编写一种平台无关的 CMakeList.txt 文件来定制整个编译流程，然后再根据目标用户的平台进一步生成所需的本地化 Makefile 和工程文件，如 Unix 的 Makefile 或 Windows 的 Visual Studio 工程。从而做到“Write once, run everywhere”。显然，CMake 是一个比上述几种 make 更高级的编译配置工具。一些使用 CMake 作为项目架构系统的知名开源项目有 VTK、ITK、KDE、OpenCV、OSG 等。在 linux 平台下使用 CMake 生成 Makefile 并编译的流程如下：</p><ol><li>写 CMake 配置文件 CMakeLists.txt 。</li><li>执行命令 cmake PATH 或者 ccmake PATH 生成 Makefile（ccmake 和 cmake 的区别在于前者提供了一个交互式的界面）。其中， PATH 是 CMakeLists.txt 所在的目录。</li><li>使用 make 命令进行编译。<br>例子：</li></ol><p><font color=YellowGreen>mian.c</font><br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">power</span><span class="params">(<span class="type">double</span> base, <span class="type">int</span> exponent)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = base;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (exponent == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; exponent; ++i)&#123;</span><br><span class="line">        result = result * base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s base exponent \n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> base = atof(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> exponent = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="type">double</span> result = power(base, exponent);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%g ^ %d is %g\n&quot;</span>, base, exponent, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><font color=DeepSkyBlue size=5 face="黑体">编写 CMakeLists.txt</font><br>&emsp;&emsp;首先编写 CMakeLists.txt 文件，并保存在与 main.c 源文件同个目录下：</p><pre><code># CMake 最低版本号要求cmake_minimum_required (VERSION 2.8)# 项目信息project (Demo1)# 指定生成目标add_executable(Demo main.cc)</code></pre><p>&emsp;&emsp;CMakeLists.txt 的语法比较简单，由命令、注释和空格组成，其中命令是不区分大小写的。符号 # 后面的内容被认为是注释。命令由命令名称、小括号和参数组成，参数之间使用空格进行间隔。对于上面的 CMakeLists.txt 文件，依次出现了几个命令：</p><ol><li>cmake_minimum_required：指定运行此配置文件所需的 CMake 的最低版本；</li><li>project：参数值是 Demo1，该命令表示项目的名称是 Demo1 。</li><li>add_executable：将名为 main.cc 的源文件编译成一个名称为 Demo 的可执行文件。</li></ol><p><font color=DeepSkyBlue size=5 face="黑体">指定C++标准</font><br>    C++ 语言有不同版本的标准，如 C++ 98、C++ 11、C++ 14 等。不同标准提供的特性有所区别，故有必要在 CMakeLists.txt 中为项目指定使用何种标准，进而让 CMake 使用正确的编译器标志（比如 -std=c++11）。对于 CMake v3.1 以上版本，可以通过 CMAKE_CXX_STANDARD 变量指定标准，或通过 target_compile_features 函数根据使用的特性自动推断适用于目标的编译器标志。</p><pre><code>cmake_minimum_required(VERSION 3.15)# set the project name and versionproject($&#123;PROJECT_NAME&#125; VERSION 1.0)# specify the C++ standardset(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED True)</code></pre><p><font color=red size=4 face="黑体">强制指定C++标准</font><br>&emsp;&emsp;出于对编译器的兼容性之考虑，上面这种设置标准的方法并不是强制执行。假设某个项目设置使用 C++ 11 标准，但用户使用的编译器并不支持 -std=gnu++11 （或等价的）标志，将不会导致错误或警告，而是在允许的情况下添加 -std=gnu++98 标志。换言之，CMake 将自动“衰减”至最接近的标准。如果确实需要强制指定标准，禁用这种自动衰减调整，那么可以通过设置 CXX_STANDARD_REQUIRED 实现。</p><p>&emsp;&emsp;CXX_STANDARD_REQUIRED 是一个布尔类型的变量，用于描述是否需要（强制）指定 CXX_STANDARD。当打开此选项，且当前使用的编译器不支持指定的标准时，会在 configuring 阶段报错失败，不会进行编译。</p><p>对上一节中的小例子稍加修改，使其强制使用 C++ 11 标准：</p><pre><code>cmake_minimum_required(VERSION 3.1)project (hello_cpp11)set(CMAKE_CXX_STANDARD 11)  # 将 C++ 标准设置为 C++ 11set(CMAKE_CXX_STANDARD_REQUIRED ON)  # C++ 11 是强制要求，不会衰退至低版本add_executable(hello_cpp11 main.cpp)</code></pre><p><font color=DeepSkyBlue size=5 face="黑体">编译项目</font><br>&emsp;&emsp;之后，在当前目录执行 cmake . ，得到 Makefile 后再使用 make 命令编译得到 Demo1 可执行文件。</p><pre><code>[ehome@xman Demo1]$ cmake .-- The C compiler identification is GNU 4.8.2-- The CXX compiler identification is GNU 4.8.2-- Check for working C compiler: /usr/sbin/cc-- Check for working C compiler: /usr/sbin/cc -- works-- Detecting C compiler ABI info-- Detecting C compiler ABI info - done-- Check for working CXX compiler: /usr/sbin/c++-- Check for working CXX compiler: /usr/sbin/c++ -- works-- Detecting CXX compiler ABI info-- Detecting CXX compiler ABI info - done-- Configuring done-- Generating done-- Build files have been written to: /home/ehome/Documents/programming/C/power/Demo1[ehome@xman Demo1]$ makeScanning dependencies of target Demo[100%] Building C object CMakeFiles/Demo.dir/main.cc.oLinking C executable Demo[100%] Built target Demo[ehome@xman Demo1]$ ./Demo 5 45 ^ 4 is 625[ehome@xman Demo1]$ ./Demo 7 37 ^ 3 is 343[ehome@xman Demo1]$ ./Demo 2 102 ^ 10 is 1024</code></pre><p><font color=DeepSkyBlue size=5 face="黑体">同一目录，多个源文件</font><br>&emsp;&emsp;上面的例子只有单个源文件。现在假如把 power 函数单独写进一个名为 MathFunctions.c 的源文件里，使得这个工程变成如下的形式：</p><pre><code>./Demo2    |    +--- main.c    |    +--- MathFunctions.c    |    +--- MathFunctions.h</code></pre><p>&emsp;&emsp;这个时候，CMakeLists.txt 可以改成如下的形式</p><pre><code># CMake 最低版本号要求cmake_minimum_required (VERSION 2.8)# 项目信息project (Demo2)# 指定生成目标add_executable(Demo main.cc MathFunctions.c)</code></pre><p>&emsp;&emsp;唯一的改动只是在 add_executable 命令中增加了一个 MathFunctions.c 源文件。这样写当然没什么问题，但是如果源文件很多，把所有源文件的名字都加进去将是一件烦人的工作。更省事的方法是使用 aux_source_directory 命令，该命令会查找指定目录下的所有源文件，然后将结果存进指定变量名。其语法如下：</p><pre><code>aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</code></pre><p>&emsp;&emsp;因此，可以修改 CMakeLists.txt 如下：</p><pre><code># CMake 最低版本号要求cmake_minimum_required (VERSION 2.8)# 项目信息project (Demo2)# 查找当前目录下的所有源文件# 并将名称保存到 DIR_SRCS 变量aux_source_directory(. DIR_SRCS)# 指定生成目标add_executable(Demo $&#123;DIR_SRCS&#125;)</code></pre><p>&emsp;&emsp;这样，CMake 会将当前目录所有源文件的文件名赋值给变量 DIR_SRCS ，再指示变量 DIR_SRCS 中的源文件需要编译成一个名称为 Demo 的可执行文件。</p><p><font color=DeepSkyBlue size=5 face="黑体">多个目录，多个源文件</font><br>&emsp;&emsp;现在进一步将 MathFunctions.h 和 MathFunctions.c 文件移动到 math 目录下。</p><pre><code>./Demo3    |    +--- main.cc    |    +--- math/        |        +--- MathFunctions.cc        |        +--- MathFunctions.h</code></pre><p>&emsp;&emsp;对于这种情况，需要分别在项目根目录 Demo3 和 math 目录里各编写一个 CMakeLists.txt 文件。为了方便，我们可以先将 math 目录里的文件编译成静态库再由 main 函数调用。根目录中的 CMakeLists.txt ：</p><pre><code># CMake 最低版本号要求cmake_minimum_required (VERSION 2.8)# 项目信息project (Demo3)# 查找当前目录下的所有源文件# 并将名称保存到 DIR_SRCS 变量aux_source_directory(. DIR_SRCS)# 添加 math 子目录add_subdirectory(math)# 指定生成目标 add_executable(Demo main.cc)# 添加链接库target_link_libraries(Demo MathFunctions)</code></pre><p>&emsp;&emsp;该文件添加了下面的内容: 第3行，使用命令 add_subdirectory 指明本项目包含一个子目录 math，这样 math 目录下的 CMakeLists.txt 文件和源代码也会被处理 。第6行，使用命令 target_link_libraries 指明可执行文件 main 需要连接一个名为 MathFunctions 的链接库 。子目录中的 CMakeLists.txt：</p><pre><code># 查找当前目录下的所有源文件# 并将名称保存到 DIR_LIB_SRCS 变量aux_source_directory(. DIR_LIB_SRCS)# 生成链接库add_library (MathFunctions $&#123;DIR_LIB_SRCS&#125;)</code></pre><p>&emsp;&emsp;在该文件中使用命令 add_library 将 src 目录中的源文件编译为静态链接库。</p><h2 id="QMake"><a href="#QMake" class="headerlink" title="QMake"></a>QMake</h2><ol><li>接着是qmake，qmake是什么，先说一下Qt这个东西。Qt是跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。简单的说就是C++的第三方库，使用这个库你可以很容易生成windows，Linux，MAC os等等平台的图形界面。现在的Qt还包含了开发各种软件一般需要用到的功能模块（网络，数据库，XML，多线程啊等等），比你直接用C++（只带标准内裤那种）要方便和简单。</li><li>你可以用Qt简简单单就实现非常复杂的功能，是因为Qt对C++进行了扩展，你写一行代码，Qt在背后帮你写了几百上千行，而这些多出来的代码就是靠Qt专有的moc编译器（The Meta-Object Compiler）和uic编译器（User Interface Complier）来重新翻译你那一行代码。问题来了，你在进行程序编译前就必须先调用moc和uic对Qt源文件进行预处理，然后再调用编译器进行编译。上面说的那种普通makefile文件是不适用的，它没办法对qt源文件进行预处理。所以qmake就产生了。</li><li>qmake工具就是Qt公司制造出来，用来生成Qt 专用makefile文件，这种makefile文件就能自动智能调用moc和uic对源程序进行预处理和编译。qmake当然必须也是跨平台的，跟cmake一样能对应各种平台生成对应makefile文件。</li><li>qmake是根据Qt 工程文件（.pro）来生成对应的makefile的。工程文件（.pro）相对来说比较简单，一般工程你都可以自己手写，但是一般都是由Qt的开发环境 Qt Creator自动生成的，你还是只需要按下那个邪恶三角形就完事了。</li><li>还没有完，由于qmake很简单很好用又支持跨平台，而且是可以独立于它的IDE，所以你也可以用在非Qt工程上面，照样可以生成普通的makefile，只要在pro文件中加入CONFIG -= qt  就可以了。</li><li>那这样qmake和cmake有什么区别？不好意思，cmake也是同样支持Qt程序的，cmake也能生成针对qt 程序的那种特殊makefile，只是cmake 的CMakeLists.txt 写起来相对与qmake的pro文件复杂点。qmake 是为 Qt 量身打造的，使用起来非常方便，但是cmake功能比qmake强大。一般的Qt工程你就直接使用qmake就可以了，cmake的强大功能一般人是用不到的。当你的工程非常大的时候，又有qt部分的子工程，又有其他语言的部分子工程，据说用cmake会方便。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLAM十四讲之3</title>
      <link href="/SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2%E4%B9%8B3/"/>
      <url>/SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2%E4%B9%8B3/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;ch3的基本知识还不算难，这里注意向量<font color=red size=3 face="黑体">p</font>在某坐标系下的坐标指的是p点到原点的向量在这个坐标系的单位正交基向量下的表示。例如<font color=red size=3 face="黑体">p</font>= e1a1+e2a2+e3a3 。其中e1,e2,e3为单位正交基向量，那么（a1,a2,a3）就是坐标值。高翔的书解释不是很清楚，此为大坑！<br>&emsp;&emsp;剩下的就是跑程序的事情了。由于cMake理解的不透彻，vscode不太会用，debug一下午一晚上，cMake属实是不会是真不会，会了真简单。</p><p><font color=DeepSkyBlue size=5 face="黑体">如何CMAKE</font><br>&emsp;&emsp;在一个大型程序中，经常出现一个大项目中包含了许多小工程文件夹，除了总工程有个汇总的CMAKElist.txt，每个小工程文件夹都有自己的CMAKElist.txt。</p><p><font color=YellowGreen size=3 face="黑体">如何CMAKE？</font>首先安装CMAKE，之后在cMakelist.txt同级并列建一个build文件夹，在build文件夹中执行以下代码</p><pre><code>cmake ..make./生成的可执行文件</code></pre><p>&emsp;&emsp;cmake ..是回到与build文件夹平级的目录下找cMakelist.txt文件。build文件夹的作用是装中间生成的文件，避免项目内容杂乱。</p><p><font color=DeepSkyBlue size=5 face="黑体">如何安装github上的库？</font><br>在ubuntu系统中，在想要下载的文件夹下</p><pre><code>git clone http...... .git</code></pre><p>下载以后安装依赖：<br>    sudo apt-get install libglew-dev<br>    sudo apt-get install cmake<br>    sudo apt-get install libboost-dev libboost-thread-dev libboost-filesystem-dev</p><p>安装pangolin</p><pre><code>cd Pangolinmkdir buildcd buildcmake ..makesudo make install</code></pre><p>卸载pangolin:在build文件夹下</p><pre><code>sudo make uninstall</code></pre><p><font color=DeepSkyBlue size=5 face="黑体">出现同类型相同异常报错</font><br>这种错误一般出自两个方面：<br>1、缺少相关的依赖和库<br>2、库、编译器、cMake版本不协调。<br>本节项目中，要用到c++14而不是c++11。<br>C++ 的国际标准有 5 个版本，1998, 2003, 2011, 2014, 2017<br>最新的 C++20 截至目前还没正式出版。C++03 是给 C++98 打的补丁，所以现在的人提到 C++98, C++03 往往指的是同一个。</p><p><font color=DeepSkyBlue size=5 face="黑体">ldconfig指令的作用</font><br>1、ldconfig是一个动态链接库管理命令，其目的为了让动态链接库为系统所共享。<br>2、ldconfig的主要用途：<br>&emsp;&emsp;默认搜寻/lilb和/usr/lib，以及配置文件/etc/ld.so.conf内所列的目录下的库文件。<br>&emsp;&emsp;搜索出可共享的动态链接库，库文件的格式为：lib<strong>*.so.</strong>，进而创建出动态装入程序(ld.so)所需的连接和缓存文件。<br>&emsp;&emsp;缓存文件默认为/etc/ld.so.cache，该文件保存已排好序的动态链接库名字列表。<br>&emsp;&emsp;ldconfig通常在系统启动时运行，而当用户安装了一个新的动态链接库时，就需要手工运行这个命令。</p><p>ldconfig需要注意的地方：</p><p>1、往/lib和/usr/lib里面加东西，是不用修改/etc/ld.so.conf文件的，但是添加完后需要调用下ldconfig，不然添加的library会找不到。<br>2、如果添加的library不在/lib和/usr/lib里面的话，就一定要修改/etc/ld.so.conf文件，往该文件追加library所在的路径，然后也需要重新调用下ldconfig命令。比如在安装MySQL的时候，其库文件/usr/local/mysql/lib，就需要追加到/etc/ld.so.conf文件中。命令如下：<br>%# echo “/usr/local/mysql/lib” &gt;&gt; /etc/ld.so.conf<br>%# ldconfig -v | grep mysql<br>3、如果添加的library不在/lib或/usr/lib下，但是却没有权限操作写/etc/ld.so.conf文件的话，这时就需要往export里写一个全局变量LD_LIBRARY_PATH，就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> SLAM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLAM</title>
      <link href="/SLAM/"/>
      <url>/SLAM/</url>
      
        <content type="html"><![CDATA[<style>#web_bg{  background: url(/img/forest.png)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><p>&emsp;&emsp;在大兴和凯翔进行了一次长谈，关于以后找工作、实验室的优势以及劣势，发现没有一技之长的话那么知名可靠的私企就很难进了。在广泛地观察与询问之后，我决定将学习方向锁定在C++与SLAM上，一方面因为前后端、算法这些岗位没有学习成本，就业人口基数过大；另一方面因为SLAM结合了计算机视觉、传感器基础、后端的滤波、算法优化等，这些都还算是本科都有涉及，最后还可以和嵌入式集成开发。</p><p>&emsp;&emsp;S.L.A.M.全称为Simultaneous Localization and Mapping，是以定位和建图两大技术为目标的一个研究领域。目前主流的slam技术应用为激光slam(基于激光雷达)和视觉slam(基于单/双目摄像头)，实现上主要分为基于滤波 （Filter-Based） 的SLAM，和基于图优化（Graph-Based）的SLAM。归结其本质，其实就是—-State Estimation in Robotics。</p><p><font color=DeepSkyBlue size=5 face="黑体">SLAM做的主要是以下几件事：</font><br><img src="/img/SLAM.png" alt=""> </p><p><font color=YellowGreen size=3 face="黑体">传感器信息读取：</font>在视觉SLAM中主要为相机图像信息的读取和预处理。如果是机器人中，还可能是码盘、惯性传感器等信息的读取和同步。</p><p><font color=YellowGreen size=3 face="黑体">前端视觉里程计（Visual Odometry，VO）：</font>视觉里程计的任务是估算相邻图像间相机的运动，以及局部地图的样子，又称为前端（Front End）。</p><p><font color=YellowGreen size=3 face="黑体">后端非线性优化（Optimization）：</font>后端接受不同时刻视觉里程计测量的相机位姿，以及回环检测的信息，对他们进行优化，得到全局一致的地图。由于在VO之后，又被称为后端（Back End）。</p><p><font color=YellowGreen size=3 face="黑体">回环检测（Loop Closure Detection）：</font>回环检测机器人是否到达过先前的位置，如果检测到回环，它会把信息提供给后端进行处理。</p><p><font color=YellowGreen size=3 face="黑体">建图（mapping）：</font>它根据估计的轨迹，建立与任务要求对应的地图。</p><p>&emsp;&emsp;其中前端前端相当于VO（视觉里程计），研究帧与帧之间变换关系。首先提取每帧图像特征点，利用相邻帧图像，进行特征点匹配，然后利用RANSAC去除大噪声，然后进行匹配，得到一个pose信息（位置和姿态），同时可以利用IMU（Inertial measurement unit惯性测量单元）提供的姿态信息进行滤波融合后端则主要是对前端出结果进行优化，利用滤波理论（EKF、UKF、PF）、或者优化理论TORO、G2O进行树或者图的优化。最终得到最优的位姿估计。<br>&emsp;&emsp;后端这边难点比较多，涉及到的数学知识也比较多，总的来说大家已经慢慢抛弃传统的滤波理论走向图优化去了。因为基于滤波的理论，滤波器稳度增长太快，这对于需要频繁求逆的EKF（扩展卡尔曼滤波器），PF压力很大。而基于图的SLAM，通常以keyframe（关键帧）为基础，建立多个节点和节点之间的相对变换关系，比如仿射变换矩阵，并不断地进行关键节点的维护，保证图的容量，在保证精度的同时，降低了计算量。</p><p>SLAM十四讲理论部分主要分为以下几个部分：</p><p><font color=DeepSkyBlue>第三讲 三维空间的刚体运动</font><br>![四元数的可视化：]<a href="https://www.bilibili.com/video/BV1SW411y7W1/?spm_id_from=333.999.0.0&amp;vd_source=293eb9377444f6b649cc1019a16b1a8a">https://www.bilibili.com/video/BV1SW411y7W1/?spm_id_from=333.999.0.0&amp;vd_source=293eb9377444f6b649cc1019a16b1a8a</a><br>![欧拉角万向死锁现象：]<a href="https://www.bilibili.com/video/BV1Nr4y1j7kn/?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1Nr4y1j7kn/?spm_id_from=333.999.0.0</a></p><p><font color=LightSeaGreen>第四讲 李群和李代数</p><p><font color=red>第五讲 相机与图像</p><p><font color=DeepPink>第六讲 非线性优化</p>]]></content>
      
      
      <categories>
          
          <category> SLAM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然语言处理任务</title>
      <link href="/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1/"/>
      <url>/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<style>#web_bg{  background: url(/img/ali1.png)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><p>&emsp;&emsp;任务来源：peng’s 毕设project<br>&emsp;&emsp;任务描述：一个问答聊天系统，前端输入聊天信息，交付给内置自然语言处理模型的后端服务器处理，并将处理结果交付给前端。<br>实现的条件：本机上Tomcat服务器，本机上FlaskServer服务器：pycharm专业版上运行。两个服务器运行在本机上，占用某些端口实现功能。</p><p>&emsp;&emsp;各部分功能：<br>&emsp;&emsp;Tomcat服务器：搭载前端的静态网页，当用户使用浏览器访问网页时将.html文件发送给用户的浏览器；将用户与前端交互的内容（如消息内容，HTTP信号）发送给后端服务器。<br>&emsp;&emsp;FlaskServer服务器:由pycharm导入的flask框架构建的极简服务器，占用了电脑上的三个端口来完成后端的处理任务。任务包括：前端打包的解析网页服务请求，交互数据信息；利用训练好的模型实现对信息的实体识别，关系提取等NLP特长；将处理得到的结果融合Neo4j数据库的知识图谱作为聊天的回答返回给前端界面。<br><img src="/img/Tom.png" alt="Tomcat"></p><p>&emsp;&emsp;Tomcat服务器介绍：<br>&emsp;&emsp;Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。<br>&emsp;&emsp;诀窍是，当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另 外，Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP 容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Apache 服务器。目前Tomcat最新版本为9.0。<br>&emsp;&emsp;Tomcat服务器配置：<br>&emsp;&emsp;烂大街了，默认8080端口是静态网页放置的端口，需要注意的是，需要由JAVA的运行环境，即Java JDK。Java JDK上链接：<br>&emsp;&emsp;<a href="https://blog.csdn.net/Fly_1213/article/details/101750887">https://blog.csdn.net/Fly_1213/article/details/101750887</a><br>&emsp;&emsp;需要用到Java 开发环境的原因是tomcat是用java写的，所以运行需要JRE，就是JAVA运行时刻环境，所以必须通过安装JDK来得到这个运行环境。Tomcat为什么要配置java jdk原文链接：<br>&emsp;&emsp;<a href="https://blog.csdn.net/qq_42257666/article/details/105700638">https://blog.csdn.net/qq_42257666/article/details/105700638</a><br>Tomcat的初始配置也几乎都是给Tomcat提供javaJDK的路径。这样就引出了更深层次的问题：为什么有的应用程序不需要配置，Tomcat则需要配置？<br>&emsp;&emsp;这是因为Windows版本的JDK安装以后会将安装的路径写入系统的注册表里边的。很多程序不用配置JAVA_HOME是因为那些程序是直接通过读取注册表里边的路径获取了JDK的路径，写到相应的配置文件中，比如Eclipse和Netbeans。<br>&emsp;&emsp;而Tomcat显然没有这样去处理，只是简单地通过环境变量去获取JDK的路径，所以要运行Tomcat一般都是要配置环境变量的。Tomcat这样做也是出于跨平台考虑的。因为系统注册表是只有Windows系统才有的，Linux系统是没有系统注册表的，所以为了跨平台性，Tomcat选择了需要手动配置环境变量。当有请求时,Tomcat会自动将jsp里面的java程序部分提取出来，调用JDK将java程序编译成class，然后再执行这个class。<br>&emsp;&emsp;Tomcat的使用与作用：<br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/440916459">https://zhuanlan.zhihu.com/p/440916459</a><br>&emsp;&emsp;<br><img src="/img/Tomcat_url.png" alt="Tomcat内容"></p><p>&emsp;&emsp;flaskServer介绍：<br>&emsp;&emsp;Flask是一个Python编写的Web 微框架，让我们可以使用Python语言快速实现一个网站或Web服务，在介绍Flask之前首先来聊下它和Django的联系以及区别，django个大而全的web框架，它内置许多模块，flask是一个小而精的轻量级框架，Django功能大而全，Flask只包含基本的配置, Django的一站式解决的思路，能让开发者不用在开发之前就在选择应用的基础设施上花费大量时间。Django有模板，表单，路由，基本的数据库管理等等内建功能。与之相反，Flask只是一个内核，默认依赖于2个外部库： Jinja2 模板引擎和 WSGI工具集—Werkzeug , flask的使用特点是基本所有的工具使用都依赖于导入的形式去扩展，flask只保留了web开发的核心功能。<br>&emsp;&emsp;FlaskServer配置：<br>&emsp;&emsp;由于是搭载在pycharm上的，导入flask框架的.py文件直接运行（配置flask运行环境），或者直接建立flask项目都是可以运行起务器的。并且要设定本机的哪些端口给FlaskServer服务器使用。可以在代码中，也可以在运行配置中。</p><p>&emsp;&emsp;实现描述：<br>&emsp;&emsp;首先运行Tomcat bin文件夹下的startup.bat文件（如果添加到系统路径直接cmd输入startup运行），将已经设计好的前端静态页面运行在本机8080端口上，此时打开浏览器访问 <a href="http://localhost:8080/HistoryWeb/main.html">http://localhost:8080/HistoryWeb/main.html</a> 就可以看到如下的静态页面。<br><img src="/img/web.png" alt="静态页面"></p><p>&emsp;&emsp;运行flask相当于启动了后端，聊天系统网页功能启动。在pycharm上用右上角的flask运行，而不用python解释器的运行，这里是由于flask实现后端监听函数的功能只需要路由函数，即@app.route(‘/ner’)下的函数，用flask运行时.py文件不会去运行if <strong>name</strong> == ‘<strong>main</strong>‘:下的主函数，而会直接运行路由函数。</p><p>&emsp;&emsp;之后就可以在前端输入text文本，前端服务器Tomcat将text文本和HTTP/kbqa请求发送给后端FlaskServer的5002端口,FlaskServer的5002端口上运行的kbqa.py程序监听到了HTTP/kbqa请求，便会运行.kbqa文件的对应路由函数，创建两个线程分别发送/ner，/ccr请求给另外两个端口。predict.py和server.py分别运行在这两个端口上监听请求，收到请求后分别执行实体识别和关系分类。联系Neo4j数据库中的知识图谱内容将回答语句处理完毕后发回前端从而实现聊天。<br><img src="/img/neoj4.png" alt="数据库内容"><br>&emsp;&emsp;注意本例中FlaskServer服务器的程序监听5002端口，接收到前端的信息后，发送将NER（实体识别）和CRR（关系提取）的请求请求转发给Flask服务器的不同端口来处理文本。现实中服务器可以使用同一个端口处理不同的请求，但在本例中，FlaskServer服务器开放了两个端口监听不同的请求，而Flask服务器分别创建了5000和5001两个端口的线程来处理不同的请求，分别处理NER（实体识别）和CRR（关系提取）的请求，使用不同的端口的好处是可以更好地区分不同的请求，方便调试和管理。另外，使用不同的端口还可以允许不同的服务在同一台服务器上运行，避免端口冲突。</p><p><img src="/img/ask-response.png" alt="问答展示"></p><p>&emsp;&emsp;运用到的NLP知识：<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3NDIyMjM1NA==&amp;action=getalbum&amp;album_id=1352624096995131393&amp;scene=173&amp;from_msgid=2649036142&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect博主的博客">https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3NDIyMjM1NA==&amp;action=getalbum&amp;album_id=1352624096995131393&amp;scene=173&amp;from_msgid=2649036142&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect博主的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 计网与操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然语言处理 前后端 知识图谱 python技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git总结</title>
      <link href="/git%E4%BD%BF%E7%94%A8/"/>
      <url>/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>$ git reset —hard HEAD^<br>这条指令执行后会让本地仓库中的head指针回退一次，同时清空暂存区、工作区中没有commit的全部内容。因此使用时一定要commit后再使用这条指令。<br>指令应用场景为：在我未提交到本地仓库之前（commit），我发现文件内容有误，所以我得马上恢复以前的版本（上次commit的版本）。</p><p>git checkout — readme.txt<br>命令 git checkout —readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：<br>1.readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。<br>2.另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。<br>可以看到它和上条指令的区别，上调指令强行使工作区回到上一次commit的状态，而这条指令则是仅仅撤销工作区的内容，暂存区就更改不了<br>指令中的中的 — 很重要，如果没有 — 的话，那么命令变成创建分支了。</p><p>rm readme.txt<br>该指令会删除readme.txt，不论readme.txt是否添加到暂存区。只要在文件夹中就可以删。删后要进行两个操作：1彻底删除，2将其恢复。注意：删除这个时间是发生在工作区的，如果我想彻底从版本库中删掉了此文件的话，可以再执行add,commit命令提交掉。只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？可以使用如下命令 git checkout — readme.txt</p><p>新建dev分支，并将head指针移动到该分支上：<br>git checkout -b dev<br>这行指令相当于两条指令：git branch dev 查看并创造分支与 git checkout dev切换分支</p><p>每次commit之后，都会创造新的节点。当前head指针就会指向新创造的节点。比如在某节点创造了master、dev分支，master分支修改了一次并commit，再在master分支创立新的分支dev1,那么dev1与master后续的全部改动都是在新节点上进行的。<br>注意在同时拥有三个分支的情况下在工作区更改文件，在三个分支上cat，看到的均是修改后的文本；在任意分支add .后在每个分支cat，看到的均是修改后的文本；在某一分支commit后，再在各个分支cat，则commit分支看到的是修改后的版本，非commit分支回本次修改前的版本。</p><p>git merge <branchname><br>在哪个分支上（如master）和并其他分支（dev）,head指向这两个节点融合后的新节点，但此时dev分支上是没有变化的，想让其与master分支合并，就要git merge master.合并后dev指针指向生成内容但master还指向合成前的自己！想让两个指针均指向最新生成的节点就要在master分支上git merge dev。若和并的过程中有手动修改，导致master与dev,dev与master merge的结果不一样，则两个分支的指针不会都在master分支上，依然分别在两个分支上。</p>]]></content>
      
      
      <categories>
          
          <category> 软硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当生活回归正轨</title>
      <link href="/remake/"/>
      <url>/remake/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="19c21636a3bd3952c2dc443d6b5dddc5ea3e04d2e3c89f2bc66038ff0eb1b559"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT中的UDP、TCP比较</title>
      <link href="/UDP/"/>
      <url>/UDP/</url>
      
        <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><font color=LightSeaGreen>步骤</font></h1><p>&emsp;&emsp;1：实例化两个套接字(服务器和客户端的套接字都一样，不用再向TCP一样分serveSocket,TcpSocket)<br>&emsp;&emsp;2：接收方bind() 自己的端口port，IP<br>&emsp;&emsp;3：收发<br>&emsp;&emsp;4：关闭套接字。</p><h1 id="TCP与UDP区别"><a href="#TCP与UDP区别" class="headerlink" title="TCP与UDP区别"></a><font color=LightSeaGreen>TCP与UDP区别</font></h1><p>&emsp;&emsp;UDP通信过程中，每次都需要指定数据接收端的IP和端口，和发快递差不多，每次发都要填地址；<br>TCP则三次握手建立通道后每次发送就不必指定端口和IP了，在通道中就发送了。;和打电话一样，电话一旦接通就随便唠了。<br>UDP：</p><pre><code>udpSocket-&gt;writeDatagram(str.toUtf8(),QHostAddress(ip),port);</code></pre><p>TCP：</p><pre><code>tcpSocket-&gt;write(str.toUtf8().data())</code></pre><p>从两者的发送可以看出UDP每次发送都要填IP与Port，TCP建立完通道后就不用管了。</p><p>&emsp;&emsp;UDP通信不需要建立连接，因此不需要进行 connect() 操作。TCP则又是newconnection 又是connected来确保连接畅通。</p><p>&emsp;&emsp;TCP是以字节流的形式传输数据，因此会出现粘包现象，UDP则以数据包的形式传输。</p><p>&emsp;&emsp;使用UDP进行通信，服务器和客户端的处理步骤比TCP要简单很多，并且两端是对等的(通信的处理流程几乎是一样的)，也就是说并没有严格意义上的客户端和服务器端。但哪一端是接收数据的角色，那么这个接收端就必须绑定（bind）一个固定的端口，因为起码得告诉发数据的人往哪里发吧。如果某一端不需要接收数据，这个绑定操作就可以省略不写了，通信的套接字会自动绑定一个随机端口，并且随着数据发送过去，在接收端recv()函数中会解析出发送者的IP与Port，这样接收者也能给发送者回话了！这点和TCP差不多。不过这种只绑定一端的做法的代价是，绑定方无法给未绑定方发消息，因为绑定方是不知道未绑定方的IP与Port的（未绑定系统随机非配发送端口），也就是说第一次发送的方向是固定的！这点和TCP一样，用TCP协议也基本上默认了第一次发送方向固定这一条件。怎么实现向QQ一样两边谁先发都可以的通信呢？两边都bind()就可以了啊！这样两边的发送地址都固定了，都知道对方的IP，port的情况下，谁先发都可以。</p><p>&emsp;&emsp;TCP是一定会完整，准确的发送数据的，粘包可以自己解决！UDP不对收到的数据进行排序，在UDP报文的首部中并没有关于数据顺序的信息，UDP对接收到的数据报不回复确认信息，发送端不知道数据是否被正确接收，也不会重发数据。如果发生了数据丢失，不存在丢一半的情况，如果丢当前这个数据包就全部丢失了。因此，UDP简单，随意的代价就是可能会数据丢失。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a><font color=LightSeaGreen>代码</font></h1><p>附上UDP.cpp代码，客户端和服务器共用一个代码，都bind()了：</p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;client.h&quot;</span></span><br><span class="line">#include <span class="string">&quot;ui_client.h&quot;</span></span><br><span class="line">#include &lt;QHostAddress&gt;</span><br><span class="line"></span><br><span class="line"><span class="attribute">client</span>::client(QWidget *<span class="built_in">parent</span>) :</span><br><span class="line">    QWidget(<span class="built_in">parent</span>),</span><br><span class="line">    ui(<span class="keyword">new</span> <span class="attribute">Ui</span>::client)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    udpSocket = <span class="keyword">new</span> QUdpSocket(<span class="keyword">this</span>);</span><br><span class="line">    udpSocket-&gt;bind(<span class="number">8887</span>);</span><br><span class="line">    setWindowTitle(<span class="string">&quot;端口8887&quot;</span>);</span><br><span class="line">    connect(udpSocket,&amp;<span class="attribute">QUdpSocket</span>::readyRead,<span class="keyword">this</span>,&amp;<span class="attribute">client</span>::dealMsg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">client</span>::~client()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="attribute">client</span>::dealMsg()</span><br><span class="line">&#123;</span><br><span class="line">    char buf[ <span class="number">1024</span> ]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    QHostAddress cliAddr;</span><br><span class="line">    quint16 port;</span><br><span class="line">    qint64 len =udpSocket-&gt;readDatagram(buf, sizeof(buf),&amp;cliAddr, &amp;port);</span><br><span class="line">    <span class="keyword">if</span>(len&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QString str = QString(<span class="string">&quot;&#123;%1:%2&#125; %3&quot;</span>)</span><br><span class="line">                .arg(cliAddr.toString())</span><br><span class="line">                .arg(port)</span><br><span class="line">                .arg(buf);</span><br><span class="line">        ui-&gt;textEdit-&gt;setText(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="attribute">client</span>::on_Buttonsend_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    QString ip = ui-&gt;lineIP-&gt;text();</span><br><span class="line">    qint16 port = ui-&gt;lineport-&gt;text().toInt();</span><br><span class="line">    QString str =ui-&gt;textEdit-&gt;toPlainText();</span><br><span class="line">    udpSocket-&gt;writeDatagram(str.toUtf8(),QHostAddress(ip),port);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UDP TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++ QT中的Tcp</title>
      <link href="/Tcp/"/>
      <url>/Tcp/</url>
      
        <content type="html"><![CDATA[<style>#web_bg{  background: url(/img/fox.png)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><p>&emsp;&emsp;<br>套接字定义：应用层通过传输层进行数据通信时，TCP和UDP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了称为套接字 (Socket)的接口（函数库），区分并实现不同应用程序进程间的网络通信和连接。<br>&emsp;&emsp;其实Socket就是一个大类，实例化两个实例，调用里面的函数就能实现通信。</p><p>&emsp;&emsp;套接字其实就是函数的接口，需要三个参数：通讯类型（Tcp，Udp），IP，端口号。Socket原意是“插座”。通过将这3个参数结合起来，与一个“插座”Socket绑定，应用层就可以和传输层通过套接字接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。<br>&emsp;&emsp;要通过互联网进行通信，至少需要一对套接字，一个运行于客户机端，称之为ClientSocket，另一个运行于服务器端，称之为serverSocket。</p><p><img src="/img/79tcp.png" alt="TCP通信流程图"><br>步骤一：把这两个套接字实例化<br>&emsp;&emsp;这两类套接字都有自己对应的代码库，实例化就行。</p><p>步骤二：连接两个套接字<br>&emsp;&emsp;根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为两个小步骤：1服务器套接字设置为监听，2给客户端套接字指向服务器IP与端口，并连接。<br>&emsp;&emsp;1：服务器监听过程：服务器端套接字并不定位具体的客户端套接字，也就是说并不需要客户端的IP与端口号（只需要记录说话的内容而不需要记录说话的是谁），但是要在listen函数中绑定自己的网卡对应IP与端口用于监听。这时处于等待连接的状态，实时监控网络状态。<br>tcpServer-&gt;listen(QHostAddress::Any,8888);<br>这表示服务器套接字tcpServer监听自己网卡对应的所有的IP地址以及IP地址对应的8888端口。<br>&emsp;&emsp;2：连接：是指由客户端的套接字提出连接请求（方向固定！一般都是默认客户端请求服务器），要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字的地址和端口号，然后就向服务器端套接字提出连接请求。<br>tcpSocket-&gt;connectToHost(QHostAddress(ip),port);<br>代码含义：客户端套接字tcpSocket绑定服务器的IP以及端口号，也就是上面服务器监听的端口号。QT中的ConnectHost函数可以为客户端套接字连接服务器套接字</p><p>步骤三：确认连接<br>&emsp;&emsp;服务器端，如果接到客户端的套接字传来的连接信息，会发出newConnection()信号。<br>listen到了，connect(tcpServer,&amp;QTcpServer::newConnection,<a href="">=</a>{qDebug&lt;&lt;“收到客户端的连接信息”});<br>&emsp;&emsp;之后服务器的套接字会向客户端套接字发送已连接信息(也是系统自己操做的，实际是tcpServer生成的tcpSocket发送)，客户端收到该信息后会产生一个connected()信号。<br>connect(tcpSocket, &amp;QTcpSocket::connected,<a href="">=</a>{ui-&gt;textread-&gt;setText(“成功建立连接”);});<br>&emsp;&emsp;连接成功后，tcpServer套接字会获得请求通信的套接字tcpSocket的IP与地址，以备回复信息使用。<br>查看ip与端口的代码：<br>QString ip= tcpSocket-&gt;peerAddress().toString();<br>qint64 port= tcpSocket-&gt;peerPort();</p><p>步骤四： 发送信息<br>&emsp;&emsp;套接字连接成功后，两个套接字之间就仿佛建立了通道，可以相互发送数据了！但需要注意的是：<br>1：信息从通道一端发出就必定会传播到另一端，就好比你打电话一方说一句话声音必然也只能传达到另一方，因此发信息的过程不需要再人为指定对方的IP与端口(通道建立的时候双方套接字内已经指定了对方套接字的IP，端口信息)，你只需要调用tcpSocket-&gt;write(str.toUtf8().data());就可以发消息了。<br>2：tcpServer是监听套接字，也就是说服务器套接字只能监听端口，这就意味着服务器不能收发消息！怎么办呢？再在服务器端创造一个tcpSocket套接字呗。但再创造一个套接字的话就意味着上面的所有和客户端套接字的连接步骤还要重新来一遍，还要创立一条新通道，麻烦！如何用之前我们已经创造的通道给客户端通信呢？QT C++的库中已经给我们写好了按原通道回话的简便方法，依然使用连接好的通路，在服务器端的代码中：<br>tcpSocket = tcpServer-&gt;nextPendingConnection();就是在tcpServer的基础上生成一个tcpSocket。<br>&emsp;&emsp;注意，这个tcpSocket是服务器端的第二个套接字，但与重新实例化一个套接字不同，由于它是在tcpServer的基础上生成一个tcpSocket，它知道通道另一端的客户端套接字的IP与端口，因此可以直接回复信息（客户端的tcpSocket连接服务器的tcpServer，服务器端的TcpServer套接字生成了一个子套接字tcpSocket，由这个子套接字tcpSocket和客户端进行收发消息通信）。</p><p>至此，大功告成，实现了客户端和服务器的双向通信。通完信不要忘了断开客户端连接，关闭套接字<br>我们需要明确的是：1、接受信息的一方不需要发送者的IP与port,发送信息的一方必须要知道对方的IP与port。<br>                2、tcpServer只有监听功能，服务器的收发信息功能是由它生成的tcpSocket负责的。</p><p>客户端cpp代码：</p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;clientwidget.h&quot;</span></span><br><span class="line">#include <span class="string">&quot;ui_clientwidget.h&quot;</span></span><br><span class="line">#include &lt;QHostAddress&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">ClientWidget</span>::ClientWidget(QWidget *<span class="built_in">parent</span>) :</span><br><span class="line">    QWidget(<span class="built_in">parent</span>),</span><br><span class="line">    ui(<span class="keyword">new</span> <span class="attribute">Ui</span>::ClientWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    tcpSocket = NULL;</span><br><span class="line">    tcpSocket = <span class="keyword">new</span> QTcpSocket(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    connect(tcpSocket, &amp;<span class="attribute">QTcpSocket</span>::connected,</span><br><span class="line">            [=]()</span><br><span class="line">            &#123;</span><br><span class="line">                ui-&gt;textread-&gt;setText(<span class="string">&quot;成功建立连接&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">    connect(tcpSocket, &amp;<span class="attribute">QTcpSocket</span>::readyRead,</span><br><span class="line">            [=]()</span><br><span class="line">            &#123;</span><br><span class="line">                QByteArray array = tcpSocket-&gt;readAll();</span><br><span class="line">                ui-&gt;textread-&gt;append(array);</span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ClientWidget</span>::~ClientWidget()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="attribute">ClientWidget</span>::on_Buttonconnect_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    QString ip = ui-&gt;lineEditIP-&gt;text();</span><br><span class="line">    qint16 port = ui-&gt;lineEditport-&gt;text().toInt();</span><br><span class="line">    tcpSocket-&gt;connectToHost(QHostAddress(ip),port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="attribute">ClientWidget</span>::on_ButtonSend_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    QString str =ui-&gt;textBwrite-&gt;toPlainText();</span><br><span class="line">    tcpSocket-&gt;write(str.toUtf8().data());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="attribute">ClientWidget</span>::on_ButtonClose_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(NULL == tcpSocket)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tcpSocket-&gt;disconnectFromHost();</span><br><span class="line"></span><br><span class="line">    tcpSocket = NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器.cpp代码<br><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;widget.h&quot;</span></span><br><span class="line">#include <span class="string">&quot;ui_widget.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Widget</span>::Widget(QWidget *<span class="built_in">parent</span>)</span><br><span class="line">    : QWidget(<span class="built_in">parent</span>)</span><br><span class="line">    , ui(<span class="keyword">new</span> <span class="attribute">Ui</span>::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    tcpServer = NULL;</span><br><span class="line">    tcpSocket = NULL;</span><br><span class="line"></span><br><span class="line">    tcpServer = <span class="keyword">new</span> QTcpServer(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    tcpServer-&gt;listen(<span class="attribute">QHostAddress</span>::Any,<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">    setWindowTitle(<span class="string">&quot;服务器： 8888&quot;</span>);</span><br><span class="line"></span><br><span class="line">    connect(tcpServer,&amp;<span class="attribute">QTcpServer</span>::newConnection,</span><br><span class="line">            [=]()</span><br><span class="line">            &#123;</span><br><span class="line">                tcpSocket = tcpServer-&gt;nextPendingConnection();</span><br><span class="line">                QString ip= tcpSocket-&gt;peerAddress().toString();</span><br><span class="line">                qint64 port= tcpSocket-&gt;peerPort();</span><br><span class="line"></span><br><span class="line">                QString temp= QString(<span class="string">&quot;[%1:%2]:成功连接&quot;</span>).arg(ip).arg(port);</span><br><span class="line">                ui-&gt;textread-&gt;setText(temp);</span><br><span class="line"></span><br><span class="line">                connect(tcpSocket, &amp;<span class="attribute">QTcpSocket</span>::readyRead,</span><br><span class="line">                        [=]()</span><br><span class="line">                        &#123;</span><br><span class="line">                            QByteArray array = tcpSocket-&gt;readAll();</span><br><span class="line">                            ui-&gt;textread-&gt;append(array);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        );</span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">Widget</span>::~Widget()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="attribute">Widget</span>::on_Buttonsend_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(NULL == tcpSocket)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    QString str =ui-&gt;textwrite-&gt;toPlainText();</span><br><span class="line">    tcpSocket-&gt;write(str.toUtf8().data());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="attribute">Widget</span>::on_Buttonclose_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(NULL == tcpSocket)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tcpSocket-&gt;disconnectFromHost();</span><br><span class="line">    tcpSocket-&gt;close();</span><br><span class="line">    tcpSocket = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>至于Tcp粘包处理，可以在接收函数中修改，详见下面视频。<br><a href="https://www.bilibili.com/video/BV1yf4y1Y7CU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1yf4y1Y7CU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>TCP三次握手：<br>&emsp;&emsp;TCP协议是传输层里面的一个协议，TCP在建立连接之前进行的三次握手对于很多人来说可能一直是迷。干嘛要握三次手？握其他次数不行咩？<br>那么我们就来讲讲TCP的三次握手都干了些什么吧（才疏学浅，说错的地方希望大家指正）<br><img src="/img/three.png" alt="TCP三次握手"><br>一、首先要明确三次握手的目的是什么？<br>三次握手的目的是为了确认客户端和服务端的收发功能是正常的。</p><p>那么就是需确认的东西一共有4个：<br>&emsp;&emsp;1.客户端的发送功能；<br>&emsp;&emsp;2.客户端的接收功能；<br>&emsp;&emsp;3.服务端的发送功能；<br>&emsp;&emsp;4.服务端的接收功能；</p><p>二、那三次握手分别都确认了哪些功能呢？<br>1、第一次握手<br>&emsp;&emsp;第一次握手是客户端主动发起的，简单粗暴的理解就是客户端给服务端写了一封信；<br>&emsp;&emsp;这就跟以前的人寄信一样，我自己知道自己是把信放进了邮箱里面，但是我并不知道邮差是不是把它拿出来寄出去了，<br>&emsp;&emsp;也就是说，客户端只知道自己发送了报文，但是报文有没有被发送出去就不知道，所以这个时候客户端对于自己的发送功能是否完好是不确定的；<br>&emsp;&emsp;但是当第一次握手的报文被送达服务端的时候，服务端就知道自己的接收功能是完好的了；因为它已经收到了嘛；<br>&emsp;&emsp;所以第一次握手就确定服务端的接收功能（括号内为握手编号）：<br><img src="/img/first.png" alt="第一次握手验证的功能"><br>注意：你可能会说，服务端收到客户端的信了，看到信了不就可以知道客户端的发送功能是完好的了吗？很遗憾，我们要让客户端知道 自己 的发送功能和接收功能是正常的；要让服务端知道 自己 的发送和接收功能是正常的，这也是为什么客户端发送一个seq=x,服务端要回信一个ack=x+1，这就是第二次握手时告诉客户端你发送的具体内容我可以收到，因为我回的是你发内容+1！这样客户端在第二次握手就知道自己的发送功能正常了！</p><p>2.第二次握手<br>第一次握手是客户端发起的，第二次握手就是服务器端发起的；<br>别人给你写了信，你收到了肯定就要回信嘛；<br>那么这个时候我们就可以来看一下参数（为了方便理解，我们暂时将报文信息理解成参数）：<br>第一次握手客户端会给服务端传过去两个参数，其中有一个是：seq=x;<br>SYN我们先不管，这个seq=x我们就可以看成是写在信里的内容；<br>第二次握手的时候服务器端给客户端返回的是4个参数，其中有2个是：seq=y;ack=x+1<br>那么这个ack=x+1我们就可以理解成是回答了客户端写在信里的内容，因为来信是x，客户端接收到来自服务端的x+1的时候就知道自己写出去的东西被收到了；就可以知道自己的发送功能的正常的；同时客户端也能知道自己的接收功能是正常的，因为能够接收来自服务器端的消息；<br>那为什么服务端也要写出信息seq=x给客户端呢？<br>因为服务端也不知道自己的发送功能是否正确嘛；<br>所以在第二次握手里面可以确定的功能是：<br><img src="/img/second.png" alt="第二次握手验证的功能"></p><p>3.第三次握手<br>第三次握手是客户端发起的，就是这么一来一回的；<br>在第二次握手里面我们就知道握手和确认功能完善之间的逻辑，那么接下来也只剩下一个功能，就是服务端的接收功能；<br>服务端怎么知道自己的发送功能是正确的呢？<br>类比第二次握手我们就知道了，只要收到客户端关于seq的回答就好了；<br>第二次握手的时候服务向客户端发送了seq=y<br>有seq发出去，那么客户端就要将对信的回复写在ack里面；<br>所以第三次握手所传的参数里面有ack=y+1，也就是说客户端回复了服务端的seq;<br>当服务端接收到这个反馈的时候就知道自己的发送功能的正确的了。<br><img src="/img/third.png" alt="第三次握手验证的功能"></p><p>总之呢就是一句话：能接收就说明接收功能正常；但是能发送不一定代表发送功能正常，发送功能需要通过 seq(写信)和ack(回信) 才能判断。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创作一篇博客？</title>
      <link href="/%E5%A6%82%E4%BD%95%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/%E5%A6%82%E4%BD%95%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<style>#web_bg{  background: url(/img/22.png)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><p>用Hexo，butterfly主题搭建博客<br>&emsp;&emsp;相信大家有时候会产生给自己造一个精致的所属空间的冲动吧，在我看到了别人优秀的博客后我就下定决心要给自己做一个精致的博客，想想只要在浏览器中搜索 <a href="https://yhl2333.github.io">https://yhl2333.github.io</a> (目前域名，正在向www.heluYang.com努力奋斗) 那全世界人都能搜索到我的网站，这个网页就是我的。</p><p>&emsp;&emsp;那么怎样创建一个博客呢，在本文中我会详细列出我的制作流程，而且大家也不必担心有一些网络技术不会导致半途而废。别急，请先大致浏览一下全文再动手搭建也不迟。</p><p>大致工作流程可以分为三部分：<br>1: 在本地新建文件夹用在有的hexo主题下修改成自己喜欢的样式（编译器用的VScode）;<br>2: 将做好的博客的文件夹通过git上传到github仓库。<br>3：在github仓库中将文件夹内容Page一下生成静态文件，这样就可以被其他人通过输入网址(如https:/xxxxxx.github.io)查询到了（百度除外，建议用非百度引擎搜索）。<br>4：通过购买腾讯，阿里服务器可以将博客部署到他们的服务器上，并绑定买好的域名（如www.xxxxxxx.com），这样就可以很快速的访问了（此步有需求的人可以用，没有需求大可不看这一条，到上一步一样可以搭建）。<br>以上步骤大可以无脑进行，99%的人的选择。</p><p>下面是几个要点，需要了解：<br>1：会翻墙（也就是会魔法），没有魔法你甚至连github,git都碰不了，至于git，github，魔法，请翻看我的软硬件杂谈，里面有详细的说明。<br>2：github与git的使用，这是俩东西，本次搭建过程中可以理解为一个发送一个接收，这个跟着视频流程走就可以了，不需要去学到底咋用的，但要先在github上注册账号，而git是一款单独的软件要下载，这俩教程也是网上烂大街的。如果你会魔法的话，这俩的安装和注册真就有手就行。</p><p>&emsp;&emsp;好了，以上几点满足的话我们就可以开始了！</p><p>做博客的平台选择：<br>&emsp;&emsp;首先要弄清楚的一点是要搭建静态博客还是动态博客，本博客就是静态博客，动态博客我相信普通人是用不到的，它与前者的主要区别就是它是服务器的数据库实时发送数据来维持的，而静态博客完全是服务器发来的一个.html页面。写博客，留言等静态博客完全够用了，还有最重要一点就是静态博客不要钱，动态博客有成本，而且还是和优酷续费的那种，你说你创建那种博客？必然静态。你看到的wordpress等属于是和hexo并列同功能的，但是是搭建动态博客的，收费。</p><p>做博客的软件：<br>&emsp;&emsp;我可以告诉大家静态博客的制作完全可以无脑选择Hexo ，大多数人都是这么选的，上面提到的butterfly主题是什么呢，你就理解为博客网页是手机界面，是Hexo的附属包，butterfly，next等主题就相当于是手机的不同主题。这些软件怎么下？下什么版本？看下面链接，我就是按下面视频做的，适用于任何windows10以上的系统，视频中有详细操作步骤。<br><a href="https://www.bilibili.com/video/BV1mU4y1j72n/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1mU4y1j72n/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>博客界面设计：<br>&emsp;&emsp;当你学习完以上的视频并操作后，你会有一个Hexo默认的博客界面，并且已经上传到github中以便以后发推文实时在github中更新，此时你想的一定是想要美化界面，想要更好看的界面，这类视频在b站上都不太好找，下面是我找到的，紧接下文：<br><a href="https://www.bilibili.com/video/BV1sK411Q7S7/?spm_id_from=333.999.0.0&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1sK411Q7S7/?spm_id_from=333.999.0.0&amp;vd_source=b6da26061de3320a8170666f06381a91</a><br>去这个up的视频库里去找，有可以做成这种效果的完整系列视频。</p><p>如何去写博文：<br>&emsp;&emsp;这里才是你做博客的核心目的！写文章，但写博客和写记事本写word是两回事，得学，下面是up的视频：<br><a href="https://www.bilibili.com/video/BV1uW411G7nP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1uW411G7nP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>如果你做完这些，那么你已经达到或者超越了我的博客网站的水平，接下来我会说说你可能会产生的问题：</p><p>问题一：做博客不是免费吗，到底要不要花钱呢？<br>answer：首先，做博客，将其上传到网上，能够被其他人打开，这个过程完全是免费的，但这时，你的博客域名是<a href="https://xxxx.github.io">https://xxxx.github.io</a> ，发现问题了吗？，就是github，github在整个过程中的作用相当于它充当了服务器的角色，任何人想要访问你的博客网站时，请求被发送到DNS进行域名解析，发现你的博客网站是存在github服务器的！而github服务器在国外，访问，将网站内容发送给访问者极其困难，慢，要挂外网的，挂外网也不会很快，你的界面设计的很复杂是要好久才能加载出所有内容，因此，开始氪金，你会问有没有不用钱的？我的回答是绝大部分人都自己去阿里云，腾讯云去买服务器和域名了，你自己细品。gitee和coding我都试过，coding与腾讯联手在朝着氪金方向发展，而Gitee则受到了国家的监管，你上传的内容在部署到服务器上时会被审核，发现有违规内容也不会告诉你哪里出了问题，而且都是国内仿照github做的仿版。有了自己的服务器和域名，相当于把你的博客数据从github服务器转移到我们自己的WLAN就可以直接访问的阿里云，腾讯云服务器了，而且这些服务器都有CDN加速，自然就可以快速加载快速打开了，但是服务器加域名费用的话差不多一年150左右，也有学生价，当然如果不想展示给别人看（不是不能，是加载慢）只想自己看自己写的话就可以停留在<a href="https://xxxx.github.io">https://xxxx.github.io</a> 了。</p><p>问题二：为什么有的插件，包容易下载不下来，有的会警告有错？<br>answer: 建议外网和内网切换尝试下载，下载时以管理员身份运行GitBash，后VSCode；有的包下载完会报错，提示 git audit fix,但其实这是包的版本问题，想处理就按照他说的 git audit fix，不想处理或处理不了就跳过，依然能用。</p><p>问题三：如何解决数据做好的博客页面加载慢的问题呢？<br>answer：氪金，买服务器和域名，而且要备案的，不算简单；也可以把里面用到的图片存成HTML文件到达图片更快加载的效果，或者把特效关了，不过这两种解决不了根本问题。</p><p>问题四： 如果博客/网页里放了很多图片，打开网页的时候会加载很慢，那应该如何解决呢？请去看 CDN、文件传输“图床”篇。</p><p>大致就是这些，吃晚饭去</p><p><font color=orange size=4 face="黑体">Markdown字体颜色，高亮</font><br><a href="https://blog.csdn.net/Treasure99/article/details/105601866">https://blog.csdn.net/Treasure99/article/details/105601866</a></p><p><font color=orange size=4 face="黑体">代码段</font><br>代码段前面必须空一行，全选按tab</p>]]></content>
      
      
      <categories>
          
          <category> 软硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于网络的认知</title>
      <link href="/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;我们每天都在登录B站，每天都在科学用网，只要手动输入 <a href="https://www.bilibili.com">https://www.bilibili.com</a>  我们就可以进入b站了，但你有想过这件事是如何实现的吗？还有当我们在做客户端，服务器相互传输信息的时候，IP和端口是干什么用的？在这篇文章中我将详细对标签中的各种名词做出解释。</p><p>&emsp;&emsp;首先，从我们自己的身边开始介绍，由这些引入到以上的各种名词，下面对这些名词进行形象化的解释，便于理解。</p><p>1：局域网（内网）<br>&emsp;&emsp;小时候家里买了个路由器，接到电脑上，电脑就有网了，接到手机上，wifi接到手机上，手机也有网了。我们就可以说，在这个路由器发射的网络信号让局部范围内有了网络，这个局部范围就称为局域网，而众多的手机，电脑，则是接入了这个局域网的设备。</p><p>2：公网：<br>&emsp;&emsp;现在我们家有局域网了，可别忘了小区内别人家也有路由器，他们也有自己的局域网，那么问题来了，谁给我们和他们路由器连的网？当然是一个更大的路由器了！一个更大的路由器会给你们小区所有的路由器供网。我们同样可以推出在别的小区也有着很多的家庭路由器在提供局域网，而给他们的路由器供网的则是他们小区的路由器。同理可推，给众多小区的路由器供网的是市政级别的路由器，给市政级别的路由器供网的是省的路由器。这样你就会发现整个供网系统就是一个金字塔型，由最上面的一个点向下延伸构建成一个金字塔，塔顶的点就是中央系统。而我们把小区各个用户用的路由器之上的部分称为公网（先把各家各户的路由器给用户家里局部区域供网的范围定义为局域网，把路由器之上的公网系统称为公网）。而整个金字塔的运营商（ISP）就是电信，联通，移动等公司。</p><p>&emsp;&emsp;有了局域网和公网的理解，我们就可以进一步解释 内网IP，公网IP 这类概念了：</p><p>3：内网IP<br>&emsp;&emsp;当别人问:”你电脑的IP是什么啊？”，你大惊失色，马上百度如何查看电脑IP，发现按win+R输入cmd按回车，在命令行中输入 ipconfig ，就查到了自己的电脑IP是1xx.xxx.xxx.xxx;然后你告诉那个人：我的IP是：“xxxxxxxxxxxxxxx”。<br>如果你有过以上的经历，并且认为上述语句并无毛病的话，那么说明你的理解是有问题的（你的操作完全没有任何问题）。下面我会解释为什么：<br>首先电脑IP并非固定的，电脑IP也不是电脑固有的，甚至“电脑IP”本身就是带有歧义的，它会让你认为这是电脑固有的，出厂就设定好的，但其实上不是的，电脑IP是你电脑接入局域网络的路由器来分配的！没错，如果你电脑接入了邻居家的局域网内，你就会发现电脑IP变了。所以这个IP只是临时性的。而且你家的路由器会保证它所分配的IP是各不相同的。</p><p>4：公网IP<br>&emsp;&emsp;公网IP是什么？和你的电脑IP有什么区别？首先我们要知道IP的作用是什么，我给你发了条微信，你给我回信，为什么信息会精准的在我们之间发送而没有发给别人呢？答：因为有IP，只要知道你我的IP，在这个大的金字塔框架中，信息就怎么也走不通。但如果你细想信息在金字塔中是怎么流动的，你会发现我发给你的信息从我的IP出发，到达我家的路由器再到达给我家路由器供网的小区路由器，小区路由器回去上面找市政级的路由器，这个市政级的路由器再找到你小区的路由器再找到你家的路由器再找到你的IP，构成了一条完整的通路，消息在这条通路之中流动。那问题来了，信息怎么知道这条通路的存在呢，信息为什么知道该怎样从当前路由器找到下一个路由器呢？它不知应该知道起点位置和终点位置吗？答：所用的路由器都有一个IP地址，你家的，你小区的，市政的，市政上面的，也就是说在公网里的路由器都有自己的IP地址，都有一个1xx.xxx.xxx.xxx的IP地址，这就是公网IP。但这些IP地址不是由上一级路由器随机分配的，都是固定好的，也就是说公网IP是固定不变的且各不相同的！这样我们也可以说在这个大的网络框架中每个网络用户的绝对地址都是由 公网IP+内网IP 唯一确定的，这是由于公网IP各不相同，局域网内各设备的IP各不相同，这样就保证了对每个用户而言 他公网IP+内网IP 各不相同。<br>我们可以做一个小实验：<br>内网IP查询：电脑cmd中输入ipconfig<br>公网IP查询： 百度内输入IP直接搜索的那串数字<br>我在E601实验室中在实验室路由器的局域网中查询这两项与我接入wifi BUAAMobile得到的两个IP地址都是不一样的。<br>内网IP不同是因为随机分配的，换个路由器就不一样了。<br>公网IP取决于你电脑所连的路由器，E601走的是北航路由器1，BUAAMobile是北航路由器2，两个路由器都不一样，自然公网IP就不一样了！</p><p>如果还是不理解直接看下面的链接视频：<br><a href="https://www.bilibili.com/video/BV1xu411f7UW/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1xu411f7UW/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a><br><a href="https://www.bilibili.com/video/BV1DD4y127r4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1DD4y127r4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>为了下面的叙述，解释一下服务器：<br>5：服务器，说白了就是存储了大量数据的super电脑，有自己的IP地址。你想从服务器得到服务器内的数据，就像你想从老师那得到成绩单：你用电脑微信发送请求：“老师你能不能把期末成绩发我一下”，老师收到请求后在他的电脑上把电脑里面存的成绩单发给你，老师的电脑就相当于一台服务器。你访问www.bilibili.com 请求经过金字塔的通路传递到bilibili公司的服务器，服务器收到请求就把B站主页的数据信息原路返回发送给了你，你就看到了b站主页,之后你想看主页上了哪个视频，也是如上过程。类似于微信聊条，只不过别人回的就是你要看的视频。</p><p>&emsp;&emsp;到这里，你就知道了，我想查询www.bilibili.com，访问请求由内网传到公网，去访问bilibili的服务器，bilibili的服务器再将数据走路由器通道找到我的IP传回给我，我就可以看到bilibili的界面了！<br>&emsp;&emsp;但你有没有想过，你的请求是访问 <a href="https://www.bilibili.com">https://www.bilibili.com</a> 那这条请求访问信息怎么知道该走那条路才能到目标路由与服务器呢？<br>聪明的你显然发现了，<a href="https://www.bilibili.com">https://www.bilibili.com</a> 与bilibili的服务器IP存在着千丝万缕的关系。下面就要讲到域名，DNS。</p><p>6：DNS，你可能会说只要有了目标IP地址，我就完全可以在金字塔体系内进行各种通信了啊，那DNS是干什么吃的？万事万物都有其存在的道理，我们回想一下，你要访问bilibili，那么你就要知道bilibili的IP，就是那一大串1xx.xxx.xxx.xxx，好，我们假设你今天知道了，那你下次还能记住吗？你先记住你女朋友的手机号吧！这就是域名存在的原因，好记！就是好记住，只要访问Bilibili域名<a href="https://www.bilibili.com">https://www.bilibili.com</a> 你就能进去了。但是在金字塔体系里是通过IP找IP来实现通信的啊，因此，就有了DNS—将域名翻译成IP，就是将<a href="https://www.bilibili.com">https://www.bilibili.com</a> 翻译成1xx.xxx.xxx.xxx。具体是怎末工作的呢？DNS实际是一个服务器，你访问某个网址域名时，这个网址域名会先被送到DNS服务器（没有例外），这个服务器内记录了世界上所有的域名和IP的对应数据，查询到后就会将具体的IP传回你的电脑，你的电脑收到后自动去访问这个具体的目标网站IP，就实现了你和目标网站的互通，如果没有DNS，你就只能输入IP访问了。</p><p>7:域名等级：拿 www.bilibili.com来说，.com是顶级域名，.bilibili是一级域名，.www是二级域名。</p>]]></content>
      
      
      <categories>
          
          <category> 计网与操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络知识，IP，DNS，服务器，局域网，公网， </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器端网络加速</title>
      <link href="/CDN%E5%8A%A0%E9%80%9F%E6%8A%80%E6%9C%AF/"/>
      <url>/CDN%E5%8A%A0%E9%80%9F%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>CDN技术是个啥？</p><p>我们先不聊CDN，来聊一聊普通的服务器。<br>&emsp;&emsp;这几天，我买了一个腾讯云的服务器并在我自己的笔记本上配置好了服务器，但美中不足的是我买了地点在广东的服务器，我人在北京，距离算是中规中矩，但距离因素依然是影响网站加载快慢的关键因素，也就是说如果我回到黑龙江，博客的打开速度就会更慢了。<br>有问题人们就会解决问题，那么如何解决服务器和访问用户之间的距离带来的不便呢？CDN就应运而生了，CDN的本质也是服务器，并且CDN分布在全国各地，比如我在黑龙江发出访问博客请求后，如果我开通了CDN服务，那么广州的那台服务器在给我提供页面数据信息的同时选择我身边的一台CDN服务器，将我所访问的资源内容缓存在CDN中，当我再次访问时，就会直接就近访问这台离我很近的CDN服务器，这样就实现了访问的加速，所以其他人（在我附近区域）访问我的博客时，请求同样发到广东的服务器，广东服务器会指向之前缓存过信息的CDN服务器，实现了就近传输数据，达到了提速。当然，这么牛x的服务得加钱。<br>下面的视频可以加深理解：<br><a href="https://www.bilibili.com/video/BV12T4y1P7Fh/?spm_id_from=333.788&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV12T4y1P7Fh/?spm_id_from=333.788&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>带宽，图像显示，图床，云存储COS<br>&emsp;&emsp;在这篇博客中，你看到了大量的图片，这些图片的大小超过50MB，而我所购买的服务器带宽是4M，所以要加载出所有的图片，就需要50/（4/8）=100s，而且这还是在我没有带宽损耗，也就是我人得站在广东那台服务器旁边才能有这种速度，随着距离的增加带宽发生了损耗，导致距离越远数据传输越慢（这也就是为什么需要CDN来消除距离因素）。但你会发现，就算有CDN服务器，我网站的加载完毕时间也只能逼近100s，那该怎样缩短时间呢？<br>当你打开互联网上的任何网站，实际上你打开后只花了不到十秒就全加载完了，我们反观加载的原理，网站内容按照加载所需带宽大小可以分为两部分，正常内容和图片（占大比例的还是图片！），因此我们可以在加载图片上动手脚，那么如何更快加载图片呢？<br>&emsp;&emsp;想更快加载一张图片，要么提升服务器的带宽，要么处理图像自身。下面我们来谈谈云存储技术，我们在做包含图片的网站时，经常把图像本身传到服务器中，以方便服务器调用发送给访问者，但服务器的带宽有限，我的就是4M，那怎样拓宽呢？首先腾讯云在卖服务器的时候就对带宽明码标价了，所以广东的那台腾讯云服务器本身的带宽就不用想了，但如果我们把图片存到其他服务器呢？用其他服务器的带宽来传输图片，你肯定会说，你这不就相当于自己又买了一台服务器来存图片吗？你说的没错，但也不完全对，我买的是有特定功能的服务器（存储类服务器，也就是云存储COS服务器，相比正规功能的服务器，这种特定功能的服务器极其便宜），就是我把网站要显示的图片存在了其他云服务器上，并生成访问链接：HTTP://XXXX。在博客网站的生成代码中我把图的访问路径换成了HTTP://XXXX 这种链接，如下：<br><a href="https://blog-1315294080.cos.ap-beijing.myqcloud.com/19.png">https://blog-1315294080.cos.ap-beijing.myqcloud.com/19.png</a>  ，点击链接就可以生成图片</p><p>&emsp;&emsp;这样有人在访问我的博客时，广东的服务器在加载博客网站的图片时，会访问这个图片的网址，这个网址部署在云存储COS服务器上，因此云存储COS服务器就会用它自己的带宽给我加载图片信息，这样就节省了广东服务器的4M带宽！因此就相当于你在打开我的博客的时候，传输资源的带宽=广东4MB+云存储COS服务器的带宽，一起加载。将图片转化成网页链接的过程，就是图床技术。因此同理，云存储技术还可以将文档，视频，音频如此操作，因此云存储可以针对很多类型资源进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> 计网与操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN 图床 图像显示 带宽 云存储COS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者日志</title>
      <link href="/%E5%BC%80%E5%8F%91%E8%80%85%E6%97%A5%E5%BF%97/"/>
      <url>/%E5%BC%80%E5%8F%91%E8%80%85%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<style>#web_bg{  background: url(/img/yunyuye.png)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><div class="note default simple"><p>default 开发者日志</p></div><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-21 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">1.0</a></p></div></div><div class='timeline-item-content'><p>本博客网站开服，作者：yhl2333<br>学校：北京航空航天大学<br>邮箱：1652966670@qq.com</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-23 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;好不容易把bug改完了，把功能实现了。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-23 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">1.0 -&gt; 1.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;今天是11月23日，新增了留言新功能，希望大家可以对博客网站提出建设性意见或者有什么想留言的。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-25 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;今天是11月25日，本着精益求精的态度，我对博客进行的大幅度的美化与修缮，成功实现了白天黑夜不同的界面显示与特效。这个过程历时整整一天，出现的问题：修改博客文件后在本地 host:4000端口打开的效果和在浏览器中服务器IP地址打开的效果不同，不同之处在于修改的部分没有显示。进过多次调试查证发现是浏览器自己的数据缓存功能，慨叹自己如此伞兵的同时也对浏览器的搜索引擎的检索能力提出质疑。浏览器的数据缓存：浏览器在加载网页之后会将内容缓存到你的设备上，当你再次访问（包括刷新网页）这个网站就会优先显示上一次加载缓存过的结果，而不是默认立即从服务器上更新全部网站内容，不然1GB的流量打开几个图片量大的网页就都没了。这也就导致了网站的开发者修改过服务器上的资源后刷新网址网址会没有任何变化。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-29 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;直接润回家！润的前一晚学校🐏了一个，润的当天🐏了一个。（润的后一天也🐏了一个）（再往后一天和我一层的同学也阳了，一层被拉走隔离了。。）<br>&emsp;&emsp;今天遇到了好多有趣的人，拼车的学姐，开出租的老父亲，做志愿奉献社会的兵哥，每个人都有着我所羡慕并且精彩的生活，<br>&emsp;&emsp;逢人便讲自己的憨厚懂事的高三儿子的出租车父亲，热情的和我讲述自己的孩子如何努力，如何憨厚可爱，如何高三了还孩子气，讲述的时候发自心底的开心与骄傲像极了我的父亲，虽然我不那么懂事（回家发现俺爹真的把烟戒了，挺开心的）。<br>&emsp;&emsp;在拼车群里拼了一天的车都没拼到去北京朝阳站的人，第二天拼到了一个林业大学的研一姐，和我一样也是趁着疫情赶紧润回家，老乡所以在一起聊了还算挺多的吧，值得感叹的是我依然还是和异性交谈九级伤残选手，也不太会表达，但单方面也没感到尴尬。<br>&emsp;&emsp;三四十号转运的人在天寒地冻的大街上冻了一个小时，怨气朝天地上了转运大巴，面对大家的埋怨挖苦，开车的军人哥忍气吞声还疯狂打趣，让车上的气氛缓和了下来，后来知道他是无偿来当志愿者的，理由是想要奉献社会，从早上七点干到晚上十点，很难想象一天中他咽下了多少波分流人员的怨气，令人打心底敬佩，无论如何，给别人多一些容忍与理解吧。<br>&emsp;&emsp;哈西站下了高铁，走在站里有种恍然若失的感觉，感觉愧疚又无力，不知不觉就泪流满面了。高中写了三年的触景生情，好像到了今天才算真正理解了<br>&emsp;&emsp;回家后和杭州的姐姐打了会电话，一切安好，希望今年过年的时候能见到吧<br>&emsp;&emsp;很精彩有趣的一天<br>&emsp;&emsp;三点半了，睡觉</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-12-1 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;隔离第二天。已经感觉得到自己精神层面出了些状况，可能是真的有太多太多想找人说说吧，可大家都在忙，也不去打扰了哈哈。<br>&emsp;&emsp;感觉这么多年自己就一直都在念书，大部分还都是无用功。感觉别人的生活都好精彩啊，好想走出去看看啊。引用彭哥的一句话“没有生活质量慢慢就抑郁了呗”，但比起身边的人我已经算是不错的了。北京看样子要解封了，脸都不要了。<br>&emsp;&emsp;好久没更技术篇了，明天更一篇C++出来。<br>&emsp;&emsp;今天属实是没啥正能量了，，<br>&emsp;&emsp;都别跟自己过不去吧，<br>&emsp;&emsp;加油吧大伙</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-12-5 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;开放了评论区，用的必来力评论系统网站，大家可以放心评论不用担心号被盗哈。。。号被盗了我全责好吧</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-12-9 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;ELDEN RING！年度最佳 2022-12-9，出个DLC直接攒钱买显卡去实验室玩。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-12-26 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;考研结束了，兄弟们都回来了，就算家不在肇东，大家也都第一站回到了肇东。对我来说，可算有人陪着说话打游戏了，不管考得怎么样，都先把一切都放下吧，休养一段时间。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-1-1 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;欢度元旦，给朋友们都发了贺词，鸣谢王哥凌晨帮助我度过情感难关解开心结。希望新一年能够认识到很多志趣相投的人，多交几个朋友。多学一些知识与社会技能，提高自己的生活质量！新年愿望是让自己变得博学谦逊。女朋友等毕业了再说吧。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-1-5 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;一根藤2023年度首聚。和大伙一起去了人工湖，看了烟花，打游戏出去住。得知桂花已经找了工作，感觉像是葫芦娃中大哥被妖精抓走了一样，七个人中第一个能早日实现经济自由和生活自由，工作也还不错。看来大家都别来无恙，即使生活充满了挫折也在努力改变自己的人生，接纳自己。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-4-12 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;做毕设的同时，重新更新了博客界面和博客内容。又接了一份毕设，要自己去大兴区出差了。说实话心里很没底。买了挺多设备花了挺多钱，等W教授发劳务买波A卡。目测找工作那年学历贬值加剧，也见识到了实验室的师兄出众的能力，打算从研一开始就锁定研究方向也方便以后找工作，和凯翔交流之后，目前定在了SALM。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-13 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;北航国际文化节，效果放在整个大学期间也是相当炸裂的存在，参照以往的校庆真的是好的不能再好了。很有特色，吃了许多风味小吃，和一些外国人合影留了念，裴济的肌肉小哥，漂亮的俄罗斯小姐姐（真的太好看了吧）。集了三十个国家的印章，听了歌舞，简直太满意了。也见识到了金钱与科技的力量，专业相机加修图直接化身专业摄影师。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-22 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;规划去西藏第一步，打算租个专业照相机。假期打算把SLAM和深入理解计算机系统看完，书可太厚了。SLAM，Linux使用，深入理解计算机。打算在答辩之后去录一些校园的vlog，也可以去沙河拍拍日出剪个视频发到b站上。看到蔡哥剪的视频很是震撼。因为大学前三年是混过来的，没怎么融入到大学生活中，所以感觉想弥补一下遗憾吧。从去年十月份开始到现在自己也算是没闲着，这学期更是离谱，一个学期更是一点都没闲着，也就放了一周的假期。也抽时间把博客重新优化了一下，学了下怎么写Markdown文本。之后就会一直更新了。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-29 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;本科结题答辩结束，晚上八点慕名去了国贸CBD。我本以为三里屯已算的上是极限，奈何国贸这建的是真的更好，肉眼可见的富到流油。不得不慨叹在这里面行走是真的压抑，仿佛像《高老头》中主角第一次踏入巴黎的上流社会一样，我第一次怀念起了家乡的淳朴。国贸商城里尽是些见所未见的奢侈品品牌，几乎全是表啊，珠宝啊，包啊。说起来也可笑，细品隔着橱窗看这些东西的感觉和卖火柴的小女孩隔着橱窗看富人宴饮应该也差不多了。完美诠释了世界在我眼前却又永远遥不可及，有种过街老鼠想要马上逃走的感觉。但想到出没于此的人本质上也不过是普通人，我和室友还是硬生生沿着国贸桥逛完了整个CBD。然而端庄大气的国贸脚下是望不到尽头的老破小，人行路边停满了数不清的996们的电瓶车。现在想起那些进京进沪拼死拼活工作的人就感到也挺五味陈杂的，人各有志吧。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-7-3 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;六月末给自己请了一段长假打算毕业旅行，先是和高中同学去张家界，然后去成都和室友去西藏走318线。我认为我应该往远了走一走，看一看，去看看未知的世界，自己憧憬的地方。虽然花了一万，但我认为很值得。旅行的过程中，我碰到了司机昊哥，没到三十岁，打算到30不结婚就整个中国旅行，抛下家里的压力给自己空间与自由，无法评价，自己认为值得怎样倒都无所谓。碰到一对从事医护行业的新婚夫妇，刚刚结婚，上了八个月的班来休婚假。很幸运遇到他们，不单单是相处的异常快乐与融洽，这次旅行除了旅行本身，还观测到了许多生活层面的东西。相恋七年结婚，挺羡慕的，哎羡慕死了。又有许多自己的爱好，有美好的家庭，除了没有很多自己可支配的时间。他们给我的共同感觉是人在三十岁左右必然会被生活压得喘不过气来，他们一直像兄长一样给我建议，即进入实验室以后我第二次感觉到自己和生活严重脱节了，每每和不同圈子的人接触，我都感觉弗如远甚。这种感觉来自于方方面面，要么完全没有了解过，要么肤浅。这次旅行我学会了如何摄影以及怎样去修图，虽然都是入门级，但也确实成为了爱好，也被许多人称赞拍的好看。总之318绝景太值得了，拍的照片真的好看，听到看到学到了好多东西。<br>&emsp;&emsp;一个人的毕业旅行还真的挺好的，主要运气好碰到了这么棒的队友。看到一个大师兄刚毕业就领结婚证了，羡慕。另一个大师兄应该也快了，酸上加酸哈哈。关于以后进私企还是国企，我感觉现在反而无所谓了，想要干自己喜欢干的行业，在私企才有可能；想稳定安家买房，国企会更容易，无论以后选择了哪一条路，我都不会对自己有什么怨言吧。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-7-4 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;拿到了学位证书和毕业证书，拿到了沈元荣誉学院的荣誉证书和北航校优秀毕业生证书，整理了毕业照，特此纪念。胳膊上的晒伤由红转黑了，羊湖晒了一中午就轻度晒伤了辐射也是真的逆天。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-23 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-23 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人们为什么想在大城市定居？</title>
      <link href="/%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1/"/>
      <url>/%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;先和大家小算一笔账。<br>&emsp;&emsp;本人预计三年半后毕业，假设进入航天科技一院工作并拿到北京户口，想要在北京/杭州/武汉等超一线，一线城市落户，(假设房价不增不减，假设没有天灾人祸)我要多少年才能买一套房子（算公摊80平）？</p><p>&emsp;&emsp;这里以北京房价计算</p><p>首先我认为不应该选择从小户型比如50平米向80平米过度，原因有二：<br>1：居住舒适程度来说，两个人(假设我到时候能找到对象好吧)居住面积小于50平米的话必然会很难受。<br>2：将50平米卖出会有亏损，并且十年之内也不可能还得完房贷。届时房价如果继续上涨，会比直接买80高上太多太多（租房同理）。</p><p>&emsp;&emsp;北京房价：五环南，北京公认楼价便宜的地方，6w/m^2。 这样6*80=480w。<br>&emsp;&emsp;我的工资，假设我毕业的时候就业形势和今年一样明朗（烧高香了）。四年后税后平均工资35w每年（个人所得税上缴20%）。</p><p>&emsp;&emsp;好，接下来计算工作前三年住员工公寓积攒的工资和买房贷款产生的利息，前三年税后（20+25+30）=75w。减去三年各种开销（每月2k），75-12<em>3</em>2k=68w，加上公司给的安家费，省吃俭用一共攒下80w.<br>&emsp;&emsp;去银行贷款（480-80）=400w。按还20年计算，这些贷款在20年内会产生至少250w的利息。这样（400+250）/35=19年。<br>&emsp;&emsp;相当于我不吃不喝把自己的工资全部投入，也要将近20年时间才勉强还完，且在这20年间不能出现任何形式的变数。<br>&emsp;&emsp;这样，另一个人的工资要完全用在家里开销上。就北京的存活物价与日常消费，勉强能养活两个人。<br>&emsp;&emsp;现在第一个问题来了，要不要孩子，根本就养不起，孩子怎么养，要多少资金投入，想都不敢想。也就是说很有可能当我快50的时候，我才把一切都安顿好，这时恐怕会身无分文。<br>&emsp;&emsp;现在第二个问题，如果在这二十年期间，漂浮的房地产泡沫破碎，经济危机怎么办。可以预见到的是欠银行的钱要一分不少的还掉，工资会大幅降低。如果真的发生这种事情，其实就可以/remake了，风险巨大。<br>&emsp;&emsp;所以目前的形势来看，为了一张北京户口，大半辈子基本上寝食难安。本来就没什么先天充实的经济基础的话，北京户口还真就是废纸一张。</p><p>&emsp;&emsp;那么父母是如何看待这件事的呢？</p><p>&emsp;&emsp;在我家经常听到的一句话就是“有多少人做梦都想拿北京户口都拿不到，你脑子有问题吗不留北京？”，我不禁要问，我为什么要留在北京？<br>&emsp;&emsp;“为了以后你的孩子以后就留在北京啊！”。<br>&emsp;&emsp;“………….”<br>首先老一辈人为什么会无脑认为大城市好，特别是北上广深<br>1：其实这么认为的都是东北人居多，因为从小到大都穷惯了。以前在电视上看到的先进，富裕的代表城市就是北上广深，听得多了也就认为理所应当了。听到在北京工作几年就能能拿30w+的工资就认为这工资太高了，潜意识里认为能满足生活所需。但问题是真的不够，甚至远远不够。<br>2：听单位同事云谁家孩子留在北京上海了，听的多了就会把能否定居北上广看作是孩子是否优秀成功的标准。其实你回想一下，这和让初中考到重点高中的尖子班，高考考到985，211何其的相似，这次变成了家是否安在了北上广深。这其中甚至可能掺杂了虚荣心和攀比作祟，她们只关心这一结果能否实现，而忽视了现今的生存成本，竞争压力，后代养育，经济形势等一系列在她们时代并未如此严峻过的问题，而这些问题在中国的超级城市中只会被无限的放大。如果你问她们孩子怎么养，谁来养，养育成本怎么办？大概率会和你说“你这么大都养过来了，这个社会上谁家还不得养个孩子呢？你面对的压力大家都在面对”云云，殊不知这个时代每年有1000w的毕业生却只有不到70w的新生儿，男女经济都独立的情况下由女性主持家务，养育子女已经变得不公平与不现实。<br>3：典型的中国式父母思想，“为了后代”这种说辞就是典型代表，生活的幸福感本就不多，996，007就导致根本就没有时间放松自己做自己想做的事，生命中的前三十年努力学习，再加十年，二十年的班，一辈子累死累活是吧，就为了让孩子扎根在北京？得了吧，他有能耐自己考北京去呗，他没能耐他也守不住家业。典型的中国式家长思想，生活有多艰苦无所谓，为了孩子好咋都行。纯属是被几次改革标语被洗脑了。</p><p>&emsp;&emsp;人来世上一遭，埋头苦干一辈子，来也匆匆去也匆匆，除了一个房子，一个孩子，一张标注着户口的废纸，一点活过的痕迹都没有。可悲又可笑。<br>这辈子我能为我自己活一活么？</p><p>&emsp;&emsp;你会说还非在北京不可吗，好，退一步，省会城市。<br>&emsp;&emsp;其实道理是一样的，经济好的地方工资高，经济差的地方工资低，你不妨拿出纸笔计算一下，还房贷的年数和北京没差多少，该面对的问题也是一样也不会少。<br>&emsp;&emsp;现在的年轻人也都不傻，和以前人们宁可打工也要进城一样，毕业生肯定会把省会级城市（除边疆贫困地区省会）列入第一梯队考量。这样你会发现，和北上广深一样，自己还是被一群相同目的的同龄人裹挟着，被迫选择这些省会城市。<br>&emsp;&emsp;三线四线城市也还是不会去的，岗位更少，工资更低，你自己都会想对得起自己的寒窗苦读吗。<br>&emsp;&emsp;所以我们发现在哪里好像都挺难，还不如卷去北上广，起码能满足一下虚荣心，甚至会安慰自己北上广有更好的社会福利，平台与机会更多，有隐性福利如五险一金，医疗条件好，代价是要比省会城市更辛苦一点。<br>&emsp;&emsp;至此，兜兜转转回到了起点，闭环形成了。</p><p>&emsp;&emsp;因此无论在父母还是我们的角度上，我们也似乎不得不往更高处走。</p><p>&emsp;&emsp;不过到现在，我们“活不起”的问题依然没有解决，我还是活不起啊！华生，你发现了盲点，如果只为了自己的话，问题可能就解决了。自己可以住五十平的房子，自己也不用担心婚姻问题，也完美规避了养孩子的问题，能完全按照自己的意愿支配自己的开销，在委屈自己的同时也不会带上其他人。现如今这么多的人选择不结婚，不要孩子，与其说年轻人想要自己过活的快快乐乐，不如说当今的社会形势下就不适合婚育，面对未知的婚姻问题与养育问题，在大城市中年轻人根本没有容错的余地，稍有不慎就可能事业家庭尽毁。生物都知道环境恶劣资源匮乏时会限制自身种族的繁衍，何况是人。</p><p>&emsp;&emsp;但当你决定拿出全部积蓄在大城市贷款买房了，你也就基本上扎根这个城市一辈子了。<br>&emsp;&emsp;最好的例子就是成都，08年大地震有多少人想去华东生活远离地震带的，结果发现他们根本就出不去。当你80%-90%的资产是房产时，想走？对比起，这是你家几代人的努力成果，你确定要放弃户口的同时贱卖掉房产吗？不可能的。这也是为什么超一线城市和一线城市的楼房性价比高的原因，保值啊，楼价再怎么跌，再怎么发生天灾人祸，想来大城市的人也大有人在，市场这么大，楼价会下跌？太抽象了，不存在的。</p>]]></content>
      
      
      <categories>
          
          <category> 社会现象分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 房价 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>房地产经济为何主导了经济的发展</title>
      <link href="/%E5%9C%9F%E5%9C%B0%E9%87%91%E8%9E%8D/"/>
      <url>/%E5%9C%9F%E5%9C%B0%E9%87%91%E8%9E%8D/</url>
      
        <content type="html"><![CDATA[<p>为什么说楼市推动了整个中国的发展？GDP飞黄腾达的第一支柱是楼市？</p><p>&emsp;&emsp;分税制实施前，全社会还在吃大锅饭，没有经济活力，工业实力与生产能力过于落户，发展太过缓慢。1978年11月24日，出现了第一例土地包产到户，也就是自己给自己干活，收入上交政府一部分剩下都是自己的。 这样成功刺激了人们的劳动积极性。底层的收入模式发生了改变，顶层的收入模式也要变，因为说白了以前一切劳动产生的价值归中央，现在劳动者和企业自己干自己的，收入也都是自己的，中央就没钱了，中央就说不行，你得把你赚的一部分给我，也就诞生了分税制的雏形包干制，就是把利润上交给上层，但这样就代表着如果当地没赚钱，就不必缴纳，因此在账上做手脚也大有人在，很快国库就没钱了。<br>&emsp;&emsp;地方政府有钱了，中央政府又没钱了。于是诞生了包干制pro—分税制，从生产材料，售卖的整个过程都要上税，无论是否盈利，相当于变相增加了产品的成本，只要有交易，就有源源不断的税收，这样中央一定能有稳定的经济收入。中央政府与地方政府73分，地方政府说：怎么我们才拿七成啊？中央财政部表示：七成那是中央的！中央拿税收之七，省政府，市政府，县政府共拿税收之3。不管地方愿不愿意，反正最后是都同意了。</p><p>&emsp;&emsp;这样中央政府有钱了，地方政府又没钱了，地方就会觉得，我拿的钱少干的事还多，属于是上头点菜地方买单了，这3成税，还要养活省政府，市政府，县政府，基础设施建设都要从里面拿钱，上层权力高，越往下分的钱还越少，这也就是为什么省里待遇比基层强不少。这就是财权层层上收，事权层层下压。中央财政蒸蒸日上，省级财政稳稳当当，市级财政摇摇晃晃，县级财政哭爹喊娘。</p><p>&emsp;&emsp;那这样地方活不了啊，哪有钱搞治安，搞教育，搞医保民生？<br>&emsp;&emsp;不知道你们有没有看过市政的新闻频道，我家在一个十八线小县城，在新闻里我经常能听到“招商引资”的字眼。在巨大的财政压力下，地方发现了又一座金矿，之前中央说税收拿七还有另一项并行措施，就是把土地出让金额给地方政府，至此，万恶之源开始出现，我们一辈子的终极目的—房，登上了历史舞台。土地房地产和招商引资有什么关系？</p><p>&emsp;&emsp;首先说明：近二十年来，我国经济发展迅猛，迅猛到在初期就可以做到经济翻几番，不过令人感到遗憾的是，绝大部分归功于土地兜售和土地金融，而非制造业，工业进步与科技进步。<br>&emsp;&emsp;再给大家解释一下贷款，比如说我有100元，存进了银行，那么银行可以把这部分钱贷款给别客户A，（此时我和A的银行卡里都有100元，我们都可以去市面上消费）这样市面上就相当于有200元可以流通，这时我和A把钱全部在超市里用掉，花掉200元购买商品，这也就是说实际上只靠我自己的100元，就实现了价值200元商品的购买！但是A是要把这贷款100元加上银行利息还给银行的。但在他购买商品的那一刻，他是无力偿还一分钱的，也就是说A把欠款的偿还赌在了未来的收入上，因此贷款的本质就是对未来的透支。还远远没有结束，A把钱消费给了超市老板B，老板B可是实打实得到了100元，如果B把这些钱存入银行，银行是不是就可以把这些钱贷款给用户C！这样B和C就又重新构成了我和A的关系，此时如果“我”，“A”，“B”，“C”将手里的100元都花出去了，相当于我的100元在市场中可以购买400元的商品！简直离大谱。同理，这样的模式还可以延续到D和E，F和G…..这样最开始的100元就通过贷款，在市场中可以兑换的价值不断翻番（银行中贷的款也在增多，不过随之经济发展，未来一定能还上嘛）。但可以兑换的价值肯定也不是无限上涨，上述只是理想情况，现实是国家规定中央银行只能拿储户个人存款的90%拿去放贷，这就导致，我存100，A贷款到90,B存90，C贷款81，这样依据等比数列求和往下推，这100元最多只可以购买1000元的等价物。神奇吗？这与地方房产，地方财政收入有什么关系呢？</p><p>&emsp;&emsp;下面来解析地方政府是如何增加自己的财政收入的。只有国家吃剩下的三成税收是肯定活不起的，地方政府发现土地可以大做文章，中央政府给了地方政府土地的“使用权”，也就是地方政府可也把土地外包给企业，这就是所谓的招商引资，有企业了，那企业的这些打工人应该去哪里住呢？当然是就近买房了呀！于是政府就又划出一片地给房地产开发商，用于楼盘开发，给人们提供居住场地。<br>可以看到，政府将土地租给了房地产开发商和企业以得到市政收入，但这两片地的类型存在着本质上的不同：卖给企业的地每平方米1000左右，卖给房地产开发商的则要比这个价钱贵上1000倍以上。</p><p>为什么要这样做？<br>1：如果市政招商引资把土地卖得太贵的话就没有商人企业进入了，相反，租给商人的地越便宜，来的企业就越多，引入的资金量就大，提供的就业岗位就越大，拉动更多的人进入城市居住，提高贷款买房的需求。可以建居民区的地价也就水涨船高，政府可以向银行抵押地价更高的地，贷出更多的钱，用以城市建设。<br>2：城市化进程中，为了活得更好的生存，教育，医疗条件，“人往高处走”是必然的趋势，而一个城市的市政收入越多，这些也就越完善。<br>3：如果每个人都背负着十年二十年的房贷，是不是有利于城市长期的稳定建设？（减少人口外流，增长城市人口，拉高教育医疗等行业消费水准）</p><p>&emsp;&emsp;可以看到，以上三条中任意一条都对另外两条有正反馈作用，即促进另外两条的发展。你也可以看到现在的状况，农村人口流失严重，有条件的宁可背上房贷也要进入更好的城市。可对于政府，市民来说，这些似乎都是没办法的事情：地方政府想要完成中央给的GDP指标，政府只能靠房地产业拉高GDP，几万元从农民手里买来的土地，然后几千万卖给房地产开发商，这个赚钱的速度当然没有任何生意可以比拟的，因此，土地财政就是鸦片一样，每个地方政府都会上瘾的，每年卖几块土地，财政问题就解决了，这样工作轻松，压力不大，政绩斐然！同时由于地方政府在从包干制转到分税制的时候就已经没有钱搞乡村的基础设施建设了，导致人们几乎同时涌入了城市。一夜之间，工厂如雨后春笋般在城市里建起，看着高涨的房价，民众争先恐后涌入城市，留下了几乎没有任何变化与发展能力的农村。就算今天中央想出政策振兴农村，想让年轻人回到农村，晚了，已经晚了，年轻的早已在城里结了婚还上了房贷，就算现在政府有钱了要将农村的基础设施做好做大，也难以吸引年轻人反乡了。我们现在能看到的基础设施建设，也仅限于县城往上，县城以下大部分农村连学校都倒闭了，就算有也不可能保证质量，把孩子送到城里读书已经成为每个农村家庭的信条。<br><img src="/img/gover.png" alt="地方政府运营模式"> </p><p>&emsp;&emsp;如果你关注过我国的股市和楼市，你会发现，股市怎么变，股市对GDP并没有太大影响，楼市及楼市的附带产业才是GDP指定亲爹。房地产业的产值每增加1个百分点，就能使相关产业的产值增加1.5到2个百分点。在我国，每增加1亿元的住宅投资，其他23个相关产业相应增加投入1.479亿元，被带动的直接相关或间接相关较大的产业有60多个。<br>&emsp;&emsp;房价能跌吗？糊涂啊！跌了某国经济总量不就跌了吗，地方政府的80%的负债还要靠卖地和地价的升值来偿还，往小了说，房地产是个人的身家，往大了说，这就是国运！<br><img src="/img/ground.png" alt="GDP与楼市"> </p><p>&emsp;&emsp;因此，在我们看到某国GDP跃居世界第二的同时，我们就应该意识到，万事万物都有其代价，市政向银行贷的款不还了吗？拿什么还？贷款的本质是透支未来啊，未来会还的！确实，贷多少，未来都能还。当年日本也是这么想的，甚至一个东京市的房地产可以买下整个美国（这就是贷款的力量！）。结果房地产泡沫破碎，社会直接停摆了二十年。我们现在的社会：人口多，资源有限，竞争激烈，老龄化严重，生育率达到谷底，和当年的日本几乎是一个模子刻出来的，我们虽然发展迅猛，但同日本一样，隐患严重。</p><p>&emsp;&emsp;那国家为什么不把钱更多的投入到科技高新产业的建设来实现转型呢？事实上，国家不论以任何目的把钱放下去，资金的流动去向是不会骗人的，因为天下的所有人都知道楼市赚钱啊！哪里能生财财才去哪，最终这些钱殊途同归，大部分还是流到了楼市里而不是科技公司的股市中，还是助长了房地产事业，这也就是过去十几年中房地产暴涨的原因。<br>&emsp;&emsp;房地产经济如何才能高高的升起，悄悄的放下呢？<br>&emsp;&emsp;现如今，中央政策选择改变杠杆率，也就是地方的土地在银行中能够抵押出来的贷款金额来限制房地产的主导地位，刚刚实施，未见成效。<br>&emsp;&emsp;能否转型成功，直接影响以后历史书上怎么评价现代人的功过得失，毕竟未来的人可不想给我们还债。可以确定的是，能够书写历史的人，在评价前人的正确性上要远远超出评价自己的，并且也不会留下一丝情面。</p>]]></content>
      
      
      <categories>
          
          <category> 社会现象分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分税制，土地政策，土地金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业生怎么总找不到好工作?</title>
      <link href="/%E6%AF%95%E4%B8%9A%E7%94%9F%E6%80%8E%E4%B9%88%E6%89%BE%E4%B8%8D%E5%88%B0%E5%A5%BD%E5%B7%A5%E4%BD%9C/"/>
      <url>/%E6%AF%95%E4%B8%9A%E7%94%9F%E6%80%8E%E4%B9%88%E6%89%BE%E4%B8%8D%E5%88%B0%E5%A5%BD%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;如果年度词汇可以选负面词汇的话，我相信，这个字只会取自两个方面：<br>1：疫情下经济低迷与人的精神问题<br>2：卷（多多少少带有本人的个人恩怨，但不影响与第一个方面并列）</p><p>&emsp;&emsp;我们为什么越来越难找工作了呢？为什么考研考公还在水涨船高？这种病态的考试应试系统为全社会都看在眼里却默不作声？</p><p>第一个问题：首先工作为什么越来越难找？<br>&emsp;&emsp;我感觉随便找个大学生出来他都能答出来：疫情之下经济低迷，各行各业（餐饮、零售、交通、旅游、等等等等）受到牵连，社会流动资金缩水，岗位缩招。拿互联网公司来举例，大公司因为资金短缺问题都能把整个研发部门给裁掉，没有经济来促进行业发展，招聘的毕业生自然而然就少了。<br>总之蛋糕变小了，能养的起的人数也减少了。</p><p>第二个问题:为什么考研考公水涨船高？<br>&emsp;&emsp;在回答这个问题的同时，先回想一下你的父母是不是曾经说过当年考上大学是多么多么困难，考上了就会分配工作以后生活无忧等等。<br>第一个关键点出现了，我们感觉现在好像考个大学有手就行，但当时非也，这种现象和当时的社会经济与教育资源有关，南方我不知道，北方大部分父母在小学初中毕业以后就会辍学种地，去城市打工减少家里的压力，一家好多个孩子也就会有一个或两个去读高中。好，现在都还很容易理解，那么列出1995年和2022年的高等教育适龄入学率（即同龄人中，上大学人数比总同龄人数）：<br>1995年：5.3%<br>2020年：54%<br>对比周边国家：<br><img src="/img/2.png" alt=""><br>&emsp;&emsp;从上面的数据不难看出，从前的大学教育是精英式教育，现在的大学教育是大众式教育。<br>&emsp;&emsp;那么什么时候开始有计划性的扩招了呢？<br>&emsp;&emsp;一切社会问题的产生永远都避不开一个要素：经济。毕竟整个地球史上就没有生物会和钱过不去的。<br>&emsp;&emsp;首先阐述一个事实，教育和经济是双向互补的。<br>&emsp;&emsp;去问问你的父母，1999年很重大的一件事，下岗潮。那一年国内市场经济下行，当年产生了1000万的下岗工人（没上大学的还是有充足的岗位去处的），年轻人不进大学，就会和全体工人一起竞争，在市场有限的条件下，社会矛盾会激化，因此就决定让更多学生进入大学。大学生进入大学，除了缓解当年的就业，下岗在就业的压力，还可以带动经济的发展，因为父母在看到扩招之前的大学生是如何风光，砸锅卖铁也都会供孩子上大学，这样本来停滞的经济也就开始流动起来，比如学生的住宿费，伙食费，可以促进学校引入师资和校舍和当地商业的发展，小学，初中，高中的大规模兴办，教师行业的兴起（你细品什么时候高中大学开始收学费的），学生的出行可以给铁路的建设提供资金支持，铁路建成则促进了各地经济的快速发展，因此这是当时市场经济的一剂强心针。<br>&emsp;&emsp;于是乎在1998年15大上就决定大学扩招，决定在2010年将上面的高等教育适龄入学率扩大到15%。于是1999年就是“大学扩招”年。但令人啧啧称奇的是这个计划在2003年就达到了15%，整整提前了7年。<br>我们可以看出，当年的大学扩招成效：<br>1、成功缓解了下岗潮的压力<br>2、成功促进了经济的发展，在2002年就达到了本来计划在2010年的15%大学入学率，足以证明这项举措是多么有成效。</p><p>&emsp;&emsp;好，再转向今年的考研考公，如果你观察数据可以发现，考研人数暴涨：<br><img src="/img/3.jpg" alt=""><br>&emsp;&emsp;2021年450w，2022年540w，足见经济形势的困顿，暴涨的背后伴随着教育部对研究生进行了扩招，同样的经济困顿，同样的扩招，此时此刻恰如彼时彼刻。<br>那如何处理当今的问题呢？<br>&emsp;&emsp;答：—“抄作业”—</p><p>&emsp;&emsp;打算直接复刻1999荣光是吧。当年的缓兵之计卓见成效，但如今的缓兵之计则不太行。区别在于：<br>1、缓兵的这几年经济并没有增长，就业岗位不增反减。经济没有增长的原因是疫情下的政策束手束脚，经济必然后退；还有就是Trump的贸易战，（有人说Trump贸易战输了我就想笑，贸易战确实是伤敌1000自损800，但问题是1000对人家来说不痛不痒，800对我们来说如数家珍），我国经济分为国内市场经济和海外进出口经济，国内市场经济被疫情拖累，海外进出口经济则被Trump咬住。这两方面导致了经济没有活力，导致经济下行<br>2、当1999就算扩招了，但绝大多数人还是上不了大学，和绝大部分适龄青年依旧是毫无关系，构不成激烈的竞争。现如今是却一个几乎全民大学的时代，扩招则就象征着内卷走向合理化与强制化，并且“读书改变命运”，“努力就会有回报”，儒家文化等信条深入人心，大家都想往上面发展，助长了内卷。但如今经济和岗位并没有增加，反倒是硕士研究生爆表，本科生无处可去。社会上的饭碗依旧是那么几个，反而就业，待就业人数两年内凭空增加了800w，再加上下一年的1000w毕业生，将近2000w。而且还呈现逐年积累的趋势，该如何解决？无法解决，但不管所有人愿不愿意，这2000w迟早会被消化掉，怎么消化掉？不知道，反正能消化掉就是了。</p><p>&emsp;&emsp;因此，这次的“抄作业”显然大局已定。除此之外，这种政策也导致了就业人员，准就业人员，预就业人员（我自己），产生了眼高手低的通病。<br>&emsp;&emsp;为什么感觉毕业待遇一年不如一年？很简单，人多了，均摊就少了。“之前的毕业生能拿到那么多工资，那我也应该拿那么多。”虽然我也很想对别人这么说，我自己也会这样去想，但事实是，就是我们眼高手低，自己不配。我们毕业证书的含金量，在前人看来大学很不错，就是天之骄子，这也是为什么我们会从长辈那里得到赞誉的原因，但实际上是，我们这个时代毕业人数比他们那个时候增加了10倍，但社会的饭碗只增加了三倍，本科毕业，硕士毕业的含金量就被稀释掉了。整个社会上的硕士博士数量逐年增加，硕士博士学历的含金量也必然逐年被稀释，上面有政策有要求各单位扩招保障毕业生就业率，但企业准入门槛还是硕士没有变，怎么办？把硕士工资稀释掉呗，因此现在硕士的底薪在逐年减少，这样才能多养几个员工。<br>&emsp;&emsp;自己的底薪被稀释，对于近几年在默默努力，疯狂内卷的社会成员来说，大部分人们的努力，是绝对得不到他们预想中的回报的。劳资努力了好几年，不拿高薪，对得起自己这几年的努力吗？很遗憾，我们的努力，是时势所趋，并非时势所需。我们所学的高考知识，本科知识，考研考公的内容，可以说和今后的工作内容完美脱轨。企业给高薪资，涨薪资的条件是你有“工作”能力，而不是应试能力，因此内卷了却没有得到回报的人大有人在，郁郁寡欢的人大有人在，社会矛盾只会积重难返。但是不内卷躺平吗？只会更惨。</p><p>&emsp;&emsp;最后我们再来分析一下人口结构：<br>&emsp;&emsp;2002年15%的大学入学率，剩下的85%在干什么？<br>&emsp;&emsp;2020年55%的大学入学率，剩下的45%在干什么？<br>&emsp;&emsp;2002年产业结构主打的是轻工业，重工业与农业，2020年也还是轻工业，重工业与农业，产业结构没转型吗？转了，但不太多。那以前初高中毕业进厂干的活现在谁干了？答：本科生。以前本科生干的活现在谁干了？答：985，211毕业生。我们的学历都在提升，但所干的工作内容，可以说没有变化。相比2002，他们起码还有一技之长，虽然学历不高，但人家的技能是真能养活自己，而我们，什么都会，又什么都不会，大学打着培养融会贯通的高等人才的旗号，让我们去学遍自然科学，从这一刻开始，我们就开始了眼高手低的第一步，谁是融会贯通的高等人才？我融会贯通干什么？反正我肯定不是，我感觉和自然科学有关的课对我来说屁用没有。因此我的评价是：无用功盛行，浪费年轻人的生命，政策已经弊大于利了。到最后我们走进社会干的和先人干的没啥区别（因为向高新科技，制造业的产业转型太慢了），我们花了更长的时间在学海里兜兜转转还是回到了前人的起点，那我们做出的努力和耗费的生命还有什么意义？但我们的国度并不缺聪明人，可能我们人人都比马克思聪明，但让聪明人变傻是很简单的，我是不信马克思在经历了高考大学以后还能写出资本论，因为他得在大学毕业才步入社会，才有时间去思考。</p><p>&emsp;&emsp;由于我们的长辈基本没学历或者是普通本科，我们看到他们现在也还活得不错，小康水平，导致我们会产生本科毕业起码在十八线县城也能活得不错吧，我学历比我爸妈高，他们在十八线小县城，那我们应该可以在四线，五线城市过一个简朴富足的生活了吧！这就错了呀，大错特错，我们学历是高了，大家学历都高了，按宏观数据来说，现在的普通本科甚至远远对标不上当时的大专，放在2002年我们也还是进不去大学的那一批，随着大学扩招，本科扩招，研究生扩招，我们只不过空有知识，空有学历，但社会上的碗筷并没有多出多少。因此，我们学识远超我们的父母，我们的学历远超我们的父母，但我们能够得到的生活质量，可能还远远不如。<br>&emsp;&emsp;别嘲笑我们的老爸老妈没文化，放到1995年，我们也那样。</p><p>&emsp;&emsp;之后的几年还会时艰难的几年，Trump大选成功，贸易战经济战也在加速，甚至USA在重返月球，新一轮太空竞赛很难不开启。同时后疫情时代人们的精神状态，南北贫富差距进一步增大，低迷的生育率（东北三省生育率碾压韩国喜提世界倒数第一，黑龙江更是站在了世界之巅）。房地产的经济泡沫什么时候会爆，这些都没有定数。但和之前几年的飞速发展相比，之后的几年甚至十年应该会是最严峻的十年了。</p><p>&emsp;&emsp;这样第二个问题就解决完了。</p><p>&emsp;&emsp;至于第三个问题，算了，不利于团结的话不说了。<br>&emsp;&emsp;没事少看点国内自媒体，凡是唱主旋律的下面评论区官方都帮你关了，评论也替我们筛选好了，这都没点数吗，你能看到的，从来都是别人想要你看到的。</p><p>&emsp;&emsp;想要在这个社会上有立足之地，实力与能力在未来将成为决定性因素。<br>&emsp;&emsp;加油吧大伙，别把挫折看的那么重，整点真本事出来，少往心里放点事，乐观面对每一天，比啥都强。<br>&emsp;&emsp;以上内容仅取自我的个人视角，有问题不去正视才是最蠢的，听之任之，是对历史与文明的不敬，更对不起世世代代的努力<br>&emsp;&emsp;祝伟大的祖国繁荣昌盛</p>]]></content>
      
      
      <categories>
          
          <category> 社会现象分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 就业难 扩招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客设计初衷</title>
      <link href="/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9B%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9B%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<style>#web_bg{  background: url(/img/10.png)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><p>&emsp;&emsp;今天是2022年11月21日，也是本人在博客网站几乎完成了所有的基础构建，开服的第一天。关于我为什么要创建博客，就是想充分的利用闲暇时间提升一下个人能力与素养，相当于写写日记，记录一下平时的所看所学所想，整理我在本科，研究生生涯的学习思路与内容。在这个经济低迷学历贬值的时代，广泛的涉猎，融会贯通，精于一处变得越来越重要。这是一个靠能力与学历的时代，是一个内卷内耗的时代，希望各位都能乐观豁达地面对挫折，没有什么过不去的坎，不要成为自己的敌人。同时我也希望自己的学习目的更多地从兴趣爱好出发，而不是迫于生计的压力给自己制定目标。在学习的过程中获得成就感，见证自己能力的增长也是一件很有意义的事情。</p><p>&emsp;&emsp;我就是个普通人，按照强化学习中的说法，反复学习就是训练自己的神经网络，人的价值也直接取决于自己网络训练的好坏。有人生来就在罗马，有人早早便没有了努力的必要，但作为芸芸众生的一份子，强者能区别于弱者便是靠着个人能力与精神上的强大。我想将自己的学习，生活中的历程与踩过的坑分享出来，帮助同样是想要学习一些热门知识并且想要交流沟通的人。相信已经学四年的你一定知道能否得到帮助的重要性，在本网站中，我会先将学习的内容分成以下几个我目前在学的大类，在这些类中我会分享我在学习中所看过的好的视频，通俗易懂的CSDN，知乎，简书以及我个人的梳理与理解。目前几个大类应该是：C++编程（QT），SLAM，计网与操作系统，硬软件茶谈（比如软硬件，git,服务器的使用，linux手册等常识性知识）。</p><p>&emsp;&emsp;搭建整个博客耗费了两天时间，保研以后空出的时间多了起来，我也在广泛学习一些网络技术以及编程技术，博客就是主要开发的项目之一，我也推荐大家记录一些生活中的故事，在现如今如此快节奏且的生活中给自己留一点空间，反思提升自己显得格外珍贵。更新的话大致每周一篇。</p><p>&emsp;&emsp;博客使用方法：手机端的适配还没时间开发，不过也仅仅是将就能看的程度，网页头部栏目列表中的音乐和电影都是可用的，但仅仅添加了我自己喜欢的部分。标签和分类栏可以查找文章与文章类型，可以在留言处给我留言写评论（评论要账号登录）。此外在右下角可以切换白天黑夜模式，简体繁体。</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=647947332&bvid=BV1fe4y1p7Co&cid=898707876&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++线程</title>
      <link href="/C-%E7%BA%BF%E7%A8%8B/"/>
      <url>/C-%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<style>#web_bg{  background: url(/img/22.png)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><p>QT的线程：引入&lt; QThread &gt; 两种用法：</p><p>第一种：<br>&emsp;&emsp;实例化类：thread = new Thread ;<br>&emsp;&emsp;启动线程：&lt; QThread &gt;类中带有虚函数run()，把需要线程处理的函数放在run()中重新实现。即在Thread.h与Thread.cpp文件中重写run()；<br>&emsp;&emsp;启动线程: thread-&gt;start()打开新的线程，就会自动调用run()函数。<br>&emsp;&emsp;关闭线程：thread.quit();thread.wait();<br><img src="/img/thread1.png" alt=""><br>第二种：<br>&emsp;&emsp;该方法更为灵活，方法一将要实现的内容放在run()函数中，这就造成了一定的局限性。新方法将重新定义一个新的class，将该类与实例化的thread绑定(相当于方法一中run()中的内容用新的class重写了)，这样启动thread()就会创建新的线程。<br>&emsp;&emsp;实例化类：thread = new QThread ;（不用创建.h .cpp来重写run()了）<br>&emsp;&emsp;实例化类：myT = new myObject; 在类文件(.h .cpp)中重写要实现的函数myT-&gt;myTimeout()。<br>&emsp;&emsp;将该类与线程绑定：myT-&gt;moveToThread(thread);<br>&emsp;&emsp;启动线程：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thread-&gt;start();</span><br><span class="line">emit <span class="title function_">startThread</span><span class="params">()</span>;</span><br><span class="line">connect(this,&amp;myWidget::startThread,myT,&amp;myObject::myTimeout)</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;关闭线程：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread.quit();</span><br><span class="line">thread.wait();</span><br></pre></td></tr></table></figure><br><img src="/img/thread2.png" alt=""><br>&emsp;&emsp;不过要注意，该方法启动线程：thread-&gt;start()，只启动了线程，但没有启动线程处理函数。如果在这之后添加myT-&gt;myTimeout()；来主动调用线程函数也是不可以的，这样会导致线程函数和主线程在同一线程。<br>&emsp;&emsp;(用qDebug&lt;&lt; QThread::currentThread();可以查看当前线程号)<br>&emsp;&emsp;这时需要在Widget构造函数中connect(this,&amp;myWidget::startThread,myT,&amp;myObject::myTimeout)来连接线程函数。<br>&emsp;&emsp;调用thread.quit()；thread.wait();后线程不会立即关闭，而是等待线程函数处理完毕后才会关闭线程。<br>&emsp;&emsp;connect()函数的第五个参数，是和多线程有关的，默认多线程，槽函数所在线程与接收者一样，即myT与&amp;myObject::myTimeout一个线程。这也解释了方法二为什么要用connect()启动线程函数，因为connect()有主线程，子线程之分，当代码中出现绑定线程的操作：myT-&gt;moveToThread(thread)，则connect()就会把myT与&amp;myObject::myTimeout放到子线程执行。</p><p>[线程详细教学]<a href="https://www.bilibili.com/video/BV1XW411x7NU?p=79&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1XW411x7NU?p=79&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++ QT中的 Widget::Widget(QWidget *parent) :QWidget(parent)</title>
      <link href="/QTwidget/"/>
      <url>/QTwidget/</url>
      
        <content type="html"><![CDATA[<p>如何理解下面段代码?</p><pre><code>Widget::Widget(QWidget *parent) :    QWidget(parent)&#123;&#125;</code></pre><p>在讲解原因之前，先请大家看下面的一个例子:</p><pre><code>#include &lt;iostream&gt;using namespace std;class Base&#123;public:    Base() :m_num(0)&#123;        cout &lt;&lt; &quot;this is Base()&quot; &lt;&lt; endl;    &#125;    Base(int val):m_num(val)&#123;        cout &lt;&lt; &quot;this is Base(int val)&quot; &lt;&lt; endl;    &#125;private:    int m_num;&#125;;</code></pre><p> 上方代码定义了一个基类Base，并且有两个构造函数，一个是默认构造函数，一个是有一个整型参数的构造函数。</p><pre><code>class BaseChild: public Base&#123;public:    BaseChild()&#123;        cout &lt;&lt; &quot;this is BaseChild()&quot; &lt;&lt; endl;    &#125;    BaseChild(int val): Base(val)&#123;        cout &lt;&lt; &quot;this is BaseChild(val)&quot; &lt;&lt; endl;    &#125;private:    int m_num;&#125;;</code></pre><p>上方代码定义了一个BaseChild类，并继承Base类，同样的，它也定义了两个构造函数，一个默认，一个有整型参数。</p><pre><code>int main(int argc, char *argv[])&#123;    BaseChild child1;    BaseChild child2(5);    return 0;&#125;</code></pre><p>main函数实例化了两个子类实例，child1，child2。child1调用默认构造函数。child2调用有整型参数的构造函数。<br>现在，我们运行程序，会有如下打印：<br><img src="/img/1.png" alt=""><br>看到了吗，我们发现：<br> ·创建child1时，是先调用了Base的默认构造函数，再调用自己的默认构造函数<br> ·创建child2时，是先调用了Base(int)这个构造函数，再调用自己的整型参数构造函数。</p><p>所以我们回头看BaseChild的构造函数:</p><pre><code>BaseChild(int val): Base(val)&#123;        cout &lt;&lt; &quot;this is BaseChild(val)&quot; &lt;&lt; endl;    &#125;</code></pre><p>细心的同学，可能早就发现了，初始化列表中的Base(val)正是调用了我们Base基类的有参构造函数，而这样的写法就刚好是我们开头代码中的那段:<br>Widget::Widget(QWidget <em>parent) :QWidget(parent)<br>所以Widget是调用了QWidget下面的构造函数:<br>QWidget(QWidget</em> parent = Q_NULLPTR, Qt::WindowFlags f = Qt::WindowFlags());<br>所以得出如下总结：<br>总结：<br>· 如果不指定构造函数，则派生类会调用基类的默认构造函数<br>· 派生类构造函数的初始化列表只能初始化派生类成员，不能直接初始化继承成员，如果想 要调用基类的有参构造函数，则可以在派生类的初始化列表中显示指定</p><p>以上总结，也告诉我们，当定义一个类时，最好为该类定义默认构造函数。<br>好的，那么我们又提出一个问题，“调用QWidget(parent)这个构造函数，QWidget父类都做了哪些动作呢？”<br>下面是QWidget源码中的一部分节选：</p><pre><code>QWidget::QWidget( QWidget *parent, const char *name, WFlags f )    : QObject( parent, name ), QPaintDevice( PDT_WIDGET ),    pal( parent ? parent-&gt;palette()        // use parent&#39;s palette        : *qApp-&gt;palette() )            // use application palette&#123;    if ( parent ) &#123;    QChildEvent *e = new QChildEvent( Event_ChildInserted, this );    QApplication::postEvent( parent, e );    &#125;&#125;</code></pre><p>大家从上面可以看出，如果parent参数非空的话，那么该构造函数使用了其父窗口的调色板，并且发送了QChildEvent事件，这会让新的窗口成为parent所指窗口的子窗口，那么当父窗口被删除时，子窗口也会自动的被删除。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++笔记</title>
      <link href="/C-%E8%B8%A9%E5%9D%91/"/>
      <url>/C-%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<style>#web_bg{  background: url(/img/19.png)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="关于常量指针与指针常量"><a href="#关于常量指针与指针常量" class="headerlink" title="关于常量指针与指针常量"></a><font color=DeepSkyBlue size=5 face="黑体">关于常量指针与指针常量</font></h1><pre><code>const int *p=&amp;a ; </code></pre><p>const 修饰的是取 <em> 的操作，因此取星操作不能改变，就是 </em>p的值(p所指的内容)不可改变 ，但指针的方向可以改变。<br><img src="/img/5.png" alt="">  </p><pre><code>int * const p = &amp;a ; </code></pre><p>const修饰的是p这个指针，因此这个指针的指向固定了，但是指针所指的内容可以改变。<br><img src="/img/4.png" alt="">  </p><pre><code>char *p=&quot;hello&quot;;p=&quot;aa&quot;;//报错</code></pre><p>这种方法初始化的字符串是常量字符串，不能修改，相当于const char *p=”hello”。</p><pre><code>char p[]=&quot;hello&quot;;p[0]=&#39;a&#39;;cout&lt;&lt;p&lt;&lt;endl;</code></pre><p>这是变量，可以修改。</p><pre><code>char *p=new char[6];p=&quot;hello&quot;;</code></pre><p>下面是应用举例：</p><pre><code>char* test(char* x) &#123;x[2] = &#39;\0&#39;;//标记点return x;&#125;int main() &#123;    char* x = (char*)&quot;svgc&quot;;    cout &lt;&lt; test(x);&#125;</code></pre><p>会报错，因为传入的char*地址指向了一个字符串常量</p><pre><code>char* test(char* x) &#123;    x[2] = &#39;\0&#39;;    return x;&#125;int main() &#123;    char x[] = &quot;svgc&quot;;    cout &lt;&lt; test(x);&#125;</code></pre><p>这个就不会报错<br><!-- endtimeline --></p><!-- timeline 2022-12-24 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="指针与别名接收栈空间返回值"><a href="#指针与别名接收栈空间返回值" class="headerlink" title="指针与别名接收栈空间返回值"></a>指针与别名接收栈空间返回值</h1><pre><code>int test01()&#123;    int a=10;    return a;&#125;int main()&#123;    int &amp;ref = test01();    cout&lt;&lt;&quot;ref = &quot;&lt;&lt; ref &lt;&lt; endl;    cout&lt;&lt;&quot;ref = &quot;&lt;&lt; ref &lt;&lt; endl;&#125;</code></pre><p>输出结果： ref = 10<br>          ref = 2425255</p><p>原因，拿别名指向返回值，但test01()执行完后，该返回值所在空间被释放了，编译器会默认保留返回值一次。<br>同理：</p><pre><code>int test01()&#123;    int a=10;    return &amp;a ;&#125;int main()&#123;    int *ref = test01();    cout&lt;&lt;&quot;ref = &quot;&lt;&lt; *ref &lt;&lt; endl;    cout&lt;&lt;&quot;ref = &quot;&lt;&lt; *ref &lt;&lt; endl;&#125;</code></pre><p>输出结果： ref = 10<br>          ref = 2425255<br>也是一个原因。其本质都是指针指向了一个被释放的栈空间而编译器只保留了一次。<br><!-- endtimeline --></p><!-- timeline 2023-5-1 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="引用和指针区别"><a href="#引用和指针区别" class="headerlink" title="引用和指针区别"></a>引用和指针区别</h1><h2 id="定义上的区别"><a href="#定义上的区别" class="headerlink" title="定义上的区别"></a>定义上的区别</h2><p>指针和引用主要有以下区别：</p><ol><li>引用必须被初始化，但是不分配存储空间。指针不声明时初始化，在初始化的时候需要分配存储空间。</li><li>引用初始化后不能被改变，指针可以改变所指的对象。</li><li>不存在指向空值的引用，但是存在指向空值的指针。<br>注意：引用作为函数参数时，会引发一定的问题，因为让引用作参数，目的就是想改变这个引用所指向地址的内容，而函数调用时传入的是实参，看不出函数的参数是正常变量，还是引用，因此可能引发错误。所以使用时一定要小心谨慎。</li></ol><p>&emsp;&emsp;从概念上讲。指针从本质上讲就是存放变量地址的一个变量，在逻辑上是独立的，它可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。</p><p>&emsp;&emsp;而引用是一个别名，它在逻辑上不是独立的，它的存在具有依附性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的（自始至终只能依附于同一个变量）。</p><p>&emsp;&emsp;指针和引⽤都是⼀种内存地址的概念，区别呢，指针是⼀个实体，引⽤只是⼀个别名。 在程序编译的时候，将指针和引⽤添加到符号表中。</p><ol><li>指针它指向⼀块内存，指针的内容是所指向的内存的地址，在编译的时候，则是将“指针变量名-指针变量的地址”添加到符号表中，所以说，指针包含的内容是可以改变的，允许拷贝和赋值，有 const 和⾮ const 区别，甚⾄可以为空， sizeof 指针得到的是指针类型的⼤⼩。</li><li>⽽对于引⽤来说，它只是⼀块内存的别名，在添加到符号表的时候，是将”引用变量名-引⽤对象的地址”添加到符号表中，符号表⼀经完成不能改变，所以引⽤必须⽽且只能在定义时被绑定到⼀块内存上，后续不能更改，也不能为空，也没有 const 和⾮ const 区别。<br>具体举例：<a href="https://zhuanlan.zhihu.com/p/140966943">https://zhuanlan.zhihu.com/p/140966943</a><h2 id="传参上的使用"><a href="#传参上的使用" class="headerlink" title="传参上的使用"></a>传参上的使用</h2>&emsp;&emsp;在C++中，指针和引用经常用于函数的参数传递，然而，指针传递参数和引用传递参数是有本质上的不同的：</li></ol><p>&emsp;&emsp;指针传递参数本质上是值传递的方式，它所传递的是一个地址值。值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。（这里是在说实参指针指向的地址值不会变，但地址的内容可能会变，调用的函数对传入指针指向的地址做备份，可以改变该地址内存的内容，但不能影响实参指针指向的地址）<br>&emsp;&emsp;而在引用传递过程中， 被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址（传进被调函数的东西是变量别名，但备份值传递的值是实参的地址！传递指针中传入被调函数的东西是指针指向的地址，备份的也是指针指向的地址）。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。<br>&emsp;&emsp;引用传递和指针传递是不同的，虽然它们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。而对于指针传递的参数，被调函数只是复制了指针指向的地址，并不能改变实参指向的地址。引用传递的实参指的是变量本身，指针传递的实参指的是指针指向的地址，因此引用传递可以改变实参；指针传递不能改变实参（指针指向的地址），但能改变这个地址对应的内容。  </p><h2 id="下面是代码举例："><a href="#下面是代码举例：" class="headerlink" title="下面是代码举例："></a>下面是代码举例：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">change1</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;值传递--函数操作地址&quot;</span>&lt;&lt;&amp;n&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//显示的是拷贝的地址而不是源地址 </span></span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">change2</span><span class="params">(<span class="type">int</span> &amp; n)</span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;引用传递--函数操作地址&quot;</span>&lt;&lt;&amp;n&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指针传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">change3</span><span class="params">(<span class="type">int</span> *n)</span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;指针传递--函数操作地址 &quot;</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    *n=*n+<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span>     <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;实参的地址&quot;</span>&lt;&lt;&amp;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    change1(n);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;after change1() n=&quot;</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    change2(n);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;after change2() n=&quot;</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    change3(&amp;n);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;after change3() n=&quot;</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;为了进一步加深大家对指针和引用的区别，下面我从编译的角度来阐述它们之间的区别：</p><p>&emsp;&emsp;程序在编译时分别将指 针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为指针变量的地址值，而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改。</p><h2 id="最后，总结一下指针和引用的相同点和不同点："><a href="#最后，总结一下指针和引用的相同点和不同点：" class="headerlink" title="最后，总结一下指针和引用的相同点和不同点："></a>最后，总结一下指针和引用的相同点和不同点：</h2><p>★相同点：</p><ol><li><p>都是地址的概念；</p></li><li><p>指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。</p></li></ol><p>★不同点：</p><ol><li><p>指针是一个实体，而引用仅是个别名；</p></li><li><p>引用只能在定义时被初始化一次，之后不可变；指针可变；引用“从一而终”，指针可以“见异思迁”；</p></li><li><p>引用没有const，指针有const，const的指针不可变；</p></li><li><p>引用不能为空，指针可以为空；</p></li><li><p>“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p></li><li><p>指针和引用的自增(++)运算意义不一样；</p></li><li><p>引用是类型安全的，而指针不是,（引用比指针多了类型检查）</p><!-- endtimeline --></li></ol><!-- timeline 2023-5-7 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="CMake编译源文件"><a href="#CMake编译源文件" class="headerlink" title="CMake编译源文件"></a><font color=red size=5 face="黑体">CMake编译源文件</font></h1><p>下面是利用CMake编译open62541库：<br><a href="https://blog.csdn.net/qq_54227351/article/details/129380793?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2">https://blog.csdn.net/qq_54227351/article/details/129380793?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2</a></p><p>&emsp;&emsp;在软件开发中，库（或动态链接库）是编译好的二进制代码的集合，其中包含可重用的函数和类。当您链接一个库时，编译器会将库中的函数和类与您的源代码一起链接到一个可执行文件中。在这个可执行文件运行时，库中的函数和类就可以被调用和使用了。<br>&emsp;&emsp;在Windows系统中，库文件通常有两种扩展名：.lib和.dll。.lib文件是静态库，其中包含了库的二进制代码，链接时会将代码静态地链接到您的应用程序中。.dll文件是动态链接库，其中包含了库的二进制代码，但是在链接时不会将代码静态地链接到您的应用程序中，而是在运行时动态地加载和链接库。<br>&emsp;&emsp;在QT项目中，当您通过pro文件中的LIBS选项将库文件链接到您的项目中时，编译器会将库文件中的二进制代码与您的源代码链接到一起。因此，您不需要在源文件中包含库文件中的源代码文件（.c文件），因为这些文件已经被编译成了二进制代码，并且在链接时被链接到您的源代码中。  </p><p>QT导入库可能出现的问题：<br><a href="https://blog.csdn.net/yqahx/article/details/120012706">https://blog.csdn.net/yqahx/article/details/120012706</a><br><!-- endtimeline --></p><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="关于extern的用法："><a href="#关于extern的用法：" class="headerlink" title="关于extern的用法："></a><font color=red size=5 face="黑体">关于extern的用法：</font></h1><p>&emsp;&emsp;利用关键字extern，可以在一个文件中引用另一个文件中定义的变量或者函数，下面就结合具体的实例，分类说明一下。  </p><font color=LightSeaGreen>一、引用同一个文件中的变量</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">func(); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&emsp;&emsp;如果按照这个顺序，变量 num在main函数的后边进行声明和初始化的话，那么在main函数中是不能直接引用num这个变量的，因为当编译器编译到这一句话的时候，找不到num这个变量的声明，但是在func函数中是可以正常使用，因为func对num的调用是发生在num的声明和初始化之后。&emsp;&emsp;如果我不想改变num的声明的位置，但是想在main函数中直接使用num这个变量，怎么办呢？可以使用extern这个关键字。像下面这一段代码，利用extern关键字先声明一下num变量，告诉编译器num这个变量是存在的，但是不是在这之前声明的，你到别的地方找找吧，果然，这样就可以顺利通过编译啦。但是你要是想欺骗编译器也是不行的，比如你声明了extern int num；但是在后面却没有真正的给出num变量的声明，那么编译器去别的地方找了，但是没找到还是不行的。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">下面的程序就是利用<span class="keyword">extern</span>关键字，使用在后边定义的变量。</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">func</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    func(); <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="type">int</span> num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num); <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><font color=LightSeaGreen>二、引用另一个文件中的变量</font>  &emsp;&emsp;如果extern这个关键字就这点功能，那么这个关键字就显得多余了，因为上边的程序可以通过将num变量在main函数的上边声明，使得在main函数中也可以使用。  &emsp;&emsp;extern这个关键字的真正的作用是引用不在同一个文件中的变量或者函数。<font color=YellowGreen>main.c</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color=YellowGreen>b.c</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line">voidfunc()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fun in a.c&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&emsp;&emsp;例如，这里b.c中定义了一个变量num，如果main.c中想要引用这个变量，那么可以使用extern这个关键字，注意这里能成功引用的原因是，num这个关键字在b.c中是一个全局变量，也就是说只有当一个变量是一个全局变量时，extern变量才会起作用，像下面这样是不行的。<font color=YellowGreen>mian.c</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color=YellowGreen>b.c</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fun in a.c&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&emsp;&emsp;另外，extern关键字只需要指明类型和变量名就行了，不能再重新赋值，初始化需要在原文件所在处进行，如果不进行初始化的话，全局变量会被编译器自动初始化为0。像这种写法是不行的。    extern int num=4;&emsp;&emsp;但是在声明之后就可以使用变量名进行修改了，像这样：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">int</span> num;</span><br><span class="line">    num=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>&emsp;&emsp;如果不想这个变量被修改可以使用const关键字进行修饰，写法如下：<font color=YellowGreen>mian.c</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color=YellowGreen>b.c</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fun in a.c&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&emsp;&emsp;使用include将另一个文件全部包含进去可以引用另一个文件中的变量，但是这样做的结果就是，被包含的文件中的所有的变量和方法都可以被这个文件使用，这样就变得不安全，如果只是希望一个文件使用另一个文件中的某个变量还是使用extern关键字更好。<font color=LightSeaGreen>三、引用另一个文件中的函数</font><p>&emsp;&emsp;extern除了引用另一个文件中的变量外，还可以引用另一个文件中的函数，引用方法和引用变量相似。</p><p><font color=YellowGreen>mian.c</font><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>;</span><br><span class="line">func();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><font color=YellowGreen>b.c</font><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fun in a.c&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;这里main函数中引用了b.c中的函数func。因为所有的函数都是全局的，所以对函数的extern用法和对全局变量的修饰基本相同，需要注意的就是，需要指明返回值的类型和参数。<br><!-- endtimeline --></p><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="vector迭代器的坑"><a href="#vector迭代器的坑" class="headerlink" title="vector迭代器的坑"></a>vector迭代器的坑</h1><p>&emsp;&emsp;在vector数组中我们删除数组经常用的就是erase方法，但是earse的用法一不注意就会出错，今天我就遇到了，所以在这里总结一下，避免大家用错。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> iter=vec.begin();iter!=vec.end(); iter++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(*iter == <span class="number">3</span>)</span><br><span class="line">            veci.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;这里面隐藏着一个很严重的错误：当veci.erase(iter)之后，iter就变成了一个野指针，对一个野指针进行 iter++ 是肯定会出错的。<br>&emsp;&emsp;我们通过查阅文档可以看到erase函数的返回值是这么介绍的：一个迭代器，指定在任何删除的元素之后剩余的第一个元素，如果不存在这样的元素，则指定指向向量结尾的指针。并且比如vector里有4个int型，内存从xxxxx10到xxxxx20,4*4字节=16，这是vector容器的大小。eraser()删除了一个元素，后面的元素补上来，iter指向的内存被释放掉，iter变为野指针，对野指针做任何操作都会报错，因此要重新赋值。这里需要注意，系统给vector初始化的空间是不会变的，删完数据后vector.end()指向的不是初始化的结尾，是实际存储变量的下一个字节。<br>&emsp;&emsp;按如下修改：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> iter=vec.begin();iter!=vec.end(); iter++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(*iter == <span class="number">3</span>)</span><br><span class="line">            iter = veci.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;但是这种代码也是存在缺陷的，首先是我们无法连续删除数字3，其次是迭代器在指向vec.end()的时候，还会进行一次++，这就发生了数组越界，所以我们一概这样修改：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> iter=vec.begin();iter!=vec.end(); )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( *iter == <span class="number">3</span>)</span><br><span class="line">        iter = veci.erase(iter);<span class="comment">//当删除时erase函数自动指向下一个位置，就不需要进行++</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        iter ++ ;    <span class="comment">//当没有进行删除的时候，迭代器++</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时vec.end()指向的内存是删完后的int型的下一个字节。因此这时cout&lt;&lt;*vec.end();会报错</span></span><br></pre></td></tr></table></figure><br><!-- endtimeline --></p><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><p>&emsp;&emsp;C语言允许为一个数据类型起一个新的别名，就像给人起“绰号”一样。<br>&emsp;&emsp;起别名的目的不是为了提高程序运行效率，而是为了编码方便。例如有一个结构体的名字是 stu，要想定义一个结构体变量就得这样写：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">stu1</span>;</span></span><br></pre></td></tr></table></figure><br>&emsp;&emsp;struct 看起来就是多余的，但不写又会报错。如果为 struct stu 起了一个别名 STU，书写起来就简单了：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STU stu1;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;使用关键字 typedef 可以为类型起一个新的别名。typedef 的用法一般为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  oldName  newName;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;oldName 是类型原来的名字，newName 是类型新的名字。例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INTEGER;</span><br><span class="line">INTEGER a, b;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;INTEGER a, b;等效于int a, b;。</p><h2 id="数组字符串"><a href="#数组字符串" class="headerlink" title="数组字符串"></a>数组字符串</h2><p>&emsp;&emsp;typedef 还可以给数组、指针、结构体等类型定义别名。先来看一个给数组类型定义别名的例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ARRAY20[<span class="number">20</span>];</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;表示 ARRAY20 是类型char [20]的别名。它是一个长度为 20 的数组类型。接着可以用 ARRAY20 定义数组：<br>&emsp;&emsp;ARRAY20 a1, a2, s1, s2;<br>它等价于：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a1[<span class="number">20</span>], a2[<span class="number">20</span>], s1[<span class="number">20</span>], s2[<span class="number">20</span>];</span><br></pre></td></tr></table></figure></p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>&emsp;&emsp;又如，为结构体类型定义别名：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">        <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        <span class="type">char</span> sex;</span><br><span class="line">&#125; STU;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;STU 是 struct stu 的别名，可以用 STU 定义结构体变量：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STU body1,body2;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;它等价于：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">body1</span>, <span class="title">body2</span>;</span></span><br></pre></td></tr></table></figure></p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>&emsp;&emsp;再如，为指针类型定义别名：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*PTR_TO_ARR)</span>[4];</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;表示 PTR_TO_ARR 是类型int * [4]的别名，它是一个二维数组指针类型。接着可以使用 PTR_TO_ARR 定义二维数组指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PTR_TO_ARR p1, p2;</span><br></pre></td></tr></table></figure></p><h1 id="typedef-和-define-的区别"><a href="#typedef-和-define-的区别" class="headerlink" title="typedef 和 #define 的区别"></a>typedef 和 #define 的区别</h1><p>&emsp;&emsp;typedef 在表现上有时候类似于 #define，但它和宏替换之间存在一个关键性的区别。正确思考这个问题的方法就是把 typedef 看成一种彻底的“封装”类型，声明之后不能再往里面增加别的东西。<br>&emsp;&emsp;例如可以使用其他类型说明符对宏类型名进行扩展，但对 typedef 所定义的类型名却不能这样做。如下所示：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INTERGE int</span></span><br><span class="line"><span class="type">unsigned</span> INTERGE n;  <span class="comment">//没问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INTERGE;</span><br><span class="line"><span class="type">unsigned</span> INTERGE n;  <span class="comment">//错误，不能在 INTERGE 前面添加 unsigned</span></span><br></pre></td></tr></table></figure><br><!-- endtimeline --></p><!-- timeline 2023-6-2 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="Union-联合"><a href="#Union-联合" class="headerlink" title="Union(联合)"></a>Union(联合)</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Data</span> &#123;</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">char</span> str[<span class="number">4</span>];</span><br><span class="line">&#125; data;     </span><br></pre></td></tr></table></figure><p>这段代码定义了一个名为data的union变量。它有什么属性呢？</p><ol><li>这个变量在内存中占用4个字节的空间而不是8个；</li><li>有两个数据成员：int类型变量的i和char类型的数组str；</li><li>虽然有两个数据成员，但是这两个成员对应的存储空间是同一块内存。也就是说定义了char str[4]，访问 i ,得到的结果就是定义了的char str[4]</li></ol><p>&emsp;&emsp;上面三点是union变量的最基本也是最重要的属性。详细说一下第三点。因为union不论包含多少个多少种数据类型，它实例化为变量后，这个变量的长度是这个union中最长的数据类型的长度。下面的代码定义了一个union变量。它的长度是16个字节。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">DEMO</span>&#123;</span> </span><br><span class="line">    <span class="type">char</span> status;</span><br><span class="line">    <span class="type">int</span> a; </span><br><span class="line">    <span class="type">int</span> serial[<span class="number">4</span>]; </span><br><span class="line">&#125;demo；</span><br></pre></td></tr></table></figure></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>&emsp;&emsp;C语言中，union相对于struct使用的次数在大部分项目中都处于明显的劣势，这和union的存储方式的特性有很大的关系。在union中，所有的字段都有相同的偏移量，而且所有的字段都是相互重叠的，union的大小是其中最大字段的大小。那我们就知道，如果所有的字段是相互重叠的，那改变其中任何一个字段的值，其他字段的值都会受到影响，也会发生变化。这就造成union在实际使用中使用的频率不会那么高，甚至会认为可能也没有什么用。如果想要使用的话，那么union中的各个字段的使用必须是互斥的，任意时刻只能使用一个。</p><ol><li>判断大小端，union大显身手<br>&emsp;&emsp;一个整数在大小端机器上面存储的顺序是不一样，而union中的各个字段的偏移地址是相同的，那一个数在在大小端机器中存储到union中，如果将这个数拆分，各个部分也会不同。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> bits32;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> bytes[<span class="number">4</span>];</span><br><span class="line">&#125; TheValue;</span><br><span class="line">TheValue theValue;</span><br><span class="line"><span class="type">int</span> isLittleEndian = <span class="number">0</span>; </span><br><span class="line">theValue.bytes[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">theValue.bytes[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">theValue.bytes[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">theValue.bytes[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">isLittleEndian = (theValue.bits32 == <span class="number">256</span>);</span><br><span class="line">#<span class="number">256</span>小端法<span class="number">16</span>进制：<span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">#<span class="number">256</span>大端法<span class="number">16</span>进制：<span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span></span><br></pre></td></tr></table></figure></li><li>创建别名<br>&emsp;&emsp;因为程序中经常会进行类型的强制转换，如果不小心可能就会出错，那么我们就可以利用union中的字段代表想要得到的类型，尤其是指针类型，尤其是代码整合过程中，如果使用了第三方的库，需要将第三方的库merge到自己的代码中，由于编码习惯，命名规则的不同，还是需要将其他库的一些类型转换为自己习惯的方式或者公司的方式。一般情况我们是能看到库的header file的，结构类型什么的都可以看到。我们会按照库的header file写一份自己的。<br>&emsp;&emsp;例如库中header file有一个struct 名字是ThirdTest<br>&emsp;&emsp;那么我们在header file中创造一个一个对应的struct 名字是OurTestThird<br>&emsp;&emsp;那么就可以弄一个union<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    ThirdTest * thirdTest;</span><br><span class="line">    OurTestThird *ourTestThird;</span><br><span class="line">&#125; TestThird;</span><br></pre></td></tr></table></figure>&emsp;&emsp;那我们使用一下<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TestThird testThird;</span><br><span class="line">testThird.thirdTest = getCallOneFunction(); <span class="comment">//这个一个库函数，返回的类型是ThirdTest *</span></span><br><span class="line">CallOurSomeOneFunction(testThird. ourTestThird); <span class="comment">//这个是自己的函数，参数类型是OurTestThird *</span></span><br></pre></td></tr></table></figure>&emsp;&emsp;那这个union TestThird就起到了将类型ThirdTest <em>强转为OurTestThird </em>的作用，union起到了一个桥梁的作用和粘合剂的作用，不然就需要一个表将自己的类型和库的类型一一对应起来。<br>&emsp;&emsp;当然这个例子有些牵强，有很多办法将类型对应起来，这里只是针对别名列举一个例子而已。</li><li>将union中较大的对象分解成组成这个对象的各个字节。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">unsiged <span class="type">int</span> u;</span><br><span class="line">unsiged <span class="type">char</span> bytes[<span class="number">4</span>];</span><br><span class="line">&#125; asBytes;</span><br><span class="line">asBytes composite;</span><br><span class="line">composite.u = <span class="number">1234576890</span>;</span><br><span class="line"><span class="built_in">printf</span> (“HO byte of composite.u is %u, LO byte is %u\n”, composite.bytes[<span class="number">3</span>], composite.bytes[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><!-- endtimeline --></li></ol><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="枚举enum"><a href="#枚举enum" class="headerlink" title="枚举enum"></a>枚举enum</h1><h2 id="关键字enum的定义"><a href="#关键字enum的定义" class="headerlink" title="关键字enum的定义"></a>关键字enum的定义</h2><p>&emsp;&emsp;enum是C语言中的一个关键字，enum叫枚举数据类型，枚举数据类型描述的是一组整型值的集合（这句话其实不太妥当），枚举型是预处理指令#define的替代，枚举和宏其实非常类似，宏在预处理阶段将名字替换成对应的值，枚举在编译阶段将名字替换成对应的值，</p><p>&emsp;&emsp;我们可以将枚举理解为编译阶段的宏，使用格式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">typeName</span> &#123;</span> valueName1, valueName2, valueName3, ...... &#125;;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;typeName是枚举类型的名字，花括号里面的元素（枚举成员）是常量而不是变量，这个一定要搞清楚，因为枚举成员的是常量，所以不能对它们赋值，只能将它们的值赋给其他的变量。<br>&emsp;&emsp;枚举是 C 语言中的一种基本数据类型，它可以让数据更简洁，更易读。<br>&emsp;&emsp;接下来我们举个例子，比如：一星期有 7 天，如果不用枚举，我们需要使用 #define 来为每个整数定义一个别名：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#defineMON <span class="number">1</span></span><br><span class="line">#defineTUE <span class="number">2</span></span><br><span class="line">#defineWED <span class="number">3</span></span><br><span class="line">#defineTHU <span class="number">4</span></span><br><span class="line">#defineFRI <span class="number">5</span></span><br><span class="line">#defineSAT <span class="number">6</span></span><br><span class="line">#defineSUN <span class="number">7</span></span><br></pre></td></tr></table></figure><br>&emsp;&emsp;这个看起来代码量就比较多，接下来我们看看使用枚举的方式:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>这样看起来是不是更简洁了。</p><h3 id="需要注意的是"><a href="#需要注意的是" class="headerlink" title="需要注意的是"></a>需要注意的是</h3><ol><li>枚举列表中的 Mon、Tues、Wed 这些标识符的作用范围是全局的（严格来说是 main() 函数内部），不能再定义与它们名字相同的变量。</li><li>Mon、Tues、Wed 等都是常量，不能对它们赋值，只能将它们的值赋给其他的变量。<br>枚举和宏其实非常类似：宏在预处理阶段将名字替换成对应的值，枚举在编译阶段将名字替换成对应的值。我们可以将枚举理解为编译阶段的宏。</li><li>第一个枚举成员的默认值为整型的0，后续枚举成员的值在前一个成员上加1。在当前值没有赋值的情况下，枚举类型的当前值总是前一个值+1.</li><li>枚举的每个常量都是按照整数int类型来存储的。</li></ol><h2 id="枚举变量的定义"><a href="#枚举变量的定义" class="headerlink" title="枚举变量的定义"></a>枚举变量的定义</h2><p>&emsp;&emsp;前面我们只是声明了枚举类型，接下来我们看看如何定义枚举变量。<br>&emsp;&emsp;我们可以通过以下三种方式来定义枚举变量</p><ol><li>先定义枚举类型，再定义枚举变量：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">day</span>;</span></span><br></pre></td></tr></table></figure></li><li>定义枚举类型的同时定义枚举变量<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125; day;</span><br></pre></td></tr></table></figure></li><li>省略枚举名称，直接定义枚举变量<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125; day;</span><br></pre></td></tr></table></figure>&emsp;&emsp;同一个程序中不能定义同名的枚举类型，不同的枚举类型中也不能存在同名的命名常量。<font color=red>错误示例</font>如下所示：  </li><li>存在同名的枚举类型<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">wednesday,</span><br><span class="line">thursday,</span><br><span class="line">friday</span><br><span class="line">&#125; workday;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">WEEK</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">saturday,</span><br><span class="line">sunday = <span class="number">0</span>,</span><br><span class="line">monday,</span><br><span class="line">&#125; workday;</span><br></pre></td></tr></table></figure></li><li>存在同名的枚举成员<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">wednesday,</span><br><span class="line">thursday,</span><br><span class="line">friday</span><br><span class="line">&#125; workday_1;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">WEEK</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">wednesday,</span><br><span class="line">sunday = <span class="number">0</span>,</span><br><span class="line">monday,</span><br><span class="line">&#125; workday_2;</span><br></pre></td></tr></table></figure><h2 id="使用枚举类型的变量"><a href="#使用枚举类型的变量" class="headerlink" title="使用枚举类型的变量"></a>使用枚举类型的变量</h2><h3 id="对枚举型的变量赋值"><a href="#对枚举型的变量赋值" class="headerlink" title="对枚举型的变量赋值"></a>对枚举型的变量赋值</h3>实例将枚举类型的赋值与基本数据类型的赋值进行了对比：  </li><li>先声明变量，再对变量赋值<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="comment">/* 定义枚举类型 */</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span> MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN &#125;;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">/* 使用基本数据类型声明变量，然后对变量赋值 */</span></span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line"></span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">    y = <span class="number">20</span>;</span><br><span class="line">    z = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用枚举类型声明变量，再对枚举型变量赋值 */</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">yesterday</span>, <span class="title">today</span>, <span class="title">tomorrow</span>;</span></span><br><span class="line"></span><br><span class="line">    yesterday = MON;</span><br><span class="line">    today = TUE;</span><br><span class="line">    tomorrow = WED;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d \n&quot;</span>, yesterday, today, tomorrow);</span><br><span class="line">    &#125;</span><br><span class="line">```  </span><br><span class="line"><span class="number">2.</span> 声明变量的同时赋初值  </span><br><span class="line">```c</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="comment">/* 定义枚举类型 */</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span> MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN &#125;;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">/* 使用基本数据类型声明变量同时对变量赋初值 */</span></span><br><span class="line">    <span class="type">int</span> x=<span class="number">10</span>, y=<span class="number">20</span>, z=<span class="number">30</span>;</span><br><span class="line">    <span class="comment">/* 使用枚举类型声明变量同时对枚举型变量赋初值 */</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">yesterday</span> =</span> MON,</span><br><span class="line">    today = TUE,</span><br><span class="line">    tomorrow = WED;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d \n&quot;</span>, yesterday, today, tomorrow);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>定义类型的同时声明变量，然后对变量赋值。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/* 定义枚举类型，同时声明该类型的三个变量，它们都为全局变量 */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span> MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN &#125; yesterday, today, tomorrow;</span><br><span class="line"><span class="comment">/* 定义三个具有基本数据类型的变量，它们都为全局变量 */</span></span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">/* 对基本数据类型的变量赋值 */</span></span><br><span class="line">    x = <span class="number">10</span>; y = <span class="number">20</span>; z = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 对枚举型的变量赋值 */</span></span><br><span class="line">    yesterday = MON;</span><br><span class="line">    today = TUE;</span><br><span class="line">    tomorrow = WED;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d \n&quot;</span>, x, y, z); <span class="comment">//输出：10 20 30</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d \n&quot;</span>, yesterday, today, tomorrow); <span class="comment">//输出：1 2 3</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>类型定义，变量声明，赋初值同时进行。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/* 定义枚举类型，同时声明该类型的三个变量，并赋初值。它们都为全局变量 */</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    MON=<span class="number">1</span>,</span><br><span class="line">    TUE,</span><br><span class="line">    WED,</span><br><span class="line">    THU,</span><br><span class="line">    FRI,</span><br><span class="line">    SAT,</span><br><span class="line">    SUN</span><br><span class="line">    &#125;</span><br><span class="line">    yesterday = MON, today = TUE, tomorrow = WED;</span><br><span class="line">    <span class="comment">/* 定义三个具有基本数据类型的变量，并赋初值。它们都为全局变量 */</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>, y = <span class="number">20</span>, z = <span class="number">30</span>;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d \n&quot;</span>, x, y, z); <span class="comment">//输出：10 20 30</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d \n&quot;</span>, yesterday, today, tomorrow); <span class="comment">//输出：1 2 3</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>注意：给枚举变量赋予初值后再次赋值<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span> MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN &#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">yesterday</span>, <span class="title">today</span>, <span class="title">tomorrow</span>;</span></span><br><span class="line">yesterday = TUE;</span><br><span class="line">today = (<span class="keyword">enum</span> DAY) (yesterday + <span class="number">1</span>); <span class="comment">//类型转换</span></span><br><span class="line">tomorrow = (<span class="keyword">enum</span> DAY) <span class="number">30</span>; <span class="comment">//类型转换</span></span><br><span class="line"><span class="comment">//tomorrow = 3; //错误</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d \n&quot;</span>, yesterday, today, tomorrow); <span class="comment">//输出：2 3 30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举与-define-宏的区别"><a href="#枚举与-define-宏的区别" class="headerlink" title="枚举与#define 宏的区别"></a>枚举与#define 宏的区别</h2>下面再看看枚举与#define 宏的区别：</li><li>define 宏常量是在预编译阶段进行简单替换。枚举常量则是在编译的时候确定其值。</li><li>一般在编译器里，可以调试枚举常量，但是不能调试宏常量。</li><li>枚举可以一次定义大量相关的常量，而#define 宏一次只能定义一个。<!-- endtimeline --></li></ol><!-- timeline 2022-3-1 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><h1 id="malloc函数与calloc函数"><a href="#malloc函数与calloc函数" class="headerlink" title="malloc函数与calloc函数"></a>malloc函数与calloc函数</h1><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><h3 id="malloc函数原型"><a href="#malloc函数原型" class="headerlink" title="malloc函数原型"></a>malloc函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_bytes)</span>;</span><br></pre></td></tr></table></figure><p>意为分配长度为num_bytes字节的内存块  </p><h3 id="malloc函数头文件"><a href="#malloc函数头文件" class="headerlink" title="malloc函数头文件"></a>malloc函数头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="malloc函数返回值"><a href="#malloc函数返回值" class="headerlink" title="malloc函数返回值"></a>malloc函数返回值</h3><p>如果分配成功则返回指向被分配内存的指针，否则返回空指针NULL。</p><h3 id="malloc函数使用注意事项"><a href="#malloc函数使用注意事项" class="headerlink" title="malloc函数使用注意事项"></a>malloc函数使用注意事项</h3><ol><li>malloc函数的返回的是无类型指针，在使用时一定要强制转换为所需要的类型。</li><li>重点：在使用malloc开辟空间时，使用完成一定要释放空间，如果不释放会造内存泄漏。</li><li>在使用malloc函数开辟的空间中，不要进行指针的移动，因为一旦移动之后可能出现申请的空间和释放空间大小的不匹配<h3 id="malloc使用"><a href="#malloc使用" class="headerlink" title="malloc使用"></a>malloc使用</h3>&emsp;&emsp;关于malloc所开辟空间类型：malloc只开辟空间，不进行类型检查，只是在使用的时候进行类型的强转。举个例子：‘我’开辟你所需要大小的字节大小空间，至于怎么使用是你的事<br>&emsp;&emsp;mallo函数返回的实际是一个无类型指针，必须在其前面加上指针类型强制转换才可以使用<br>&emsp;&emsp;指针自身 = (指针类型 <em>）malloc（sizeof（指针类型）</em>数据数量）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*n);</span><br></pre></td></tr></table></figure>&emsp;&emsp;在使用malloc函数之前我们一定要计算字节数，malloc开辟的是用户所需求的字节数大小的空间。<br>如果多次申请空间那么系统是如何做到空间的不重复使用呢？<br>&emsp;&emsp;在使用malloc开辟一段空间之后，系统会在这段空间之前做一个标记（0或1），当malloc函数开辟空间如果遇到标记为0就在此开辟，如果为1说明此空间正在被使用。<h3 id="释放函数free"><a href="#释放函数free" class="headerlink" title="释放函数free()"></a>释放函数free()</h3>作用：释放malloc(或calloc、realloc)函数给指针变量分配的内存空间。<br>注意：使用后该指针变量一定要重新指向NULL，防止悬空指针（失效指针）出现，有效规避错误操作。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        *p = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>free函数在释放空间之后，把内存前的标志变为0，且为了防止数据泄露，它会把所释放的空间用cd进行填充。</li></ol><hr><h2 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h2><p>&emsp;&emsp;calloc函数，其原型void <em>calloc(size_t n, size_t size)；<br>&emsp;&emsp;其比malloc函数多一个参数，并不需要人为的计算空间的大小，比如如果他要申请20个int类型空间，会int </em>p = (int *)calloc(20, sizeof(int)）,这样就省去了人为空间计算的麻烦。但这并不是他们之间最重要的区别，malloc申请后空间的值是随机的，并没有进行初始化，而calloc却在申请后，对空间逐一进行初始化，并设置值为0;</p><h2 id="calloc与malloc区别"><a href="#calloc与malloc区别" class="headerlink" title="calloc与malloc区别"></a>calloc与malloc区别</h2><ol><li>函数malloc不能初始化所分配的内存空间,而函数calloc能.如果由malloc()函数分配的内存空间原来没有被使用过，则其中的每一位可能都是0;反之, 如果这部分内存曾经被分配过,则其中可能遗留有各种各样的数据.也就是说，使用malloc()函数的程序开始时(内存空间还没有被重新分配)能正常进行,但经过一段时间(内存空间还已经被重新分配)可能会出现问题.</li><li>函数calloc() 会将所分配的内存空间中的每一位都初始化为零,也就是说,如果你是为字符类型或整数类型的元素分配内存,那么这些元素将保证会被初始化为0;如果你是为指针类型的元素分配内存,那么这些元素通常会被初始化为空指针;如果你为实型数据分配内存,则这些元素会被初始化为浮点型的零.</li></ol><p>&emsp;&emsp;疑问：既然calloc不需要计算空间并且可以直接初始化内存避免错误，那为什么不直接使用calloc函数，那要malloc要什么用呢？<br>&emsp;&emsp;实际上，任何事物都有两面性，有好的一面，必然存在不好的地方。这就是效率。calloc函数由于给每一个空间都要初始化值，那必然效率较malloc要低，并且现实世界，很多情况的空间申请是不需要初始值的，这也就是为什么许多初学者更多的接触malloc函数的原因。</p><!-- endtimeline --><!-- timeline 2022-3-1 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><!-- endtimeline -->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针，踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT如何连接mysql</title>
      <link href="/database/"/>
      <url>/database/</url>
      
        <content type="html"><![CDATA[<p>1：下载并安装mysql<br>配置环境变量：在用户与系统中的path路径分别加入mysql bin文件夹的地址，我的如下：<br>D:\mySQL\MySQL Server 8.0\bin<br>这一步是为了打开cmd直接输入： mysql -u root -p就可以登陆操作数据库，不然只能在D:\mySQL\MySQL Server 8.0\bin打开cmd操作数据库。</p><p>2：在QT中编译mysql驱动：<br>在QT的mysql.pro文件中<br>输入以下代码:注意用$$quote(地址)是为了忽视地址中的空格，这样在QT调用的时候就不会因为空格找不到文件。</p><pre><code>    win32:LIBS += -L$$quote(D:/mySQL/MySQL Server 8.0/lib) -llibmysql    INCLUDEPATH += $$quote(D:/mySQL/MySQL Server 8.0/include)    DEPENDPATH += $$quote(D:/mySQL/MySQL Server 8.0/include)</code></pre><p>括号中的地址填你之际的安装地址。</p><p>同时注释掉文件中</p><pre><code>    #QMAKE_USE += mysql</code></pre><p>用MINGW64编译文件，在QT同级目录下出现plugins文件夹。</p><p>3：将mysql数据库动态文件及编译文件粘贴到QT<br>将plugins文件夹生成的qsqlmysql.dll 与qsqlmysql.dll.debug复制到<br>D:\QT\set_qt\5.14.1\mingw73_64\bin</p><p>将动态库文件mysql/lib中的libmysql.dll复制到QT的MINGW64编译器的bin目录下</p><p>4：连接数据库：<br>新建文件，在.pro文件中<br>QT       += core gui sql<br>在用到数据库的.h文件中</p><h1 id="include-lt-QSqlDatabase-gt"><a href="#include-lt-QSqlDatabase-gt" class="headerlink" title="include &lt; QSqlDatabase &gt;"></a>include &lt; QSqlDatabase &gt;</h1><p>在.cpp中连接数据库：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">&quot;QMYSQL&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">db.setHostName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">db.setUserName(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">db.setPassword(<span class="string">&quot;119568yhl&quot;</span>);</span><br><span class="line">db.setDatabaseName (<span class="string">&quot;info&quot;</span>);<span class="comment">// 这里 info 是实例化数据库的名称，需要手动实例化。</span></span><br><span class="line">qDebug()&lt;&lt;<span class="string">&quot;连接数据库&quot;</span>;</span><br><span class="line">QSqlQuery <span class="title function_">query</span><span class="params">(db)</span>;</span><br></pre></td></tr></table></figure><br>d是连接名，这是一个程序在不同处对不同的数据库进行操作，就应该给每个数据库定义连接名<br>如果只是有一处需要动用数据库，可以<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">&quot;QMYSQL&quot;</span>);</span><br><span class="line">db.setHostName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">db.setUserName(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">db.setPassword(<span class="string">&quot;119568yhl&quot;</span>);</span><br><span class="line">db.setDatabaseName (<span class="string">&quot;info&quot;</span>);<span class="comment">// 这里 info 是实例化数据库的名称，需要手动实例化。</span></span><br><span class="line">qDebug()&lt;&lt;<span class="string">&quot;连接数据库&quot;</span>;</span><br><span class="line">QSqlQuery query;</span><br></pre></td></tr></table></figure></p><p><img src="/img/database.png" alt="在cmd登录实并例化数据库方法"></p><p>第1步参考视频：<br><a href="https://www.bilibili.com/video/BV12q4y1477i/?spm_id_from=333.880.my_history.page.click">https://www.bilibili.com/video/BV12q4y1477i/?spm_id_from=333.880.my_history.page.click</a></p><p>第2，3步参考视频：<br><a href="https://www.bilibili.com/video/BV1Jk4y167tt/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1Jk4y167tt/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><pre><code>    show databases;</code></pre><p>看到数据库里的存储区</p><pre><code>    use info</code></pre><p>进入其中的一个存储区</p><pre><code>    show tables;</code></pre><p>可以看到区里具体的表</p><pre><code>    select * from 表名</code></pre><p>可以看到表里有啥</p><p>tips:</p><pre><code>QString sql1 = QString(&quot;create table %1(id double,x double,y double,h double,v double,t double)&quot;).arg(a);</code></pre><p>这样可以实现动态设置表名，例如如果需要把每个for循环采集到的数据做成一个表，那么就可以这样动态设置表名<br>表名必须是字母！<br>也可以用函数获取当前的绝对时间，arg(时间)，来实现动态设置表名</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针，踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程技巧</title>
      <link href="/python/"/>
      <url>/python/</url>
      
        <content type="html"><![CDATA[<!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;markdown语言中%可能引发歧义！报错 tag name expected<br><!-- endtimeline --></p><!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;for num in range(begin,end) num从列表中依次取出begin到end-1的end-begin个整数。<br>如for num in range(1,8) ，num可以遍历到1，2，3，4，5，6，7<br>&emsp;&emsp;for id,x in enum(y) 将y中的元素标序号，id为序号，x为元素内容。<br>&emsp;&emsp;print(f”{}，{}”) 会将大括号里的变量转化为string打印。<br>&emsp;&emsp;lista = [20,10,50,40,30] 排序：lista.sort()改变了lista的顺序。 listb=sorted(lista) 不改变lista的顺序。默认是升序，（）加入reverse=true则为降序。<br>&emsp;&emsp;list中的元素由  ， 隔开。但该逗号不属于列表list的内容。<br>&emsp;&emsp;在写文件中，如果字符串内容为’…\n’，则写出的内容/n消失并换行，因此在读文件时应该处理每行末尾的\n，list[ ：-1]就可以不读入换行符\n<br><!-- endtimeline --></p><!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;pyton的return可以返回三个值，return b,c,d 只要在主题函数中用三个变量来接收就行<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_return</span>()</span><br><span class="line">    b=<span class="number">1</span></span><br><span class="line">    c=<span class="number">2</span> </span><br><span class="line">    d=<span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> b,c,d</span><br><span class="line"></span><br><span class="line">get_b,get_c,get_d = get_return()</span><br></pre></td></tr></table></figure><br><!-- endtimeline --></p><!-- timeline 2022-5-8 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p><font color=red size=5 face="黑体">python系统路径设置：</font><br>&emsp;&emsp;sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(<strong>file</strong>)))) #将路径添加到系统路径中  将上级目录加入到系统中。<br><!-- endtimeline --></p><!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p><font color=red size=5 face="黑体">python模块导入：</font><br>&emsp;&emsp;x = import_module(‘bert_CNN’)和在文章头部Import相比有什么优点？<br>使用 import_module 函数动态导入模块相比于在文件开始处使用常规的 import 语句具有一些优点：</p><p>1灵活性：使用 import_module 函数可以在运行时动态导入模块，这使得你可以编写更加灵活的代码。例如，你可以根据某些条件或用户输入来决定要导入哪个模块，或者在某些情况下根本不导入模块。<br>2避免循环导入：如果两个或多个模块相互导入，而它们又被导入到另一个模块中，那么就可能会出现循环导入的情况，这会导致程序出现错误。使用 import_module 函数可以避免这种情况，因为它不会立即导入整个模块，而是在需要时才会加载它。<br>3节省资源：使用 import_module 函数可以节省内存和处理器资源，因为它只在需要时加载模块，而不是在程序启动时就立即导入所有模块。<br>4动态扩展：使用 import_module 函数可以让你编写更具有动态扩展性的程序。例如，如果你的程序需要加载第三方插件，那么你可以使用 import_module 函数来动态地加载插件模块，从而扩展程序的功能。<br>需要注意的是，使用 import_module 函数动态导入模块也存在一些缺点。例如，它可能会使代码变得更加复杂和难以理解，因为它增加了代码的动态性。此外，它还可能导致性能下降，因为它需要在运行时进行模块加载。因此，在使用 import_module 函数时需要权衡其优缺点，并选择适合自己的使用方式。<br><!-- endtimeline --></p><!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;<br><!-- endtimeline --></p>]]></content>
      
      
      <categories>
          
          <category> 软硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统的发展简史</title>
      <link href="/x86/"/>
      <url>/x86/</url>
      
        <content type="html"><![CDATA[<h1 id="GNU起源："><a href="#GNU起源：" class="headerlink" title="GNU起源："></a><font color=LightSeaGreen>GNU起源：</font></h1><p>&emsp;&emsp;Unix 系统被发明之后，大家用的很爽。但是后来开始收费和商业闭源了。一个叫 RMS 的大叔觉得很不爽，于是发起 GNU 计划，GNU是一个类Unix操作系统。GNU这个名字是“GNU’s Not Unix”的递归首字母缩写词，该项目模仿 Unix 的界面和使用方式，从头做一个开源的版本。然后他自己做了编辑器 Emacs 和编译器 GCC。<br>&emsp;&emsp;GNU 是一个计划或者叫运动。在这个旗帜下成立了 FSF，起草了 GPL 等。<br>&emsp;&emsp;接下来大家纷纷在 GNU 计划下做了很多的工作和项目，基本实现了当初的计划。包括核心的 gcc 和 glibc。但是 GNU 系统缺少操作系统内核。原定的内核叫 HURD，一直完不成。同时 BSD（一种 UNIX 发行版）陷入版权纠纷，x86 平台开发暂停。然后一个叫 Linus 的同学为了在 PC 上运行 Unix，在 Minix 的启发下，开发了 Linux。注意，Linux 只是一个系统内核，系统启动之后使用的仍然是 gcc 和 bash 等软件。Linus 在发布 Linux 的时候选择了 GPL，因此符合 GNU 的宗旨。<br>&emsp;&emsp;最后，大家突然发现，这玩意不正好是 GNU 计划缺的么。于是合在一起打包发布叫 GNU / Linux。然后大家念着念着省掉了前面部分，变成了 Linux 系统。实际上 Debian，RedHat 等 Linux 发行版中内核只占了很小一部分容量。</p><h1 id="GCC："><a href="#GCC：" class="headerlink" title="GCC："></a><font color=LightSeaGreen>GCC：</font></h1><p>Compiler Collection(GUN 编译器集合)，它可以编译C、C++、JAV、Fortran、Pascal、Object-C、Ada等语言。</p><p>gcc是GCC中的GUN C Compiler（C 编译器）<br>g++是GCC中的GUN C++ Compiler（C++编译器）</p><h1 id="g-gcc："><a href="#g-gcc：" class="headerlink" title="g++,gcc："></a><font color=LightSeaGreen>g++,gcc：</font></h1><p>&emsp;&emsp;就本质而言，gcc和g++并不是编译器，也不是编译器的集合，它们只是一种驱动器，根据参数中要编译的文件的类型，调用对应的GUN编译器而已，比如，用gcc编译一个c文件的话，会有以下几个步骤：</p><p>Step1：Call a preprocessor, like cpp.<br>Step2：Call an actual compiler, like cc or cc1.<br>Step3：Call an assembler, like as.<br>Step4：Call a linker, like ld</p><p>&emsp;&emsp;由于编译器是可以更换的，所以gcc不仅仅可以编译C文件<br>所以，更准确的说法是：gcc调用了C compiler，而g++调用了C++ compiler</p><p>gcc和g++的主要区别</p><ol><li>对于 <em>.c 和 </em>.cpp文件，gcc分别当做c和cpp文件编译（c和cpp的语法强度是不一样的）</li><li>对于 <em>.c 和 </em>.cpp文件，g++则统一当做cpp文件编译</li><li>使用g++编译文件时，g++会自动链接标准库STL，而gcc不会自动链接STL</li><li>gcc在编译C文件时，可使用的预定义宏是比较少的</li><li>gcc在编译cpp文件时/g++在编译c文件和cpp文件时（这时候gcc和g++调用的都是cpp文件的编译器），会加入一些额外的宏</li></ol><h1 id="x86-x86-64："><a href="#x86-x86-64：" class="headerlink" title="x86,x86_64："></a><font color=LightSeaGreen>x86,x86_64：</font></h1><p>&emsp;&emsp;x86:x86是一种CPU指令集的架构，每个指令是32位，最先由Intel公司研发，x86_64表示同样基于x86指令集，但每个指令增加到64位，最先由AMD公司研发，我们电脑目前都是64位，也就是x86_64。同时64位可以兼容32位，有的软件比较古老，能在32位计算机上运行，那现在的64位电脑就可以运行。但64位的软件就不能在32位机上运行，因为位数不够。<br>&emsp;&emsp;Arm用的是32位精简指令集（x86是复杂指令集，都是同一个时期的东西），性能不行但优点是用Arm架构的产品耗能低，因此在嵌入式系统上如手机，大放异彩。手机不需要那么高的性能，但要求待机时间长，而计算机则相反，x86也就独霸了计算机领域。</p>]]></content>
      
      
      <categories>
          
          <category> 计网与操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> x86 x86_64 GUN GCC g++ gcc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
