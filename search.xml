<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>当生活回归正轨</title>
      <link href="/%E5%9B%9E%E5%88%B0%E6%AD%A3%E5%B8%B8%E7%94%9F%E6%B4%BB%E5%90%8E%E7%9A%84%E6%83%B3%E6%B3%95/"/>
      <url>/%E5%9B%9E%E5%88%B0%E6%AD%A3%E5%B8%B8%E7%94%9F%E6%B4%BB%E5%90%8E%E7%9A%84%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>过年以后，好久好久都没更过博客了</p><p>已经过了五个月了，我想还是应该重新直面自己的失恋，毕竟每天就像体验酷刑一样朝思暮想心里难受的日子已经快过去了<br>至少现在回想起来没有那么心痛了</p><p>有幸遇到一个姑娘，她教我人情世故，对我照顾有加，教我用眼泪磨平棱角<br>日后却再无相见</p><p>从我们最开始相遇说起吧<br>她是留级生，高中坐在我的身后，是我的后桌<br>当时说实话<br>我自认为我聪明的不得了<br>能最快的做完一套数学理综卷子<br>也能解决谁都做不了的难题<br>她的学习能力一般吧<br>每天我都给她讲题<br>前后桌唠唠嗑<br>高中的交集差不多就这样</p><p>但当时并没有发展成恋爱关系<br>就是比较好的普通朋友<br>而且我高中还是不太注重交际这种<br>好朋友就那么几个</p><p>然后我们都高中毕业了<br>我考了全校第一名<br>巧的是我们都来北京读了大学</p><p>我们正式谈恋爱是在大二的时候<br>准确来说是疫情的功劳，也就是大一的时候<br>大一上学期的时候我们甚至没有联系过几次<br>大一上学期期末的时候，我们放假时间差不多<br>她来找我出去溜达看电影，然后买动车票回家<br>因为是晚上乘车，我们两个人<br>在车上坐在旁边的老太太问我们是不是男女朋友<br>我俩尴尬笑了笑说不是就是朋友<br>因为真的只是朋友<br>那时她梳着一头短发<br>靠着我的肩膀睡了一晚<br>也就是那一晚我感觉心中的某些东西被释放掉了<br>甚至有种：难道这就是有人依靠的感觉吗，真的有女生在靠着我唉<br>甚至感觉有些莫名的成就感</p><p>但我并不认为当时喜欢上了她<br>之后就遇到了疫情<br>窝在家里上课<br>在这段时间里我们俩经常连麦看电影<br>感觉就是增加了沟通<br>但我也只是觉得更亲密了<br>没有想发展成男女朋友</p><p>什么时候成的呢<br>开学之前见了一次面<br>说句难听的<br>哥们见色起意了<br>但说实话<br>谁谈恋爱不是见色起意呢</p><p>然后大二上回到学校我就表了白<br>没有意外地我们成了男女朋友<br>这段恋爱的最开始大半年<br>真就是每周都要吵一次架<br>因为我不会谈恋爱<br>但她比我成熟很多<br>回想起来好多说的做的还是她对得多</p><p>对了补一嘴<br>虽然我们都在北京<br>但我们在一个学期内一次面都见不到<br>因为人民公安大学不让学生以任何理由出校<br>即使法定假日也是如此<br>而且疫情封校我也不能出去趴她学校栏杆去看她<br>我们相当于就是异地<br>甚至比异地还异地</p><p>最开始的大半年挺痛苦的<br>都没谈过恋爱<br>都想磨合<br>难受的时候是真难受<br>好的时候也是真好<br>大半年之后我们磨合的差不多了<br>吵架次数也少了<br>我懂得怎么关心她了<br>她也理解我了</p><p>我们一起度过了快乐依恋的一年时间<br>一起度过了好多有意义的时刻<br>一起许下过好多美好的愿望<br>一起做过了好多有意义的事<br>从谈恋爱第一天到最后一天<br>每天都要视频通话一个小时<br>虽然有摩擦<br>但我们相互依靠，为对方着想<br>发自内心的心疼对方<br>是很多人眼中的模范情侣了</p><p>但我们还是分手了<br>在大四上的一次普普通通的吵架<br>令人痛心也令人绝望<br>越接近大四内心的担子也就更重一些<br>因为工作问题<br>还是那形式主义大学<br>毕业包分配<br>分配回户籍所在地</p><p>我并没有把我的责任推卸给她的大学<br>因为假期两次出去玩我感觉心里伤到了<br>也因为我舍不得抛弃未来的发展机会<br>还因为我心理一次比一次深的绝望</p><p>其实从谈恋爱的第一天起，我们就几乎已经知道结局了。<br>我们都谨慎的避免谈到我们的未来。<br>靠着她的包容，靠着我们的喜欢<br>坚持到了七百天<br>幸福却愈加艰难的七百天</p><p>那份不能在一起的绝望<br>令我不愿面对，置之不理，活在自己对自己的欺骗中的绝望<br>还是把我打败了<br>我们明明已经规划好了以后过怎样的日子的<br>我好舍不得已经建立起的一切<br>但这些注定要离我远去<br>甚至每次看见她的笑都会感觉到悲哀和无助<br>我在爱一个注定不属于自己的人<br>我在看憧憬一份注定不属于自己的爱情</p><p>那为什么不回哈尔滨工作把这一切都变成现实呢？<br>就算摒弃未来的所有变数和不安<br>就算我们能和所想的一样在一起生活<br>我也很难这样去选<br>因为我不是为自己而活<br>我要给我的过往赋予意义<br>我有不能辜负的人和事</p><p>于是我辜负了她<br>也伤害了她<br>我时常在深夜去想过去的对与错<br>去回顾那明知不可为而为之的日子<br>我为此日夜哭泣<br>现实却木已成舟<br>其实我们本就不顺路，只是有无数个瞬间太想和你走了</p><p>“我想和你结婚，想和你过柴米油盐平淡的一生，想一起做过年的年夜饭，去看漫天的星辰与烟花，想算着各种开销和账单听你的婆婆妈妈，虽然我不能保证不惹你生气，但我的心永远陪着你”<br>天啊<br>我到底都做了什么啊<br>每天都要自己挂着笑脸去面对生活<br>还要劝自己热情对待每一个人<br>装什么好人啊</p><p>我感觉自己一直在逃避<br>感觉自己真的懦弱到骨子里了<br>这些都是对我的惩罚吧<br>是我辜负了自己</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++ QT中的Tcp</title>
      <link href="/Tcp/"/>
      <url>/Tcp/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;<br>套接字定义：应用层通过传输层进行数据通信时，TCP和UDP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了称为套接字 (Socket)的接口（函数库），区分并实现不同应用程序进程间的网络通信和连接。<br>&emsp;&emsp;其实Socket就是一个大类，实例化两个实例，调用里面的函数就能实现通信。</p><p>&emsp;&emsp;套接字其实就是函数的接口，需要三个参数：通讯类型（Tcp，Udp），IP，端口号。Socket原意是“插座”。通过将这3个参数结合起来，与一个“插座”Socket绑定，应用层就可以和传输层通过套接字接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。<br>&emsp;&emsp;要通过互联网进行通信，至少需要一对套接字，一个运行于客户机端，称之为ClientSocket，另一个运行于服务器端，称之为serverSocket。</p><p><img src="/img/TCP.png" alt="TCP通信流程图"><br>步骤一：把这两个套接字实例化<br>&emsp;&emsp;这两类套接字都有自己对应的代码库，实例化就行。</p><p>步骤二：连接两个套接字<br>&emsp;&emsp;根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为两个小步骤：1服务器套接字设置为监听，2给客户端套接字指向服务器IP与端口，并连接。<br>&emsp;&emsp;1：服务器监听过程：服务器端套接字并不定位具体的客户端套接字，也就是说并不需要客户端的IP与端口号（只需要记录说话的内容而不需要记录说话的是谁），但是要在listen函数中绑定自己的网卡对应IP与端口用于监听。这时处于等待连接的状态，实时监控网络状态。<br>tcpServer-&gt;listen(QHostAddress::Any,8888);<br>这表示服务器套接字tcpServer监听自己网卡对应的所有的IP地址以及IP地址对应的8888端口。<br>&emsp;&emsp;2：连接：是指由客户端的套接字提出连接请求（方向固定！一般都是默认客户端请求服务器），要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字的地址和端口号，然后就向服务器端套接字提出连接请求。<br>tcpSocket-&gt;connectToHost(QHostAddress(ip),port);<br>代码含义：客户端套接字tcpSocket绑定服务器的IP以及端口号，也就是上面服务器监听的端口号。QT中的ConnectHost函数可以为客户端套接字连接服务器套接字</p><p>步骤三：确认连接<br>&emsp;&emsp;服务器端，如果接到客户端的套接字传来的连接信息，会发出newConnection()信号。<br>listen到了，connect(tcpServer,&amp;QTcpServer::newConnection,<a href="">=</a>{qDebug&lt;&lt;“收到客户端的连接信息”});<br>&emsp;&emsp;之后服务器的套接字会向客户端套接字发送已连接信息(也是系统自己操做的，实际是tcpServer生成的tcpSocket发送)，客户端收到该信息后会产生一个connected()信号。<br>connect(tcpSocket, &amp;QTcpSocket::connected,<a href="">=</a>{ui-&gt;textread-&gt;setText(“成功建立连接”);});<br>&emsp;&emsp;连接成功后，tcpServer套接字会获得请求通信的套接字tcpSocket的IP与地址，以备回复信息使用。<br>查看ip与端口的代码：<br>QString ip= tcpSocket-&gt;peerAddress().toString();<br>qint64 port= tcpSocket-&gt;peerPort();</p><p>步骤四： 发送信息<br>&emsp;&emsp;套接字连接成功后，两个套接字之间就仿佛建立了通道，可以相互发送数据了！但需要注意的是：<br>1：信息从通道一端发出就必定会传播到另一端，就好比你打电话一方说一句话声音必然也只能传达到另一方，因此发信息的过程不需要再人为指定对方的IP与端口(通道建立的时候双方套接字内已经指定了对方套接字的IP，端口信息)，你只需要调用tcpSocket-&gt;write(str.toUtf8().data());就可以发消息了。<br>2：tcpServer是监听套接字，也就是说服务器套接字只能监听端口，这就意味着服务器不能收发消息！怎么办呢？再在服务器端创造一个tcpSocket套接字呗。但再创造一个套接字的话就意味着上面的所有和客户端套接字的连接步骤还要重新来一遍，还要创立一条新通道，麻烦！如何用之前我们已经创造的通道给客户端通信呢？QT C++的库中已经给我们写好了按原通道回话的简便方法，依然使用连接好的通路，在服务器端的代码中：<br>tcpSocket = tcpServer-&gt;nextPendingConnection();就是在tcpServer的基础上生成一个tcpSocket。<br>&emsp;&emsp;注意，这个tcpSocket是服务器端的第二个套接字，但与重新实例化一个套接字不同，由于它是在tcpServer的基础上生成一个tcpSocket，它知道通道另一端的客户端套接字的IP与端口，因此可以直接回复信息（客户端的tcpSocket连接服务器的tcpServer，服务器端的TcpServer套接字生成了一个子套接字tcpSocket，由这个子套接字tcpSocket和客户端进行收发消息通信）。</p><p>至此，大功告成，实现了客户端和服务器的双向通信。通完信不要忘了断开客户端连接，关闭套接字<br>我们需要明确的是：1、接受信息的一方不需要发送者的IP与port,发送信息的一方必须要知道对方的IP与port。<br>                2、tcpServer只有监听功能，服务器的收发信息功能是由它生成的tcpSocket负责的。</p><p>客户端cpp代码：</p><pre><code>#include &quot;clientwidget.h&quot;#include &quot;ui_clientwidget.h&quot;#include &lt;QHostAddress&gt;ClientWidget::ClientWidget(QWidget *parent) :    QWidget(parent),    ui(new Ui::ClientWidget)&#123;    ui-&gt;setupUi(this);    tcpSocket = NULL;    tcpSocket = new QTcpSocket(this);    connect(tcpSocket, &amp;QTcpSocket::connected,            [=]()            &#123;                ui-&gt;textread-&gt;setText(&quot;成功建立连接&quot;);            &#125;            );    connect(tcpSocket, &amp;QTcpSocket::readyRead,            [=]()            &#123;                QByteArray array = tcpSocket-&gt;readAll();                ui-&gt;textread-&gt;append(array);            &#125;            );&#125;ClientWidget::~ClientWidget()&#123;    delete ui;&#125;void ClientWidget::on_Buttonconnect_clicked()&#123;    QString ip = ui-&gt;lineEditIP-&gt;text();    qint16 port = ui-&gt;lineEditport-&gt;text().toInt();    tcpSocket-&gt;connectToHost(QHostAddress(ip),port);&#125;void ClientWidget::on_ButtonSend_clicked()&#123;    QString str =ui-&gt;textBwrite-&gt;toPlainText();    tcpSocket-&gt;write(str.toUtf8().data());&#125;void ClientWidget::on_ButtonClose_clicked()&#123;    if(NULL == tcpSocket)    &#123;        return;    &#125;    tcpSocket-&gt;disconnectFromHost();    tcpSocket = NULL;&#125;</code></pre><p>服务器.cpp代码</p><pre><code>#include &quot;widget.h&quot;#include &quot;ui_widget.h&quot;Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    tcpServer = NULL;    tcpSocket = NULL;    tcpServer = new QTcpServer(this);    tcpServer-&gt;listen(QHostAddress::Any,8888);    setWindowTitle(&quot;服务器： 8888&quot;);    connect(tcpServer,&amp;QTcpServer::newConnection,            [=]()            &#123;                tcpSocket = tcpServer-&gt;nextPendingConnection();                QString ip= tcpSocket-&gt;peerAddress().toString();                qint64 port= tcpSocket-&gt;peerPort();                QString temp= QString(&quot;[%1:%2]:成功连接&quot;).arg(ip).arg(port);                ui-&gt;textread-&gt;setText(temp);                connect(tcpSocket, &amp;QTcpSocket::readyRead,                        [=]()                        &#123;                            QByteArray array = tcpSocket-&gt;readAll();                            ui-&gt;textread-&gt;append(array);                        &#125;                        );            &#125;            );&#125;Widget::~Widget()&#123;    delete ui;&#125;void Widget::on_Buttonsend_clicked()&#123;    if(NULL == tcpSocket)    &#123;        return;    &#125;    QString str =ui-&gt;textwrite-&gt;toPlainText();    tcpSocket-&gt;write(str.toUtf8().data());&#125;void Widget::on_Buttonclose_clicked()&#123;    if(NULL == tcpSocket)    &#123;        return;    &#125;    tcpSocket-&gt;disconnectFromHost();    tcpSocket-&gt;close();    tcpSocket = NULL;&#125;</code></pre><p>至于Tcp粘包处理，可以在接收函数中修改，详见下面视频。<br><a href="https://www.bilibili.com/video/BV1yf4y1Y7CU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1yf4y1Y7CU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP的三次握手</title>
      <link href="/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
      <url>/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;TCP协议是传输层里面的一个协议，TCP在建立连接之前进行的三次握手对于很多人来说可能一直是迷。干嘛要握三次手？握其他次数不行咩？<br>那么我们就来讲讲TCP的三次握手都干了些什么吧（才疏学浅，说错的地方希望大家指正）<br><img src="/img/three.png" alt="TCP三次握手"><br>一、首先要明确三次握手的目的是什么？<br>三次握手的目的是为了确认客户端和服务端的收发功能是正常的。</p><p>那么就是需确认的东西一共有4个：<br>&emsp;&emsp;1.客户端的发送功能；<br>&emsp;&emsp;2.客户端的接收功能；<br>&emsp;&emsp;3.服务端的发送功能；<br>&emsp;&emsp;4.服务端的接收功能；</p><p>二、那三次握手分别都确认了哪些功能呢？<br>1、第一次握手<br>&emsp;&emsp;第一次握手是客户端主动发起的，简单粗暴的理解就是客户端给服务端写了一封信；<br>&emsp;&emsp;这就跟以前的人寄信一样，我自己知道自己是把信放进了邮箱里面，但是我并不知道邮差是不是把它拿出来寄出去了，<br>&emsp;&emsp;也就是说，客户端只知道自己发送了报文，但是报文有没有被发送出去就不知道，所以这个时候客户端对于自己的发送功能是否完好是不确定的；<br>&emsp;&emsp;但是当第一次握手的报文被送达服务端的时候，服务端就知道自己的接收功能是完好的了；因为它已经收到了嘛；<br>&emsp;&emsp;所以第一次握手就确定服务端的接收功能（括号内为握手编号）：<br><img src="/img/first.png" alt="第一次握手验证的功能"><br>注意：你可能会说，服务端收到客户端的信了，看到信了不就可以知道客户端的发送功能是完好的了吗？很遗憾，我们要让客户端知道 自己 的发送功能和接收功能是正常的；要让服务端知道 自己 的发送和接收功能是正常的，这也是为什么客户端发送一个seq=x,服务端要回信一个ack=x+1，这就是第二次握手时告诉客户端你发送的具体内容我可以收到，因为我回的是你发内容+1！这样客户端在第二次握手就知道自己的发送功能正常了！</p><p>2.第二次握手<br>第一次握手是客户端发起的，第二次握手就是服务器端发起的；<br>别人给你写了信，你收到了肯定就要回信嘛；<br>那么这个时候我们就可以来看一下参数（为了方便理解，我们暂时将报文信息理解成参数）：<br>第一次握手客户端会给服务端传过去两个参数，其中有一个是：seq=x;<br>SYN我们先不管，这个seq=x我们就可以看成是写在信里的内容；<br>第二次握手的时候服务器端给客户端返回的是4个参数，其中有2个是：seq=y;ack=x+1<br>那么这个ack=x+1我们就可以理解成是回答了客户端写在信里的内容，因为来信是x，客户端接收到来自服务端的x+1的时候就知道自己写出去的东西被收到了；就可以知道自己的发送功能的正常的；同时客户端也能知道自己的接收功能是正常的，因为能够接收来自服务器端的消息；<br>那为什么服务端也要写出信息seq=x给客户端呢？<br>因为服务端也不知道自己的发送功能是否正确嘛；<br>所以在第二次握手里面可以确定的功能是：<br><img src="/img/second.png" alt="第二次握手验证的功能"></p><p>3.第三次握手<br>第三次握手是客户端发起的，就是这么一来一回的；<br>在第二次握手里面我们就知道握手和确认功能完善之间的逻辑，那么接下来也只剩下一个功能，就是服务端的接收功能；<br>服务端怎么知道自己的发送功能是正确的呢？<br>类比第二次握手我们就知道了，只要收到客户端关于seq的回答就好了；<br>第二次握手的时候服务向客户端发送了seq=y<br>有seq发出去，那么客户端就要将对信的回复写在ack里面；<br>所以第三次握手所传的参数里面有ack=y+1，也就是说客户端回复了服务端的seq;<br>当服务端接收到这个反馈的时候就知道自己的发送功能的正确的了。<br><img src="/img/third.png" alt="第三次握手验证的功能"></p><p>总之呢就是一句话：能接收就说明接收功能正常；但是能发送不一定代表发送功能正常，发送功能需要通过 seq(写信)和ack(回信) 才能判断。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tcp，三次握手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT中的UDP，UDP与TCP比较</title>
      <link href="/UDP/"/>
      <url>/UDP/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/UDP.png" alt="UDP原理"><br>步骤：<br>&emsp;&emsp;1：实例化两个套接字(服务器和客户端的套接字都一样，不用再向TCP一样分serveSocket,TcpSocket)<br>&emsp;&emsp;2：接收方bind() 自己的端口port，IP<br>&emsp;&emsp;3：收发<br>&emsp;&emsp;4：关闭套接字。</p><p>UDP与TCP区别：<br>&emsp;&emsp;UDP通信过程中，每次都需要指定数据接收端的IP和端口，和发快递差不多，每次发都要填地址；<br>TCP则三次握手建立通道后每次发送就不必指定端口和IP了，在通道中就发送了。;和打电话一样，电话一旦接通就随便唠了。<br>UDP：udpSocket-&gt;writeDatagram(str.toUtf8(),QHostAddress(ip),port);<br>TCP：tcpSocket-&gt;write(str.toUtf8().data())<br>从两者的发送可以看出UDP每次发送都要填IP与Port，TCP建立完通道后就不用管了。</p><p>&emsp;&emsp;UDP通信不需要建立连接，因此不需要进行 connect() 操作。TCP则又是newconnection 又是connected来确保连接畅通。</p><p>&emsp;&emsp;TCP是以字节流的形式传输数据，因此会出现粘包现象，UDP则以数据包的形式传输。</p><p>&emsp;&emsp;使用UDP进行通信，服务器和客户端的处理步骤比TCP要简单很多，并且两端是对等的(通信的处理流程几乎是一样的)，也就是说并没有严格意义上的客户端和服务器端。但哪一端是接收数据的角色，那么这个接收端就必须绑定（bind）一个固定的端口，因为起码得告诉发数据的人往哪里发吧。如果某一端不需要接收数据，这个绑定操作就可以省略不写了，通信的套接字会自动绑定一个随机端口，并且随着数据发送过去，在接收端recv()函数中会解析出发送者的IP与Port，这样接收者也能给发送者回话了！这点和TCP差不多。不过这种只绑定一端的做法的代价是，绑定方无法给未绑定方发消息，因为绑定方是不知道未绑定方的IP与Port的（未绑定系统随机非配发送端口），也就是说第一次发送的方向是固定的！这点和TCP一样，用TCP协议也基本上默认了第一次发送方向固定这一条件。怎么实现向QQ一样两边谁先发都可以的通信呢？两边都bind()就可以了啊！这样两边的发送地址都固定了，都知道对方的IP，port的情况下，谁先发都可以。</p><p>&emsp;&emsp;TCP是一定会完整，准确的发送数据的，粘包可以自己解决！UDP不对收到的数据进行排序，在UDP报文的首部中并没有关于数据顺序的信息，UDP对接收到的数据报不回复确认信息，发送端不知道数据是否被正确接收，也不会重发数据。如果发生了数据丢失，不存在丢一半的情况，如果丢当前这个数据包就全部丢失了。因此，UDP简单，随意的代价就是可能会数据丢失。</p><p>附上UDP.cpp代码，客户端和服务器共用一个代码，都bind()了：</p><pre><code>#include &quot;client.h&quot;#include &quot;ui_client.h&quot;#include &lt;QHostAddress&gt;client::client(QWidget *parent) :    QWidget(parent),    ui(new Ui::client)&#123;    ui-&gt;setupUi(this);    udpSocket = new QUdpSocket(this);    udpSocket-&gt;bind(8887);    setWindowTitle(&quot;端口8887&quot;);    connect(udpSocket,&amp;QUdpSocket::readyRead,this,&amp;client::dealMsg);&#125;client::~client()&#123;    delete ui;&#125;void client::dealMsg()&#123;    char buf[ 1024 ]=&#123;0&#125;;    QHostAddress cliAddr;    quint16 port;    qint64 len =udpSocket-&gt;readDatagram(buf, sizeof(buf),&amp;cliAddr, &amp;port);    if(len&gt;0)    &#123;        QString str = QString(&quot;&#123;%1:%2&#125; %3&quot;)                .arg(cliAddr.toString())                .arg(port)                .arg(buf);        ui-&gt;textEdit-&gt;setText(str);    &#125;&#125;void client::on_Buttonsend_clicked()&#123;    QString ip = ui-&gt;lineIP-&gt;text();    qint16 port = ui-&gt;lineport-&gt;text().toInt();    QString str =ui-&gt;textEdit-&gt;toPlainText();    udpSocket-&gt;writeDatagram(str.toUtf8(),QHostAddress(ip),port);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UDP TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创作一篇博客？</title>
      <link href="/%E5%A6%82%E4%BD%95%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/%E5%A6%82%E4%BD%95%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>用Hexo，butterfly主题搭建博客<br>&emsp;&emsp;相信大家有时候会产生给自己造一个精致的所属空间的冲动吧，在我看到了别人优秀的博客后我就下定决心要给自己做一个精致的博客，想想只要在浏览器中搜索 <a href="https://yhl2333.github.io">https://yhl2333.github.io</a> (目前域名，正在向www.heluYang.com努力奋斗) 那全世界人都能搜索到我的网站，这个网页就是我的。</p><p>&emsp;&emsp;那么怎样创建一个博客呢，在本文中我会详细列出我的制作流程，而且大家也不必担心有一些网络技术不会导致半途而废。别急，请先大致浏览一下全文再动手搭建也不迟。</p><p>大致工作流程可以分为三部分：<br>1: 在本地新建文件夹用在有的hexo主题下修改成自己喜欢的样式（编译器用的VScode）;<br>2: 将做好的博客的文件夹通过git上传到github仓库。<br>3：在github仓库中将文件夹内容Page一下生成静态文件，这样就可以被其他人通过输入网址(如https:/xxxxxx.github.io)查询到了（百度除外，建议用非百度引擎搜索）。<br>4：通过购买腾讯，阿里服务器可以将博客部署到他们的服务器上，并绑定买好的域名（如www.xxxxxxx.com），这样就可以很快速的访问了（此步有需求的人可以用，没有需求大可不看这一条，到上一步一样可以搭建）。<br>以上步骤大可以无脑进行，99%的人的选择。</p><p>下面是几个要点，需要了解：<br>1：会翻墙（也就是会魔法），没有魔法你甚至连github,git都碰不了，至于git，github，魔法，请翻看我的软硬件杂谈，里面有详细的说明。<br>2：github与git的使用，这是俩东西，本次搭建过程中可以理解为一个发送一个接收，这个跟着视频流程走就可以了，不需要去学到底咋用的，但要先在github上注册账号，而git是一款单独的软件要下载，这俩教程也是网上烂大街的。如果你会魔法的话，这俩的安装和注册真就有手就行。</p><p>&emsp;&emsp;好了，以上几点满足的话我们就可以开始了！</p><p>做博客的平台选择：<br>&emsp;&emsp;首先要弄清楚的一点是要搭建静态博客还是动态博客，本博客就是静态博客，动态博客我相信普通人是用不到的，它与前者的主要区别就是它是服务器的数据库实时发送数据来维持的，而静态博客完全是服务器发来的一个.html页面。写博客，留言等静态博客完全够用了，还有最重要一点就是静态博客不要钱，动态博客有成本，而且还是和优酷续费的那种，你说你创建那种博客？必然静态。你看到的wordpress等属于是和hexo并列同功能的，但是是搭建动态博客的，收费。</p><p>做博客的软件：<br>&emsp;&emsp;我可以告诉大家静态博客的制作完全可以无脑选择Hexo ，大多数人都是这么选的，上面提到的butterfly主题是什么呢，你就理解为博客网页是手机界面，是Hexo的附属包，butterfly，next等主题就相当于是手机的不同主题。这些软件怎么下？下什么版本？看下面链接，我就是按下面视频做的，适用于任何windows10以上的系统，视频中有详细操作步骤。<br><a href="https://www.bilibili.com/video/BV1mU4y1j72n/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1mU4y1j72n/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>博客界面设计：<br>&emsp;&emsp;当你学习完以上的视频并操作后，你会有一个Hexo默认的博客界面，并且已经上传到github中以便以后发推文实时在github中更新，此时你想的一定是想要美化界面，想要更好看的界面，这类视频在b站上都不太好找，下面是我找到的，紧接下文：<br><a href="https://www.bilibili.com/video/BV1sK411Q7S7/?spm_id_from=333.999.0.0&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1sK411Q7S7/?spm_id_from=333.999.0.0&amp;vd_source=b6da26061de3320a8170666f06381a91</a><br>去这个up的视频库里去找，有可以做成这种效果的完整系列视频。</p><p>如何去写博文：<br>&emsp;&emsp;这里才是你做博客的核心目的！写文章，但写博客和写记事本写word是两回事，得学，下面是up的视频：<br><a href="https://www.bilibili.com/video/BV1uW411G7nP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1uW411G7nP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>如果你做完这些，那么你已经达到或者超越了我的博客网站的水平，接下来我会说说你可能会产生的问题：</p><p>问题一：做博客不是免费吗，到底要不要花钱呢？<br>answer：首先，做博客，将其上传到网上，能够被其他人打开，这个过程完全是免费的，但这时，你的博客域名是<a href="https://xxxx.github.io">https://xxxx.github.io</a> ，发现问题了吗？，就是github，github在整个过程中的作用相当于它充当了服务器的角色，任何人想要访问你的博客网站时，请求被发送到DNS进行域名解析，发现你的博客网站是存在github服务器的！而github服务器在国外，访问，将网站内容发送给访问者极其困难，慢，要挂外网的，挂外网也不会很快，你的界面设计的很复杂是要好久才能加载出所有内容，因此，开始氪金，你会问有没有不用钱的？我的回答是绝大部分人都自己去阿里云，腾讯云去买服务器和域名了，你自己细品。gitee和coding我都试过，coding与腾讯联手在朝着氪金方向发展，而Gitee则受到了国家的监管，你上传的内容在部署到服务器上时会被审核，发现有违规内容也不会告诉你哪里出了问题，而且都是国内仿照github做的仿版。有了自己的服务器和域名，相当于把你的博客数据从github服务器转移到我们自己的WLAN就可以直接访问的阿里云，腾讯云服务器了，而且这些服务器都有CDN加速，自然就可以快速加载快速打开了，但是服务器加域名费用的话差不多一年150左右，也有学生价，当然如果不想展示给别人看（不是不能，是加载慢）只想自己看自己写的话就可以停留在<a href="https://xxxx.github.io">https://xxxx.github.io</a> 了。</p><p>问题二：为什么有的插件，包容易下载不下来，有的会警告有错？<br>answer: 建议外网和内网切换尝试下载，下载时以管理员身份运行GitBash，后VSCode；有的包下载完会报错，提示 git audit fix,但其实这是包的版本问题，想处理就按照他说的 git audit fix，不想处理或处理不了就跳过，依然能用。</p><p>问题三：如何解决数据做好的博客页面加载慢的问题呢？<br>answer：氪金，买服务器和域名，而且要备案的，不算简单；也可以把里面用到的图片存成HTML文件到达图片更快加载的效果，或者把特效关了，不过这两种解决不了根本问题。</p><p>问题四： 如果博客/网页里放了很多图片，打开网页的时候会加载很慢，那应该如何解决呢？请去看 CDN、文件传输“图床”篇。</p><p>大致就是这些，吃晚饭去</p>]]></content>
      
      
      <categories>
          
          <category> 软硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于网络的认知</title>
      <link href="/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;我们每天都在登录B站，每天都在科学用网，只要手动输入 <a href="https://www.bilibili.com">https://www.bilibili.com</a>  我们就可以进入b站了，但你有想过这件事是如何实现的吗？还有当我们在做客户端，服务器相互传输信息的时候，IP和端口是干什么用的？在这篇文章中我将详细对标签中的各种名词做出解释。</p><p>&emsp;&emsp;首先，从我们自己的身边开始介绍，由这些引入到以上的各种名词，下面对这些名词进行形象化的解释，便于理解。</p><p>1：局域网（内网）<br>&emsp;&emsp;小时候家里买了个路由器，接到电脑上，电脑就有网了，接到手机上，wifi接到手机上，手机也有网了。我们就可以说，在这个路由器发射的网络信号让局部范围内有了网络，这个局部范围就称为局域网，而众多的手机，电脑，则是接入了这个局域网的设备。</p><p>2：公网：<br>&emsp;&emsp;现在我们家有局域网了，可别忘了小区内别人家也有路由器，他们也有自己的局域网，那么问题来了，谁给我们和他们路由器连的网？当然是一个更大的路由器了！一个更大的路由器会给你们小区所有的路由器供网。我们同样可以推出在别的小区也有着很多的家庭路由器在提供局域网，而给他们的路由器供网的则是他们小区的路由器。同理可推，给众多小区的路由器供网的是市政级别的路由器，给市政级别的路由器供网的是省的路由器。这样你就会发现整个供网系统就是一个金字塔型，由最上面的一个点向下延伸构建成一个金字塔，塔顶的点就是中央系统。而我们把小区各个用户用的路由器之上的部分称为公网（先把各家各户的路由器给用户家里局部区域供网的范围定义为局域网，把路由器之上的公网系统称为公网）。而整个金字塔的运营商（ISP）就是电信，联通，移动等公司。</p><p>&emsp;&emsp;有了局域网和公网的理解，我们就可以进一步解释 内网IP，公网IP 这类概念了：</p><p>3：内网IP<br>&emsp;&emsp;当别人问:”你电脑的IP是什么啊？”，你大惊失色，马上百度如何查看电脑IP，发现按win+R输入cmd按回车，在命令行中输入 ipconfig ，就查到了自己的电脑IP是1xx.xxx.xxx.xxx;然后你告诉那个人：我的IP是：“xxxxxxxxxxxxxxx”。<br>如果你有过以上的经历，并且认为上述语句并无毛病的话，那么说明你的理解是有问题的（你的操作完全没有任何问题）。下面我会解释为什么：<br>首先电脑IP并非固定的，电脑IP也不是电脑固有的，甚至“电脑IP”本身就是带有歧义的，它会让你认为这是电脑固有的，出厂就设定好的，但其实上不是的，电脑IP是你电脑接入局域网络的路由器来分配的！没错，如果你电脑接入了邻居家的局域网内，你就会发现电脑IP变了。所以这个IP只是临时性的。而且你家的路由器会保证它所分配的IP是各不相同的。</p><p>4：公网IP<br>&emsp;&emsp;公网IP是什么？和你的电脑IP有什么区别？首先我们要知道IP的作用是什么，我给你发了条微信，你给我回信，为什么信息会精准的在我们之间发送而没有发给别人呢？答：因为有IP，只要知道你我的IP，在这个大的金字塔框架中，信息就怎么也走不通。但如果你细想信息在金字塔中是怎么流动的，你会发现我发给你的信息从我的IP出发，到达我家的路由器再到达给我家路由器供网的小区路由器，小区路由器回去上面找市政级的路由器，这个市政级的路由器再找到你小区的路由器再找到你家的路由器再找到你的IP，构成了一条完整的通路，消息在这条通路之中流动。那问题来了，信息怎么知道这条通路的存在呢，信息为什么知道该怎样从当前路由器找到下一个路由器呢？它不知应该知道起点位置和终点位置吗？答：所用的路由器都有一个IP地址，你家的，你小区的，市政的，市政上面的，也就是说在公网里的路由器都有自己的IP地址，都有一个1xx.xxx.xxx.xxx的IP地址，这就是公网IP。但这些IP地址不是由上一级路由器随机分配的，都是固定好的，也就是说公网IP是固定不变的且各不相同的！这样我们也可以说在这个大的网络框架中每个网络用户的绝对地址都是由 公网IP+内网IP 唯一确定的，这是由于公网IP各不相同，局域网内各设备的IP各不相同，这样就保证了对每个用户而言 他公网IP+内网IP 各不相同。<br>我们可以做一个小实验：<br>内网IP查询：电脑cmd中输入ipconfig<br>公网IP查询： 百度内输入IP直接搜索的那串数字<br>我在E601实验室中在实验室路由器的局域网中查询这两项与我接入wifi BUAAMobile得到的两个IP地址都是不一样的。<br>内网IP不同是因为随机分配的，换个路由器就不一样了。<br>公网IP取决于你电脑所连的路由器，E601走的是小区路由器，BUAAMobile是北航自己的路由器，两个路由器都不一样，自然公网IP就不一样了！</p><p>如果还是不理解直接看下面的链接视频：<br><a href="https://www.bilibili.com/video/BV1xu411f7UW/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1xu411f7UW/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a><br><a href="https://www.bilibili.com/video/BV1DD4y127r4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1DD4y127r4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>为了下面的叙述，解释一下服务器：<br>5：服务器，说白了就是存储了大量数据的super电脑，有自己的IP地址。你想从服务器得到服务器内的数据，就像你想从老师那得到成绩单：你用电脑微信发送请求：“老师你能不能把期末成绩发我一下”，老师收到请求后在他的电脑上把电脑里面存的成绩单发给你，老师的电脑就相当于一台服务器。你访问www.bilibili.com 请求经过金字塔的通路传递到bilibili公司的服务器，服务器收到请求就把B站主页的数据信息原路返回发送给了你，你就看到了b站主页,之后你想看主页上了哪个视频，也是如上过程。类似于微信聊条，只不过别人回的就是你要看的视频。</p><p>&emsp;&emsp;到这里，你就知道了，我想查询www.bilibili.com，访问请求由内网传到公网，去访问bilibili的服务器，bilibili的服务器再将数据走路由器通道找到我的IP传回给我，我就可以看到bilibili的界面了！<br>&emsp;&emsp;但你有没有想过，你的请求是访问 <a href="https://www.bilibili.com">https://www.bilibili.com</a> 那这条请求访问信息怎么知道该走那条路才能到目标路由与服务器呢？<br>聪明的你显然发现了，<a href="https://www.bilibili.com">https://www.bilibili.com</a> 与bilibili的服务器IP存在着千丝万缕的关系。下面就要讲到域名，DNS。</p><p>6：DNS，你可能会说只要有了目标IP地址，我就完全可以在金字塔体系内进行各种通信了啊，那DNS是干什么吃的？万事万物都有其存在的道理，我们回想一下，你要访问bilibili，那么你就要知道bilibili的IP，就是那一大串1xx.xxx.xxx.xxx，好，我们假设你今天知道了，那你下次还能记住吗？你先记住你女朋友的手机号吧！这就是域名存在的原因，好记！就是好记住，只要访问Bilibili域名<a href="https://www.bilibili.com">https://www.bilibili.com</a> 你就能进去了。但是在金字塔体系里是通过IP找IP来实现通信的啊，因此，就有了DNS—将域名翻译成IP，就是将<a href="https://www.bilibili.com">https://www.bilibili.com</a> 翻译成1xx.xxx.xxx.xxx。具体是怎末工作的呢？DNS实际是一个服务器，你访问某个网址域名时，这个网址域名会先被送到DNS服务器（没有例外），这个服务器内记录了世界上所有的域名和IP的对应数据，查询到后就会将具体的IP传回你的电脑，你的电脑收到后自动去访问这个具体的目标网站IP，就实现了你和目标网站的互通，如果没有DNS，你就只能输入IP访问了。</p><p>7:域名等级：拿 www.bilibili.com来说，.com是顶级域名，.bilibili是一级域名，.www是二级域名。</p>]]></content>
      
      
      <categories>
          
          <category> 计网与操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络知识，IP，DNS，服务器，局域网，公网， </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器端网络加速</title>
      <link href="/CDN%E5%8A%A0%E9%80%9F%E6%8A%80%E6%9C%AF/"/>
      <url>/CDN%E5%8A%A0%E9%80%9F%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>CDN技术是个啥？</p><p>我们先不聊CDN，来聊一聊普通的服务器。<br>&emsp;&emsp;这几天，我买了一个腾讯云的服务器并在我自己的笔记本上配置好了服务器，但美中不足的是我买了地点在广东的服务器，我人在北京，距离算是中规中矩，但距离因素依然是影响网站加载快慢的关键因素，也就是说如果我回到黑龙江，博客的打开速度就会更慢了。<br>有问题人们就会解决问题，那么如何解决服务器和访问用户之间的距离带来的不便呢？CDN就应运而生了，CDN的本质也是服务器，并且CDN分布在全国各地，比如我在黑龙江发出访问博客请求后，如果我开通了CDN服务，那么广州的那台服务器在给我提供页面数据信息的同时选择我身边的一台CDN服务器，将我所访问的资源内容缓存在CDN中，当我再次访问时，就会直接就近访问这台离我很近的CDN服务器，这样就实现了访问的加速，所以其他人（在我附近区域）访问我的博客时，请求同样发到广东的服务器，广东服务器会指向之前缓存过信息的CDN服务器，实现了就近传输数据，达到了提速。当然，这么牛x的服务得加钱。<br>下面的视频可以加深理解：<br><a href="https://www.bilibili.com/video/BV12T4y1P7Fh/?spm_id_from=333.788&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV12T4y1P7Fh/?spm_id_from=333.788&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>带宽，图像显示，图床，云存储COS<br>&emsp;&emsp;在这篇博客中，你看到了大量的图片，这些图片的大小超过50MB，而我所购买的服务器带宽是4M，所以要加载出所有的图片，就需要50/（4/8）=100s，而且这还是在我没有带宽损耗，也就是我人得站在广东那台服务器旁边才能有这种速度，随着距离的增加带宽发生了损耗，导致距离越远数据传输越慢（这也就是为什么需要CDN来消除距离因素）。但你会发现，就算有CDN服务器，我网站的加载完毕时间也只能逼近100s，那该怎样缩短时间呢？<br>当你打开互联网上的任何网站，实际上你打开后只花了不到十秒就全加载完了，我们反观加载的原理，网站内容按照加载所需带宽大小可以分为两部分，正常内容和图片（占大比例的还是图片！），因此我们可以在加载图片上动手脚，那么如何更快加载图片呢？<br>&emsp;&emsp;想更快加载一张图片，要么提升服务器的带宽，要么处理图像自身。下面我们来谈谈云存储技术，我们在做包含图片的网站时，经常把图像本身传到服务器中，以方便服务器调用发送给访问者，但服务器的带宽有限，我的就是4M，那怎样拓宽呢？首先腾讯云在卖服务器的时候就对带宽明码标价了，所以广东的那台腾讯云服务器本身的带宽就不用想了，但如果我们把图片存到其他服务器呢？用其他服务器的带宽来传输图片，你肯定会说，你这不就相当于自己又买了一台服务器来存图片吗？你说的没错，但也不完全对，我买的是有特定功能的服务器（存储类服务器，也就是云存储COS服务器，相比正规功能的服务器，这种特定功能的服务器极其便宜），就是我把网站要显示的图片存在了其他云服务器上，并生成访问链接：HTTP://XXXX。在博客网站的生成代码中我把图的访问路径换成了HTTP://XXXX 这种链接，如下：<br><a href="https://blog-1315294080.cos.ap-beijing.myqcloud.com/19.png">https://blog-1315294080.cos.ap-beijing.myqcloud.com/19.png</a>  ，点击链接就可以生成图片</p><p>&emsp;&emsp;这样有人在访问我的博客时，广东的服务器在加载博客网站的图片时，会访问这个图片的网址，这个网址部署在云存储COS服务器上，因此云存储COS服务器就会用它自己的带宽给我加载图片信息，这样就节省了广东服务器的4M带宽！因此就相当于你在打开我的博客的时候，传输资源的带宽=广东4MB+云存储COS服务器的带宽，一起加载。将图片转化成网页链接的过程，就是图床技术。因此同理，云存储技术还可以将文档，视频，音频如此操作，因此云存储可以针对很多类型资源进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> 计网与操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN 图床 图像显示 带宽 云存储COS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者日志</title>
      <link href="/%E5%BC%80%E5%8F%91%E8%80%85%E6%97%A5%E5%BF%97/"/>
      <url>/%E5%BC%80%E5%8F%91%E8%80%85%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<div class="note default simple"><p>default 开发者日志</p></div><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-21 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">1.0</a></p></div></div><div class='timeline-item-content'><p>本博客网站开服，作者：yhl2333<br>学校：五道口信息技术学院<br>邮箱：1652966670@qq.com</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-23 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;好不容易把bug改完了，把功能实现了。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-23 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">1.0 -&gt; 1.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;今天是11月23日，新增了留言新功能，希望大家可以对博客网站提出建设性意见或者有什么想留言的。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-25 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;今天是11月25日，本着精益求精的态度，我对博客进行的大幅度的美化与修缮，成功实现了白天黑夜不同的界面显示与特效。这个过程历时整整一天，出现的问题：修改博客文件后在本地 host:4000端口打开的效果和在浏览器中服务器IP地址打开的效果不同，不同之处在于修改的部分没有显示。进过多次调试查证发现是浏览器自己的数据缓存功能，慨叹自己如此伞兵的同时也对浏览器的搜索引擎的检索能力提出质疑。浏览器的数据缓存：浏览器在加载网页之后会将内容缓存到你的设备上，当你再次访问（包括刷新网页）这个网站就会优先显示上一次加载缓存过的结果，而不是默认立即从服务器上更新全部网站内容，不然1GB的流量打开几个图片量大的网页就都没了。这也就导致了网站的开发者修改过服务器上的资源后刷新网址网址会没有任何变化，望诸位前后端开发者引以为戒！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-29 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;直接润回家！润的前一晚学校🐏了一个，润的当天🐏了一个。（润的后一天也🐏了一个）（再往后一天和我一层的同学也阳了，一层被拉走隔离了。。）<br>&emsp;&emsp;今天遇到了好多有趣的人，拼车的学姐，开出租的老父亲，做志愿奉献社会的兵哥，每个人都有着我所羡慕并且精彩的生活，<br>&emsp;&emsp;逢人便讲自己的憨厚懂事的高三儿子的出租车父亲，热情的和我讲述自己的孩子如何努力，如何憨厚可爱，如何高三了还孩子气，讲述的时候发自心底的开心与骄傲像极了我的父亲，虽然我不那么懂事（回家发现俺爹真的把烟戒了，挺开心的）。<br>&emsp;&emsp;在拼车群里拼了一天的车都没拼到去北京朝阳站的人，第二天拼到了一个林业大学的研一姐，和我一样也是趁着疫情赶紧润回家，老乡所以在一起聊了还算挺多的吧，值得感叹的是我依然还是和异性交谈九级伤残选手，也不太会表达，但单方面也没感到尴尬，如果不是一面之缘，感觉能成为朋友吧。<br>三四十号转运的人在天寒地冻的大街上冻了一个小时，怨气朝天地上了转运大巴，面对大家的埋怨挖苦，开车的军人哥忍气吞声还疯狂打趣，让车上的气氛缓和了下来，后来知道他是无偿来当志愿者的，理由是想要奉献社会，从早上七点干到晚上十点，很难想象一天中他咽下了多少波分流人员的怨气，令人打心底敬佩，无论如何，给别人多一些容忍与理解吧。<br>&emsp;&emsp;哈西站下了高铁，走在站里有种恍然若失的感觉，感觉愧疚又无力，不知不觉就泪流满面了。高中写了三年的触景生情，好像再今天才算真正的理解了<br>&emsp;&emsp;回家后和杭州的姐姐打了会电话，一切安好，希望今年过年的时候能见到吧<br>&emsp;&emsp;很精彩有趣的一天<br>&emsp;&emsp;三点半了，该睡觉了<br>&emsp;&emsp;晚安，陌生人</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-11-30 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=100% src="//music.163.com/outchain/player?type=2&id=1907766514&auto=1&height=66"></iframe></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-12-1 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;隔离第二天。已经感觉得到自己精神层面出了些状况，可能是真的有太多太多想找人说说吧，可大家都在忙，也不去打扰了哈哈。<br>&emsp;&emsp;感觉这么多年自己就一直都在念书，大部分还都是无用功。感觉别人的生活都好精彩啊，好想走出去看看啊。引用我彭哥的一句话“没有生活质量慢慢就抑郁了呗”，但比起身边的人我已经算是不错的了。北京看样子要解封了，脸都不要了。<br>提高自己的生活质量，，，，，<br>&emsp;&emsp;好久没更技术篇了，明天更一篇C++出来。<br>&emsp;&emsp;今天属实是没啥正能量了，，<br>&emsp;&emsp;都别跟自己过不去吧，<br>&emsp;&emsp;加油吧大伙</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-12-3 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">1.1 -&gt; 2.0</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;封控第四天，很难想象连续静默几个月的人的精神状态，感觉干什么都失去了兴趣，唯一的好处应该是可以给自己更多的时间思考一些问题。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-12-5 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;开放了评论区，用的必来力评论系统网站，大家可以放心评论不用担心号被盗哈。。。号被盗了我全责好吧</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-12-9 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;ELDEN RING！年度最佳 2022-12-9</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-12-26 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;考研结束了，兄弟们都回来了，就算家不在肇东，大家也都第一站回到了肇东。对我来说，可算有人陪着说话打游戏了，不管考得怎么样，都先把一切都放下吧，休养一段时间。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-1-1 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;欢度元旦，给朋友们都发了贺词，鸣谢王哥凌晨帮助我度过情感难关解开心结。希望新一年能够认识到很多志趣相投的人，多交几个朋友。多学一些知识与社会技能，提高自己的生活质量，对自己投资对自己投资对自己投资！新年愿望是让自己变得博学谦逊。女朋友等毕业了再说吧。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-1-5 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;一根藤2023年度聚首。和大伙一起去了人工湖，看了烟花，打游戏出去住。得知桂花已经找了工作，怎么感觉像是葫芦娃中大娃被妖精抓走了一样，七个人中第一个能早日实现经济自由和生活自由，工作也还不错。被珍惜的快乐才会永远封存在心底，看来大家都别来无恙，即使生活充满了挫折也在努力改变自己的人生，大家加油吧。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-1-10 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;第一次和别人微信上唠了五个小时。我自认为挺能唠的，结果遇到了更能唠的，哈哈，好像挺兴趣相投的。每次和陌生的人交谈，真的感觉是在接触另一种经历，人生。真的挺希望和别人多沟通的，感觉自己的智慧也在增长。毕设感觉也就那样了，又想读博了哈哈，但还是未来的生活更重要啊，要不起的牌就要过掉，没啥可说的。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-1-12 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.0 -&gt; 2.1</a></p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;坚持运动了一个月，跑步和腹肌撕裂者穿插，感觉非常有用，非常有用，非常有用！头脑变得很清晰，感觉回到了头脑巅峰期。肺活量上原来能闭气几十秒，现在轻松两分钟。腹肌也有型了，练了十几次确实成效显著。继续坚持！</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年</title>
      <link href="/%E6%96%B0%E5%B9%B4/"/>
      <url>/%E6%96%B0%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<p>要开始新的一年了，过去的一年发生了好多事。</p><p>下了高铁，五味陈杂，不知不觉就泪流满面了。</p><p>生活中有太多的不可抗力了，有太多抓不住的飘渺，有太多心酸和不甘。发现自己活在自己给自己编织的梦里，才被现实一次又一次的打败。</p><p>这些都已经过去了，<br>我觉得真的好可惜，但也只能嘴硬一句仅此而已，别无他法。</p><p>谁都战胜不了生活，但无论生活怎样的光怪陆离与造化弄人，无论怎样无法原谅自己，我都要和生活和解，和自己和解。</p><p>生活是自己创造的，它本身有多大的意义并不重要，比不比得上别人的意义也不重要，能给生活打分的人也只有自己。</p><p>所以我只觉得可惜，仅此而已。</p><p>不一定会有怎样美好的结局能配得上这一路的颠沛流离。<br>但它一定是能令自己释怀的结局。</p><p>所以我不打算把过去的事情放在心上。<br>一件一件地后悔下去，会没完没了的。<br>我能做的，也只有成为更纯粹的自己。</p><p>又是一年的同学聚会<br>去年的冬天，上一次是在魏老大烧烤，不过当时可以看出，虽然大家都在谈笑风生，但谈到未来，每个人都对未来有些许迷茫和担忧。毕竟面对能决定命运的事件，谁又能坦然以对呢。<br>“一年以后就真的尘埃落定了吧”，我这样和彭哥说。怎样的相互安慰也难掩心中的沉重，因为要面对考研了，要在八比一，十比一的比例中脱颖而出，真的好难呢。在和鸣谈到考研时，发现鸣早已起步，暑假也打算不回来了，在学校备考，对比一下决心，感觉弗如远甚。<br>不知道别人当时在想什么，我当时就在想，“一年以后的现在，大家都会怎样呢”。</p><p>2023 1 4 ，大四的冬天，</p><p>今年的冬天，再次相聚。<br>这次也是看到了大家在一年以后怎么样了，算是给去年的惆怅一个答复。<br>有的考研充满希望，有的找了工作，有的准备二战。但我发现我好像不在意大家有了怎样的结果，我在意的是大家面对考研和找工作的不同的态度。<br>大家都已经有了很明确的规划，准备复试的复试，准备工作搞钱的搞钱，准备二战的也摆脱了心结在重新规划。<br>说实话，我发自内心为我的朋友们感到骄傲，我也从他们身上受到了鼓舞。<br>面对变化莫测的未来，每个人都在用最饱满的一面面对着生活，接受着生活，而不是将自己交给迷茫，随遇而安。</p><p>—生活是自己创造的，它本身有多大的意义并不重要，比不比得上别人的意义也不重要，自己能释怀就可以了。</p><p>或许这是一根藤最后一次在肇东聚首了吧，谁知道呢<br>就算还能聚，剩下几次了呢。<br>不想去想。<br>我惭愧自己后知后觉，在尾声时才珍惜友情的可贵。<br>从今往后，或许真的天各一方了，或许真的杳无音讯了。<br>如今摆在大家面前的是以后在哪就业，在哪扎根生活的问题。<br>但随着时间推移，这些问题也不算是问题了<br>引用尧的一句话：毕业了以后，三年内，工作，相亲，结婚，买楼，要孩子，基本全都定下来了。<br>是啊，时间的车轮会把一切都辗出痕迹，无论你愿不愿意。<br>五年后，人生就真的定型了吧<br>或许这就是命运吧。<br>七个人，七种不同的命运。<br>无论面临怎样的命运，希望我们在认命的同时，都能看开吧。<br>望着人工湖上的烟花，仿佛心中又燃起了希望，<br>可惜烟花易冷，消散之后黑夜中又只剩下渺小的自己，<br>但希望虽小，却也经常燃起。<br>请对生活充满热情。</p><p><img src="https://blog-1315294080.cos.ap-beijing.myqcloud.com/47ADA6D4D8E5950AFA63B7F7671FEAF8.png" alt="一根藤高级会议"><br><img src="https://blog-1315294080.cos.ap-beijing.myqcloud.com/1F8CDA135A8BFF100FA6644CA5AD9089.png" alt="人工湖"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人们为什么想在大城市定居？</title>
      <link href="/%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1/"/>
      <url>/%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;先和大家小算一笔账。<br>&emsp;&emsp;本人预计三年半后毕业，假设进入航天科技一院工作并拿到北京户口，想要在北京/杭州/武汉等超一线，一线城市落户，(假设房价不增不减，假设没有天灾人祸)我要多少年才能买一套房子（算公摊80平）？</p><p>&emsp;&emsp;这里以北京房价计算</p><p>首先我认为不应该选择从小户型比如50平米向80平米过度，原因有二：<br>1：居住舒适程度来说，两个人(假设我到时候能找到对象好吧)居住面积小于50平米的话必然会很难受。<br>2：将50平米卖出会有亏损，并且十年之内也不可能还得完房贷。届时房价如果继续上涨，会比直接买80高上太多太多（租房同理）。</p><p>&emsp;&emsp;北京房价：五环南，北京公认楼价便宜的地方，6w/m^2。 这样6*80=480w。<br>&emsp;&emsp;我的工资，假设我毕业的时候就业形势和今年一样明朗（烧高香了）。四年后税后平均工资35w每年（个人所得税上缴20%）。</p><p>&emsp;&emsp;好，接下来计算工作前三年住员工公寓积攒的工资和买房贷款产生的利息，前三年税后（20+25+30）=75w。减去三年各种开销（每月2k），75-12<em>3</em>2k=68w，加上公司给的安家费，省吃俭用一共攒下80w.<br>&emsp;&emsp;去银行贷款（480-80）=400w。按还20年计算，这些贷款在20年内会产生至少250w的利息。这样（400+250）/35=19年。<br>&emsp;&emsp;相当于我不吃不喝把自己的工资全部投入，也要将近20年时间才勉强还完，且在这20年间不能出现任何形式的变数。<br>&emsp;&emsp;这样，另一个人的工资要完全用在家里开销上。就北京的存活物价与日常消费，勉强能养活两个人。<br>&emsp;&emsp;现在第一个问题来了，要不要孩子，根本就养不起，孩子怎么养，要多少资金投入，想都不敢想。也就是说很有可能当我快50的时候，我才把一切都安顿好，这时恐怕会身无分文。<br>&emsp;&emsp;现在第二个问题，如果在这二十年期间，漂浮的房地产泡沫破碎，经济危机怎么办。可以预见到的是欠银行的钱要一分不少的还掉，工资会大幅降低。如果真的发生这种事情，其实就可以/remake了，风险巨大。<br>&emsp;&emsp;所以目前的形势来看，为了一张北京户口，大半辈子基本上寝食难安。本来就没什么先天充实的经济基础的话，北京户口还真就是废纸一张。</p><p>&emsp;&emsp;那么父母是如何看待这件事的呢？</p><p>&emsp;&emsp;在我家经常听到的一句话就是“有多少人做梦都想拿北京户口都拿不到，你脑子有问题吗不留北京？”，我不禁要问，我为什么要留在北京？<br>&emsp;&emsp;“为了以后你的孩子以后就留在北京啊！”。<br>&emsp;&emsp;“………….”<br>首先老一辈人为什么会无脑认为大城市好，特别是北上广深<br>1：其实这么认为的都是东北人居多，因为从小到大都穷惯了。以前在电视上看到的先进，富裕的代表城市就是北上广深，听得多了也就认为理所应当了。听到在北京工作几年就能能拿30w+的工资就认为这工资太高了，潜意识里认为能满足生活所需。但问题是真的不够，甚至远远不够。<br>2：听单位同事云谁家孩子留在北京上海了，听的多了就会把能否定居北上广看作是孩子是否优秀成功的标准。其实你回想一下，这和让初中考到重点高中的尖子班，高考考到985，211何其的相似，这次变成了家是否安在了北上广深。这其中甚至可能掺杂了虚荣心和攀比作祟，她们只关心这一结果能否实现，而忽视了现今的生存成本，竞争压力，后代养育，经济形势等一系列在她们时代并未如此严峻过的问题，而这些问题在中国的超级城市中只会被无限的放大。如果你问她们孩子怎么养，谁来养，养育成本怎么办？大概率会和你说“你这么大都养过来了，这个社会上谁家还不得养个孩子呢？你面对的压力大家都在面对”云云，殊不知这个时代每年有1000w的毕业生却只有不到70w的新生儿，男女经济都独立的情况下由女性主持家务，养育子女已经变得不公平与不现实。<br>3：典型的中国式父母思想，“为了后代”这种说辞就是典型代表，生活的幸福感本就不多，996，007就导致根本就没有时间放松自己做自己想做的事，生命中的前三十年努力学习，再加十年，二十年的班，一辈子累死累活是吧，就为了让孩子扎根在北京？得了吧，他有能耐自己考北京去呗，他没能耐他也守不住家业。典型的中国式家长思想，生活有多艰苦无所谓，为了孩子好咋都行。纯属是被几次改革标语被洗脑了。</p><p>&emsp;&emsp;人来世上一遭，埋头苦干一辈子，来也匆匆去也匆匆，除了一个房子，一个孩子，一张标注着户口的废纸，一点活过的痕迹都没有。可悲又可笑。<br>这辈子我能为我自己活一活么？</p><p>&emsp;&emsp;你会说还非在北京不可吗，好，退一步，省会城市。<br>&emsp;&emsp;其实道理是一样的，经济好的地方工资高，经济差的地方工资低，你不妨拿出纸笔计算一下，还房贷的年数和北京没差多少，该面对的问题也是一样也不会少。<br>&emsp;&emsp;现在的年轻人也都不傻，和以前人们宁可打工也要进城一样，毕业生肯定会把省会级城市（除边疆贫困地区省会）列入第一梯队考量。这样你会发现，和北上广深一样，自己还是被一群相同目的的同龄人裹挟着，被迫选择这些省会城市。<br>&emsp;&emsp;三线四线城市也还是不会去的，岗位更少，工资更低，你自己都会想对得起自己的寒窗苦读吗。<br>&emsp;&emsp;所以我们发现在哪里好像都挺难，还不如卷去北上广，起码能满足一下虚荣心，甚至会安慰自己北上广有更好的社会福利，平台与机会更多，有隐性福利如五险一金，医疗条件好，代价是要比省会城市更辛苦一点。<br>&emsp;&emsp;至此，兜兜转转回到了起点，闭环形成了。</p><p>&emsp;&emsp;因此无论在父母还是我们的角度上，我们也似乎不得不往更高处走。</p><p>&emsp;&emsp;不过到现在，我们“活不起”的问题依然没有解决，我还是活不起啊！华生，你发现了盲点，如果只为了自己的话，问题可能就解决了。自己可以住五十平的房子，自己也不用担心婚姻问题，也完美规避了养孩子的问题，能完全按照自己的意愿支配自己的开销，在委屈自己的同时也不会带上其他人。现如今这么多的人选择不结婚，不要孩子，与其说年轻人想要自己过活的快快乐乐，不如说当今的社会形势下就不适合婚育，面对未知的婚姻问题与养育问题，在大城市中年轻人根本没有容错的余地，稍有不慎就可能事业家庭尽毁。生物都知道环境恶劣资源匮乏时会限制自身种族的繁衍，何况是人。</p><p>&emsp;&emsp;但当你决定拿出全部积蓄在大城市贷款买房了，你也就基本上扎根这个城市一辈子了。<br>&emsp;&emsp;最好的例子就是成都，08年大地震有多少人想去华东生活远离地震带的，结果发现他们根本就出不去。当你80%-90%的资产是房产时，想走？对比起，这是你家几代人的努力成果，你确定要放弃户口的同时贱卖掉房产吗？不可能的。这也是为什么超一线城市和一线城市的楼房性价比高的原因，保值啊，楼价再怎么跌，再怎么发生天灾人祸，想来大城市的人也大有人在，市场这么大，楼价会下跌？太抽象了，不存在的。</p>]]></content>
      
      
      <categories>
          
          <category> 社会现象分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 房价 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>房地产经济为何主导了经济的发展</title>
      <link href="/%E5%9C%9F%E5%9C%B0%E9%87%91%E8%9E%8D/"/>
      <url>/%E5%9C%9F%E5%9C%B0%E9%87%91%E8%9E%8D/</url>
      
        <content type="html"><![CDATA[<p>为什么说楼市推动了整个中国的发展？GDP飞黄腾达的第一支柱是楼市？</p><p>&emsp;&emsp;分税制实施前，全社会还在吃大锅饭，没有经济活力，工业实力与生产能力过于落户，发展太过缓慢。1978年11月24日，出现了第一例土地包产到户，也就是自己给自己干活，收入上交政府一部分剩下都是自己的。 这样成功刺激了人们的劳动积极性。底层的收入模式发生了改变，顶层的收入模式也要变，因为说白了以前一切劳动产生的价值归中央，现在劳动者和企业自己干自己的，收入也都是自己的，中央就没钱了，中央就说不行，你得把你赚的一部分给我，也就诞生了分税制的雏形包干制，就是把利润上交给上层，但这样就代表着如果当地没赚钱，就不必缴纳，因此在账上做手脚也大有人在，很快国库就没钱了。<br>&emsp;&emsp;地方政府有钱了，中央政府又没钱了。于是诞生了包干制pro—分税制，从生产材料，售卖的整个过程都要上税，无论是否盈利，相当于变相增加了产品的成本，只要有交易，就有源源不断的税收，这样中央一定能有稳定的经济收入。中央政府与地方政府73分，地方政府说：怎么我们才拿七成啊？中央财政部表示：七成那是中央的！中央拿税收之七，省政府，市政府，县政府共拿税收之3。不管地方愿不愿意，反正最后是都同意了。</p><p>&emsp;&emsp;这样中央政府有钱了，地方政府又没钱了，地方就会觉得，我拿的钱少干的事还多，属于是上头点菜地方买单了，这3成税，还要养活省政府，市政府，县政府，基础设施建设都要从里面拿钱，上层权力高，越往下分的钱还越少，这也就是为什么省里待遇比基层强不少。这就是财权层层上收，事权层层下压。中央财政蒸蒸日上，省级财政稳稳当当，市级财政摇摇晃晃，县级财政哭爹喊娘。</p><p>&emsp;&emsp;那这样地方活不了啊，哪有钱搞治安，搞教育，搞医保民生？<br>&emsp;&emsp;不知道你们有没有看过市政的新闻频道，我家在一个十八线小县城，在新闻里我经常能听到“招商引资”的字眼。在巨大的财政压力下，地方发现了又一座金矿，之前中央说税收拿七还有另一项并行措施，就是把土地出让金额给地方政府，至此，万恶之源开始出现，我们一辈子的终极目的—房，登上了历史舞台。土地房地产和招商引资有什么关系？</p><p>&emsp;&emsp;首先说明：近二十年来，我国经济发展迅猛，迅猛到在初期就可以做到经济翻几番，不过令人感到遗憾的是，绝大部分归功于土地兜售和土地金融，而非制造业，工业进步与科技进步。<br>&emsp;&emsp;再给大家解释一下贷款，比如说我有100元，存进了银行，那么银行可以把这部分钱贷款给别客户A，（此时我和A的银行卡里都有100元，我们都可以去市面上消费）这样市面上就相当于有200元可以流通，这时我和A把钱全部在超市里用掉，花掉200元购买商品，这也就是说实际上只靠我自己的100元，就实现了价值200元商品的购买！但是A是要把这贷款100元加上银行利息还给银行的。但在他购买商品的那一刻，他是无力偿还一分钱的，也就是说A把欠款的偿还赌在了未来的收入上，因此贷款的本质就是对未来的透支。还远远没有结束，A把钱消费给了超市老板B，老板B可是实打实得到了100元，如果B把这些钱存入银行，银行是不是就可以把这些钱贷款给用户C！这样B和C就又重新构成了我和A的关系，此时如果“我”，“A”，“B”，“C”将手里的100元都花出去了，相当于我的100元在市场中可以购买400元的商品！简直离大谱。同理，这样的模式还可以延续到D和E，F和G…..这样最开始的100元就通过贷款，在市场中可以兑换的价值不断翻番（银行中贷的款也在增多，不过随之经济发展，未来一定能还上嘛）。但可以兑换的价值肯定也不是无限上涨，上述只是理想情况，现实是国家规定中央银行只能拿储户个人存款的90%拿去放贷，这就导致，我存100，A贷款到90,B存90，C贷款81，这样依据等比数列求和往下推，这100元最多只可以购买1000元的等价物。神奇吗？这与地方房产，地方财政收入有什么关系呢？</p><p>&emsp;&emsp;下面来解析地方政府是如何增加自己的财政收入的。只有国家吃剩下的三成税收是肯定活不起的，地方政府发现土地可以大做文章，中央政府给了地方政府土地的“使用权”，也就是地方政府可也把土地外包给企业，这就是所谓的招商引资，有企业了，那企业的这些打工人应该去哪里住呢？当然是就近买房了呀！于是政府就又划出一片地给房地产开发商，用于楼盘开发，给人们提供居住场地。<br>可以看到，政府将土地租给了房地产开发商和企业以得到市政收入，但这两片地的类型存在着本质上的不同：卖给企业的地每平方米1000左右，卖给房地产开发商的则要比这个价钱贵上1000倍以上。</p><p>为什么要这样做？<br>1：如果市政招商引资把土地卖得太贵的话就没有商人企业进入了，相反，租给商人的地越便宜，来的企业就越多，引入的资金量就大，提供的就业岗位就越大，拉动更多的人进入城市居住，提高贷款买房的需求。可以建居民区的地价也就水涨船高，政府可以向银行抵押地价更高的地，贷出更多的钱，用以城市建设。<br>2：城市化进程中，为了活得更好的生存，教育，医疗条件，“人往高处走”是必然的趋势，而一个城市的市政收入越多，这些也就越完善。<br>3：如果每个人都背负着十年二十年的房贷，是不是有利于城市长期的稳定建设？（减少人口外流，增长城市人口，拉高教育医疗等行业消费水准）</p><p>&emsp;&emsp;可以看到，以上三条中任意一条都对另外两条有正反馈作用，即促进另外两条的发展。你也可以看到现在的状况，农村人口流失严重，有条件的宁可背上房贷也要进入更好的城市。可对于政府，市民来说，这些似乎都是没办法的事情：地方政府想要完成中央给的GDP指标，政府只能靠房地产业拉高GDP，几万元从农民手里买来的土地，然后几千万卖给房地产开发商，这个赚钱的速度当然没有任何生意可以比拟的，因此，土地财政就是鸦片一样，每个地方政府都会上瘾的，每年卖几块土地，财政问题就解决了，这样工作轻松，压力不大，政绩斐然！同时由于地方政府在从包干制转到分税制的时候就已经没有钱搞乡村的基础设施建设了，导致人们几乎同时涌入了城市。一夜之间，工厂如雨后春笋般在城市里建起，看着高涨的房价，民众争先恐后涌入城市，留下了几乎没有任何变化与发展能力的农村。就算今天中央想出政策振兴农村，想让年轻人回到农村，晚了，已经晚了，年轻的早已在城里结了婚还上了房贷，就算现在政府有钱了要将农村的基础设施做好做大，也难以吸引年轻人反乡了。我们现在能看到的基础设施建设，也仅限于县城往上，县城以下大部分农村连学校都倒闭了，就算有也不可能保证质量，把孩子送到城里读书已经成为每个农村家庭的信条。<br><img src="/img/gover.png" alt="地方政府运营模式"> </p><p>&emsp;&emsp;如果你关注过我国的股市和楼市，你会发现，股市怎么变，股市对GDP并没有太大影响，楼市及楼市的附带产业才是GDP指定亲爹。房地产业的产值每增加1个百分点，就能使相关产业的产值增加1.5到2个百分点。在我国，每增加1亿元的住宅投资，其他23个相关产业相应增加投入1.479亿元，被带动的直接相关或间接相关较大的产业有60多个。<br>&emsp;&emsp;房价能跌吗？糊涂啊！跌了某国经济总量不就跌了吗，地方政府的80%的负债还要靠卖地和地价的升值来偿还，往小了说，房地产是个人的身家，往大了说，这就是国运！<br><img src="/img/ground.png" alt="GDP与楼市"> </p><p>&emsp;&emsp;因此，在我们看到某国GDP跃居世界第二的同时，我们就应该意识到，万事万物都有其代价，市政向银行贷的款不还了吗？拿什么还？贷款的本质是透支未来啊，未来会还的！确实，贷多少，未来都能还。当年日本也是这么想的，甚至一个东京市的房地产可以买下整个美国（这就是贷款的力量！）。结果房地产泡沫破碎，社会直接停摆了二十年。我们现在的社会：人口多，资源有限，竞争激烈，老龄化严重，生育率达到谷底，和当年的日本几乎是一个模子刻出来的，我们虽然发展迅猛，但同日本一样，隐患严重。</p><p>&emsp;&emsp;那国家为什么不把钱更多的投入到科技高新产业的建设来实现转型呢？事实上，国家不论以任何目的把钱放下去，资金的流动去向是不会骗人的，因为天下的所有人都知道楼市赚钱啊！哪里能生财财才去哪，最终这些钱殊途同归，大部分还是流到了楼市里而不是科技公司的股市中，还是助长了房地产事业，这也就是过去十几年中房地产暴涨的原因。<br>&emsp;&emsp;房地产经济如何才能高高的升起，悄悄的放下呢？<br>&emsp;&emsp;现如今，中央政策选择改变杠杆率，也就是地方的土地在银行中能够抵押出来的贷款金额来限制房地产的主导地位，刚刚实施，未见成效。<br>&emsp;&emsp;能否转型成功，直接影响以后历史书上怎么评价现代人的功过得失，毕竟未来的人可不想给我们还债。可以确定的是，能够书写历史的人，在评价前人的正确性上要远远超出评价自己的，并且也不会留下一丝情面。</p>]]></content>
      
      
      <categories>
          
          <category> 社会现象分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分税制，土地政策，土地金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么毕业生越来越难了?</title>
      <link href="/%E6%AF%95%E4%B8%9A%E5%BF%A7%E9%83%81/"/>
      <url>/%E6%AF%95%E4%B8%9A%E5%BF%A7%E9%83%81/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;如果年度词汇可以选负面词汇的话，我相信，这个字只会取自两个方面：<br>1：疫情下经济低迷与人的精神问题<br>2：卷（多多少少带有本人的个人恩怨，但不影响与第一个方面并列）</p><p>&emsp;&emsp;我们为什么越来越难找工作了呢？为什么考研考公还在水涨船高？这种病态的考试应试系统为全社会都看在眼里却默不作声？</p><p>第一个问题：首先工作为什么越来越难找？<br>&emsp;&emsp;我感觉随便找个大学生出来他都能答出来：疫情之下经济低迷，各行各业（餐饮、零售、交通、旅游、等等等等）受到牵连，社会流动资金缩水，岗位缩招。拿互联网公司来举例，大公司因为资金短缺问题都能把整个研发部门给裁掉，没有经济来促进行业发展，招聘的毕业生自然而然就少了。<br>总之蛋糕变小了，能养的起的人数也减少了。</p><p>第二个问题:为什么考研考公水涨船高？<br>&emsp;&emsp;在回答这个问题的同时，先回想一下你的父母是不是曾经说过当年考上大学是多么多么困难，考上了就会分配工作以后生活无忧等等。<br>第一个关键点出现了，我们感觉现在好像考个大学有手就行，但当时非也，这种现象和当时的社会经济与教育资源有关，南方我不知道，北方大部分父母在小学初中毕业以后就会辍学种地，去城市打工减少家里的压力，一家好多个孩子也就会有一个或两个去读高中。好，现在都还很容易理解，那么列出1995年和2022年的高等教育适龄入学率（即同龄人中，上大学人数比总同龄人数）：<br>1995年：5.3%<br>2020年：54%<br>对比周边国家：<br><img src="/img/2.png" alt=""><br>&emsp;&emsp;从上面的数据不难看出，从前的大学教育是精英式教育，现在的大学教育是大众式教育。<br>&emsp;&emsp;那么什么时候开始有计划性的扩招了呢？<br>&emsp;&emsp;一切社会问题的产生永远都避不开一个要素：经济。毕竟整个地球史上就没有生物会和钱过不去的。<br>&emsp;&emsp;首先阐述一个事实，教育和经济是双向互补的。<br>&emsp;&emsp;去问问你的父母，1999年很重大的一件事，下岗潮。那一年国内市场经济下行，当年产生了1000万的下岗工人（没上大学的还是有充足的岗位去处的），年轻人不进大学，就会和全体工人一起竞争，在市场有限的条件下，社会矛盾会激化，因此就决定让更多学生进入大学。大学生进入大学，除了缓解当年的就业，下岗在就业的压力，还可以带动经济的发展，因为父母在看到扩招之前的大学生是如何风光，砸锅卖铁也都会供孩子上大学，这样本来停滞的经济也就开始流动起来，比如学生的住宿费，伙食费，可以促进学校引入师资和校舍和当地商业的发展，小学，初中，高中的大规模兴办，教师行业的兴起（你细品什么时候高中大学开始收学费的），学生的出行可以给铁路的建设提供资金支持，铁路建成则促进了各地经济的快速发展，因此这是当时市场经济的一剂强心针。<br>&emsp;&emsp;于是乎在1998年15大上就决定大学扩招，决定在2010年将上面的高等教育适龄入学率扩大到15%。于是1999年就是“大学扩招”年。但令人啧啧称奇的是这个计划在2003年就达到了15%，整整提前了7年。<br>我们可以看出，当年的大学扩招成效：<br>1、成功缓解了下岗潮的压力<br>2、成功促进了经济的发展，在2002年就达到了本来计划在2010年的15%大学入学率，足以证明这项举措是多么有成效。</p><p>&emsp;&emsp;好，再转向今年的考研考公，如果你观察数据可以发现，考研人数暴涨：<br><img src="/img/3.jpg" alt=""><br>&emsp;&emsp;2021年450w，2022年540w，足见经济形势的困顿，暴涨的背后伴随着教育部对研究生进行了扩招，同样的经济困顿，同样的扩招，此时此刻恰如彼时彼刻。<br>那如何处理当今的问题呢？<br>&emsp;&emsp;答：—“抄作业”—</p><p>&emsp;&emsp;打算直接复刻1999荣光是吧。当年的缓兵之计卓见成效，但如今的缓兵之计则不太行。区别在于：<br>1、缓兵的这几年经济并没有增长，就业岗位不增反减。经济没有增长的原因是疫情下的政策束手束脚，经济必然后退；还有就是Trump的贸易战，（有人说Trump贸易战输了我就想笑，贸易战确实是伤敌1000自损800，但问题是1000对人家来说不痛不痒，800对我们来说如数家珍），我国经济分为国内市场经济和海外进出口经济，国内市场经济被疫情拖累，海外进出口经济则被Trump咬住。这两方面导致了经济没有活力，导致经济下行<br>2、当1999就算扩招了，但绝大多数人还是上不了大学，和绝大部分适龄青年依旧是毫无关系，构不成激烈的竞争。现如今是却一个几乎全民大学的时代，扩招则就象征着内卷走向合理化与强制化，并且“读书改变命运”，“努力就会有回报”，儒家文化等信条深入人心，大家都想往上面发展，助长了内卷。但如今经济和岗位并没有增加，反倒是硕士研究生爆表，本科生无处可去。社会上的饭碗依旧是那么几个，反而就业，待就业人数两年内凭空增加了800w，再加上下一年的1000w毕业生，将近2000w。而且还呈现逐年积累的趋势，该如何解决？无法解决，但不管所有人愿不愿意，这2000w迟早会被消化掉，怎么消化掉？不知道，反正能消化掉就是了。</p><p>&emsp;&emsp;因此，这次的“抄作业”显然大局已定。除此之外，这种政策也导致了就业人员，准就业人员，预就业人员（我自己），产生了眼高手低的通病。<br>&emsp;&emsp;为什么感觉毕业待遇一年不如一年？很简单，人多了，均摊就少了。“之前的毕业生能拿到那么多工资，那我也应该拿那么多。”虽然我也很想对别人这么说，我自己也会这样去想，但事实是，就是我们眼高手低，自己不配。我们毕业证书的含金量，在前人看来大学很不错，就是天之骄子，这也是为什么我们会从长辈那里得到赞誉的原因，但实际上是，我们这个时代毕业人数比他们那个时候增加了10倍，但社会的饭碗只增加了三倍，本科毕业，硕士毕业的含金量就被稀释掉了。整个社会上的硕士博士数量逐年增加，硕士博士学历的含金量也必然逐年被稀释，上面有政策有要求各单位扩招保障毕业生就业率，但企业准入门槛还是硕士没有变，怎么办？把硕士工资稀释掉呗，因此现在硕士的底薪在逐年减少，这样才能多养几个员工。<br>&emsp;&emsp;自己的底薪被稀释，对于近几年在默默努力，疯狂内卷的社会成员来说，大部分人们的努力，是绝对得不到他们预想中的回报的。劳资努力了好几年，不拿高薪，对得起自己这几年的努力吗？很遗憾，我们的努力，是时势所趋，并非时势所需。我们所学的高考知识，本科知识，考研考公的内容，可以说和今后的工作内容完美脱轨。企业给高薪资，涨薪资的条件是你有“工作”能力，而不是应试能力，因此内卷了却没有得到回报的人大有人在，郁郁寡欢的人大有人在，社会矛盾只会积重难返。但是不内卷躺平吗？只会更惨。</p><p>&emsp;&emsp;最后我们再来分析一下人口结构：<br>&emsp;&emsp;2002年15%的大学入学率，剩下的85%在干什么？<br>&emsp;&emsp;2020年55%的大学入学率，剩下的45%在干什么？<br>&emsp;&emsp;2002年产业结构主打的是轻工业，重工业与农业，2020年也还是轻工业，重工业与农业，产业结构没转型吗？转了，但不太多。那以前初高中毕业进厂干的活现在谁干了？答：本科生。以前本科生干的活现在谁干了？答：985，211毕业生。我们的学历都在提升，但所干的工作内容，可以说没有变化。相比2002，他们起码还有一技之长，虽然学历不高，但人家的技能是真能养活自己，而我们，什么都会，又什么都不会，大学打着培养融会贯通的高等人才的旗号，让我们去学遍自然科学，从这一刻开始，我们就开始了眼高手低的第一步，谁是融会贯通的高等人才？我融会贯通干什么？反正我肯定不是，我感觉和自然科学有关的课对我来说屁用没有。因此我的评价是：无用功盛行，浪费年轻人的生命，政策已经弊大于利了。到最后我们走进社会干的和先人干的没啥区别（因为向高新科技，制造业的产业转型太慢了），我们花了更长的时间在学海里兜兜转转还是回到了前人的起点，那我们做出的努力和耗费的生命还有什么意义？但我们的国度并不缺聪明人，可能我们人人都比马克思聪明，但让聪明人变傻是很简单的，我是不信马克思在经历了高考大学以后还能写出资本论，因为他得在大学毕业才步入社会，才有时间去思考。</p><p>&emsp;&emsp;由于我们的长辈基本没学历或者是普通本科，我们看到他们现在也还活得不错，小康水平，导致我们会产生本科毕业起码在十八线县城也能活得不错吧，我学历比我爸妈高，他们在十八线小县城，那我们应该可以在四线，五线城市过一个简朴富足的生活了吧！这就错了呀，大错特错，我们学历是高了，大家学历都高了，按宏观数据来说，现在的普通本科甚至远远对标不上当时的大专，放在2002年我们也还是进不去大学的那一批，随着大学扩招，本科扩招，研究生扩招，我们只不过空有知识，空有学历，但社会上的碗筷并没有多出多少。因此，我们学识远超我们的父母，我们的学历远超我们的父母，但我们能够得到的生活质量，可能还远远不如。<br>&emsp;&emsp;别嘲笑我们的老爸老妈没文化，放到1995年，我们也那样。</p><p>&emsp;&emsp;之后的几年还会时艰难的几年，Trump大选成功，贸易战经济战也在加速，甚至USA在重返月球，新一轮太空竞赛很难不开启。同时后疫情时代人们的精神状态，南北贫富差距进一步增大，低迷的生育率（东北三省生育率碾压韩国喜提世界倒数第一，黑龙江更是站在了世界之巅）。房地产的经济泡沫什么时候会爆，这些都没有定数。但和之前几年的飞速发展相比，之后的几年甚至十年应该会是最严峻的十年了。</p><p>&emsp;&emsp;这样第二个问题就解决完了。</p><p>&emsp;&emsp;至于第三个问题，算了，不利于团结的话不说了。<br>&emsp;&emsp;没事少看点国内自媒体，凡是唱主旋律的下面评论区官方都帮你关了，评论也替我们筛选好了，这都没点数吗，你能看到的，从来都是别人想要你看到的。</p><p>&emsp;&emsp;想要在这个社会上有立足之地，实力与能力在未来将成为决定性因素。<br>&emsp;&emsp;加油吧大伙，别把挫折看的那么重，整点真本事出来，少往心里放点事，乐观面对每一天，比啥都强。<br>&emsp;&emsp;以上内容仅取自我的个人视角，有问题不去正视才是最蠢的，听之任之，是对历史与文明的不敬，更对不起世世代代的努力<br>&emsp;&emsp;祝伟大的祖国繁荣昌盛</p>]]></content>
      
      
      <categories>
          
          <category> 社会现象分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 就业难 扩招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客设计初衷</title>
      <link href="/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9B%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9B%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>、<br>&emsp;&emsp;今天是2022年11月21日，也是本人在博客网站几乎完成了所有的基础构建，开服的第一天。关于我为什么要创建博客，大概是想从自己的世界进入到外面的世界吧，感觉过去的自己烂透了，因此我想充分的利用闲暇时间提升一下个人能力与素养，相当于写写日记，记录一下平时的所看所学所想，整理我在研究生生涯的学习思路与内容。在这个经济低迷，硕士博士遍地而无offer的时代，广泛的涉猎，融会贯通变得越来越重要。这是一个靠能力而非学历的时代，也是一个疯狂内卷内耗的时代，希望各位都能乐观豁达地面对苦难，没有什么过不去的坎，但也别和自己过不去，对自己温柔一点，加油！</p><p>&emsp;&emsp;我呢，就是个普通人，因此我想将自己的学习，生活中的历程与踩过的坑分享给大家，帮助同样是想要学习一些热门知识并且想要交流沟通的人。相信已经学四年的你一定知道能否得到帮助的重要性，在本网站中，我会先将学习的内容分成以下几个我目前在学的大类，在这些类中我会分享我在学习中所看过的好的视频，通俗易懂的CSDN，知乎，简书以及我个人的梳理与理解。目前几个大类应该是：C++编程（QT），机器学习强化学习，计网与操作系统，硬软件茶谈（比如软硬件，服务器的使用手册等常识性知识）。</p><p>&emsp;&emsp;搭建整个博客耗费了两天时间，保研以后空出的时间多了起来，我也在广泛学习一些网络技术以及编程技术，博客就是主要开发的项目之一，我也推荐大家记录一些生活中的故事，在现如今如此快节奏且无意义的生活中给自己留一点空间，反思提升自己显得格外珍贵，更新周期的话每周一更吧，一到两篇，总之大伙加油吧。</p><p>&emsp;&emsp;给大家推荐一首室友黄某推荐的歌：<a href="https://www.bilibili.com/video/BV1ZL4y1H7Mz/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1ZL4y1H7Mz/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++线程</title>
      <link href="/C-%E7%BA%BF%E7%A8%8B/"/>
      <url>/C-%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>QT的线程：引入&lt; QThread &gt; 两种用法：</p><p>第一种：<br>&emsp;&emsp;实例化类：thread = new Thread ;<br>&emsp;&emsp;启动线程：&lt; QThread &gt;类中带有虚函数run()，把需要线程处理的函数放在run()中重新实现。即在Thread.h与Thread.cpp文件中重写run()；<br>&emsp;&emsp;启动线程: thread-&gt;start()打开新的线程，就会自动调用run()函数。<br>&emsp;&emsp;关闭线程：thread.quit();thread.wait();<br><img src="/img/thread1.png" alt=""><br>第二种：<br>&emsp;&emsp;该方法更为灵活，方法一将要实现的内容放在run()函数中，这就造成了一定的局限性。新方法将重新定义一个新的class，将该类与实例化的thread绑定(相当于方法一中run()中的内容用新的class重写了)，这样启动thread()就会创建新的线程。<br>&emsp;&emsp;实例化类：thread = new QThread ;（不用创建.h .cpp来重写run()了）<br>&emsp;&emsp;实例化类：myT = new myObject; 在类文件(.h .cpp)中重写要实现的函数myT-&gt;myTimeout()。<br>&emsp;&emsp;将该类与线程绑定：myT-&gt;moveToThread(thread);<br>&emsp;&emsp;启动线程：<br>    thread-&gt;start();<br>    emit startThread();<br>    connect(this,&amp;myWidget::startThread,myT,&amp;myObject::myTimeout)<br>&emsp;&emsp;关闭线程：<br>    thread.quit();<br>    thread.wait();<br><img src="/img/thread2.png" alt=""><br>&emsp;&emsp;不过要注意，该方法启动线程：thread-&gt;start()，只启动了线程，但没有启动线程处理函数。如果在这之后添加myT-&gt;myTimeout()；来主动调用线程函数也是不可以的，这样会导致线程函数和主线程在同一线程。<br>&emsp;&emsp;(用qDebug&lt;&lt; QThread::currentThread();可以查看当前线程号)<br>&emsp;&emsp;这时需要在Widget构造函数中connect(this,&amp;myWidget::startThread,myT,&amp;myObject::myTimeout)来连接线程函数。<br>&emsp;&emsp;调用thread.quit()；thread.wait();后线程不会立即关闭，而是等待线程函数处理完毕后才会关闭线程。<br>&emsp;&emsp;connect()函数的第五个参数，是和多线程有关的，默认多线程，槽函数所在线程与接收者一样，即myT与&amp;myObject::myTimeout一个线程。这也解释了方法二为什么要用connect()启动线程函数，因为connect()有主线程，子线程之分，当代码中出现绑定线程的操作：myT-&gt;moveToThread(thread)，则connect()就会把myT与&amp;myObject::myTimeout放到子线程执行。</p><p>[线程详细教学]<a href="https://www.bilibili.com/video/BV1XW411x7NU?p=79&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1XW411x7NU?p=79&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++笔记</title>
      <link href="/C-%E8%B8%A9%E5%9D%91/"/>
      <url>/C-%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>关于常量指针与指针常量</p><pre><code>const int *p=&amp;a ; </code></pre><p>const 修饰的是取 <em>的操作，因此取星操作不能改变，就是 </em>p的值(p所指的内容)不可改变 ，但指针的方向可以改变。<br><img src="/img/5.png" alt="">  </p><pre><code>int * const p = &amp;a ; </code></pre><p>const修饰的是p这个指针，因此这个指针的指向固定了，但是指针所指的内容可以改变。<br><img src="/img/4.png" alt=""><br><!-- endtimeline --></p><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>关于栈空间返回值用指针与别名接收</p><pre><code>int test01()&#123;    int a=10;    return a;&#125;int main()&#123;    int &amp;ref = test01();    cout&lt;&lt;&quot;ref = &quot;&lt;&lt; ref &lt;&lt; endl;    cout&lt;&lt;&quot;ref = &quot;&lt;&lt; ref &lt;&lt; endl;&#125;</code></pre><p>输出结果： ref = 10<br>          ref = 2425255</p><p>原因，拿别名指向返回值，但test01()执行完后，该返回值所在空间被释放了，编译器会默认保留返回值一次。<br>同理：<br>    int test01()<br>    {<br>        int a=10;<br>        return &amp;a ;<br>    }</p><pre><code>int main()&#123;    int *ref = test01();    cout&lt;&lt;&quot;ref = &quot;&lt;&lt; *ref &lt;&lt; endl;    cout&lt;&lt;&quot;ref = &quot;&lt;&lt; *ref &lt;&lt; endl;&#125;</code></pre><p>输出结果： ref = 10<br>          ref = 2425255<br>也是一个原因。其本质都是指针指向了一个被释放的栈空间而编译器只保留了一次。<br><!-- endtimeline --></p><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>.h文件中定义的变量， .cpp中的所有函数都可以使用,并且相当于在.cpp中定义的静态变量，只要类运行不结束，变量就不会被释放。但在构造函数中定义的变量，无法在.cpp文件中除构造函数的其他函数中使用，因为构造函数相当于一个函数，执行完构造函数就被释放掉了，需要注意的是执行完构造函数后，该class不一定会结束。<br><!-- endtimeline --></p><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>QString buf =”123”;<br>如何将QString转化为QByteArray？QByteArray a = buf.toUtf8();这里的QByteArray是由UTF-8编码，为了对应中文问题，也可选择其他编码，依然属于QByteArray类型。<br>如何再将得到的QByteArray 类型的a转化为 char<em> 类型（即c++的string,buf为QT的string）呢？: char</em>b=a.data();<br>如何再将得到的QByteArray 类型的a转化为 QString 类型？：QString（a）<br>如何将char<em> 转化为QString呢？QString c = QString(b);<br>这样三种类型形成了闭环。<br>qDebug()&lt;&lt;;指定的是char</em>类型。<br><!-- endtimeline --><br>引用和指针区别<br>指针和引用主要有以下区别：</p><p>引用必须被初始化，但是不分配存储空间。指针不声明时初始化，在初始化的时候需要分配存储空间。<br>引用初始化后不能被改变，指针可以改变所指的对象。<br>不存在指向空值的引用，但是存在指向空值的指针。<br>注意：引用作为函数参数时，会引发一定的问题，因为让引用作参数，目的就是想改变这个引用所指向地址的内容，而函数调用时传入的是实参，看不出函数的参数是正常变量，还是引用，因此可能引发错误。所以使用时一定要小心谨慎。</p><p>从概念上讲。指针从本质上讲就是存放变量地址的一个变量，在逻辑上是独立的，它可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。</p><p>而引用是一个别名，它在逻辑上不是独立的，它的存在具有依附性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的（自始至终只能依附于同一个变量）。</p><p>在C++中，指针和引用经常用于函数的参数传递，然而，指针传递参数和引用传递参数是有本质上的不同的：</p><p>指针传递参数本质上是 值传递的方式，它所传递的是一个地址值。值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的 实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。<br>而在引用传递过程中， 被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间 接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。<br>引用传递和指针传递是 不同的，虽然它们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。而对于指针 传递的参数，如果改变被调函数中的指针地址，它将影响不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量，那就得使用指向指针的 指针，或者指针引用。<br>为了进一步加深大家对指针和引用的区别，下面我从编译的角度来阐述它们之间的区别：</p><p>程序在编译时分别将指 针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为指针变量的地址值，而引用在符号表上对应的地址值为 引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改。</p><p>最后，总结一下指针和引用的相同点和不同点：</p><p>★相同点：</p><p>●都是地址的概念；</p><p>指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。</p><p>★不同点：</p><p>●指针是一个实体，而引用仅是个别名；</p><p>●引用只能在定义时被初始化一次，之后不可变；指针可变；引用“从一而终”，指针可以“见异思迁”；</p><p>●引用没有const，指针有const，const的指针不可变；</p><p>●引用不能为空，指针可以为空；</p><p>●“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p><p>●指针和引用的自增(++)运算意义不一样；</p><p>●引用是类型安全的，而指针不是 (引用比指针多了类型检查）<br><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --></p><!-- endtimeline --><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><!-- endtimeline --><!-- timeline 2022-12-5 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><!-- endtimeline -->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针，踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++ QT中的 Widget::Widget(QWidget *parent) :QWidget(parent)</title>
      <link href="/QTwidget/"/>
      <url>/QTwidget/</url>
      
        <content type="html"><![CDATA[<p>如何理解下面段代码?</p><pre><code>Widget::Widget(QWidget *parent) :    QWidget(parent)&#123;&#125;</code></pre><p>在讲解原因之前，先请大家看下面的一个例子:</p><pre><code>#include &lt;iostream&gt;using namespace std;class Base&#123;public:    Base() :m_num(0)&#123;        cout &lt;&lt; &quot;this is Base()&quot; &lt;&lt; endl;    &#125;    Base(int val):m_num(val)&#123;        cout &lt;&lt; &quot;this is Base(int val)&quot; &lt;&lt; endl;    &#125;private:    int m_num;&#125;;</code></pre><p> 上方代码定义了一个基类Base，并且有两个构造函数，一个是默认构造函数，一个是有一个整型参数的构造函数。</p><pre><code>class BaseChild: public Base&#123;public:    BaseChild()&#123;        cout &lt;&lt; &quot;this is BaseChild()&quot; &lt;&lt; endl;    &#125;    BaseChild(int val): Base(val)&#123;        cout &lt;&lt; &quot;this is BaseChild(val)&quot; &lt;&lt; endl;    &#125;private:    int m_num;&#125;;</code></pre><p>上方代码定义了一个BaseChild类，并继承Base类，同样的，它也定义了两个构造函数，一个默认，一个有整型参数。</p><pre><code>int main(int argc, char *argv[])&#123;    BaseChild child1;    BaseChild child2(5);    return 0;&#125;</code></pre><p>main函数实例化了两个子类实例，child1，child2。child1调用默认构造函数。child2调用有整型参数的构造函数。<br>现在，我们运行程序，会有如下打印：<br><img src="/img/1.png" alt=""><br>看到了吗，我们发现：<br> ·创建child1时，是先调用了Base的默认构造函数，再调用自己的默认构造函数<br> ·创建child2时，是先调用了Base(int)这个构造函数，再调用自己的整型参数构造函数。</p><p>所以我们回头看BaseChild的构造函数:</p><pre><code>BaseChild(int val): Base(val)&#123;        cout &lt;&lt; &quot;this is BaseChild(val)&quot; &lt;&lt; endl;    &#125;</code></pre><p>细心的同学，可能早就发现了，初始化列表中的Base(val)正是调用了我们Base基类的有参构造函数，而这样的写法就刚好是我们开头代码中的那段:<br>Widget::Widget(QWidget <em>parent) :QWidget(parent)<br>所以Widget是调用了QWidget下面的构造函数:<br>QWidget(QWidget</em> parent = Q_NULLPTR, Qt::WindowFlags f = Qt::WindowFlags());<br>所以得出如下总结：<br>总结：<br>· 如果不指定构造函数，则派生类会调用基类的默认构造函数<br>· 派生类构造函数的初始化列表只能初始化派生类成员，不能直接初始化继承成员，如果想 要调用基类的有参构造函数，则可以在派生类的初始化列表中显示指定</p><p>以上总结，也告诉我们，当定义一个类时，最好为该类定义默认构造函数。<br>好的，那么我们又提出一个问题，“调用QWidget(parent)这个构造函数，QWidget父类都做了哪些动作呢？”<br>下面是QWidget源码中的一部分节选：</p><pre><code>QWidget::QWidget( QWidget *parent, const char *name, WFlags f )    : QObject( parent, name ), QPaintDevice( PDT_WIDGET ),    pal( parent ? parent-&gt;palette()        // use parent&#39;s palette        : *qApp-&gt;palette() )            // use application palette&#123;    if ( parent ) &#123;    QChildEvent *e = new QChildEvent( Event_ChildInserted, this );    QApplication::postEvent( parent, e );    &#125;&#125;</code></pre><p>大家从上面可以看出，如果parent参数非空的话，那么该构造函数使用了其父窗口的调色板，并且发送了QChildEvent事件，这会让新的窗口成为parent所指窗口的子窗口，那么当父窗口被删除时，子窗口也会自动的被删除。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QT如何连接mysql</title>
      <link href="/database/"/>
      <url>/database/</url>
      
        <content type="html"><![CDATA[<p>1：下载并安装mysql<br>配置环境变量：在用户与系统中的path路径分别加入mysql bin文件夹的地址，我的如下：<br>D:\mySQL\MySQL Server 8.0\bin<br>这一步是为了打开cmd直接输入： mysql -u root -p就可以登陆操作数据库，不然只能在D:\mySQL\MySQL Server 8.0\bin打开cmd操作数据库。</p><p>2：在QT中编译mysql驱动：<br>在QT的mysql.pro文件中<br>输入以下代码:注意用<script type="math/tex">quote(地址)是为了忽视地址中的空格，这样在QT调用的时候就不会因为空格找不到文件。win32:LIBS += -L</script>quote(D:/mySQL/MySQL Server 8.0/lib) -llibmysql<br>INCLUDEPATH += <script type="math/tex">quote(D:/mySQL/MySQL Server 8.0/include)DEPENDPATH +=</script>quote(D:/mySQL/MySQL Server 8.0/include)<br>括号中的地址填你之际的安装地址。</p><p>同时注释掉文件中</p><h1 id="QMAKE-USE-mysql"><a href="#QMAKE-USE-mysql" class="headerlink" title="QMAKE_USE += mysql"></a>QMAKE_USE += mysql</h1><p>用MINGW64编译文件，在QT同级目录下出现plugins文件夹。</p><p>3：将mysql数据库动态文件及编译文件粘贴到QT<br>将plugins文件夹生成的qsqlmysql.dll 与qsqlmysql.dll.debug复制到<br>D:\QT\set_qt\5.14.1\mingw73_64\bin</p><p>将动态库文件mysql/lib中的libmysql.dll复制到QT的MINGW64编译器的bin目录下</p><p>4：连接数据库：<br>新建文件，在.pro文件中<br>QT       += core gui sql<br>在用到数据库的.h文件中</p><h1 id="include-lt-QSqlDatabase-gt"><a href="#include-lt-QSqlDatabase-gt" class="headerlink" title="include &lt; QSqlDatabase &gt;"></a>include &lt; QSqlDatabase &gt;</h1><p>在.cpp中连接数据库：<br>QSqlDatabase db = QSqlDatabase::addDatabase(“QMYSQL”);<br>    db.setHostName(“127.0.0.1”);<br>    db.setUserName(“root”);<br>    db.setPassword(“119568yhl”);<br>    db.setDatabaseName(“info”);//这里info是实例化数据库的名称，需要手动实例化。</p><p><img src="/img/database.png" alt="在cmd登录实并例化数据库方法"></p><p>第1步参考视频：<br><a href="https://www.bilibili.com/video/BV12q4y1477i/?spm_id_from=333.880.my_history.page.click">https://www.bilibili.com/video/BV12q4y1477i/?spm_id_from=333.880.my_history.page.click</a></p><p>第2，3步参考视频：<br><a href="https://www.bilibili.com/video/BV1Jk4y167tt/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1Jk4y167tt/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p><p>show databases;<br>看到数据库里的存储区<br>use info<br>进入其中的一个存储区<br>show tables;<br>可以看到区里具体的表<br>select * from 表名<br>可以看到表里有啥</p><p>tips:<br>    QString sql1 = QString(“create table %1(id double,x double,y double,h double,v double,t double)”).arg(a);<br>这样可以实现动态设置表名，例如如果需要把每个for循环采集到的数据做成一个表，那么就可以这样动态设置表名<br>表名必须是字母！<br>也可以用函数获取当前的绝对时间，arg(时间)，来实现动态设置表名</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针，踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++笔记</title>
      <link href="/python/"/>
      <url>/python/</url>
      
        <content type="html"><![CDATA[<!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;markdown语言中%可能引发歧义！报错 tag name expected<br><!-- endtimeline --></p><!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;for num in range(begin,end) num从列表中依次取出begin到end-1的end-begin个整数。<br>如for num in range(1,8) ，num可以遍历到1，2，3，4，5，6，7<br>&emsp;&emsp;print(f”{}，{}”) 会将大括号里的变量转化为string打印。<br>&emsp;&emsp;lista = [20,10,50,40,30] 排序：lista.sort()改变了lista的顺序。 listb=sorted(lista) 不改变lista的顺序。默认是升序，（）加入reverse=true则为降序。<br>&emsp;&emsp;list中的元素由  ， 隔开。但该逗号不属于列表list的内容。<br>&emsp;&emsp;在写文件中，如果字符串内容为’…\n’，则写出的内容/n消失并换行，因此在读文件时应该处理每行末尾的\n，list[ ：-1]就可以不读入换行符\n<br><!-- endtimeline --></p><!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;pyton的return可以返回三个值，return b,c,d 只要在主题函数中用三个变量来接收就行<br>    def get_return()<br>        b=1<br>        c=2<br>        d=3<br>        return b,c,d</p><pre><code>get_b,get_c,get_d = get_return()</code></pre><!-- endtimeline --><!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;<br><!-- endtimeline --></p><!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;<br><!-- endtimeline --></p><!-- timeline 2022-12-10 [2.0 -> 2.1](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --><p>&emsp;&emsp;<br><!-- endtimeline --></p>]]></content>
      
      
      <categories>
          
          <category> 软硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统的发展简史</title>
      <link href="/x86/"/>
      <url>/x86/</url>
      
        <content type="html"><![CDATA[<p>今天我们来聊一聊系统名词：<br>&emsp;&emsp;x86:x86是一种CPU指令集的架构，每个指令是32位，最先由Intel公司研发，x86_64表示同样基于x86指令集，但每个指令增加到64位，最先由AMD公司研发，我们电脑目前都是64位，也就是x86_64。同时64位可以兼容32位，有的软件比较古老，能在32位计算机上运行，那现在的64位电脑就可以运行。但64位的软件就不能在32位机上运行，因为位数不够。<br>&emsp;&emsp;Arm用的是32位精简指令集（x86是复杂指令集，都是同一个时期的东西），性能不行但优点是用Arm架构的产品耗能低，因此在嵌入式系统上如手机，大放异彩。手机不需要那么高的性能，但要求待机时间长，而计算机则相反，x86也就独霸了计算机领域。</p>]]></content>
      
      
      <categories>
          
          <category> 计网与操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> x86 x86_64 Arm  Intel AMD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/test/"/>
      <url>/test/</url>
      
        <content type="html"><![CDATA[<p>建博客来第一篇文章<br><img src="/img/19.png" alt=""><br>点击下方链接即可进入学习：<br><a href="https://www.bilibili.com/video/BV1WW411F7Ss/?spm_id_from=333.788.recommend_more_video.6&amp;vd_source=b6da26061de3320a8170666f06381a91">写博文学习b站网址</a><br><a href="https://www.bilibili.com/video/BV1WW411F7Ss/?spm_id_from=333.788.recommend_more_video.6&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1WW411F7Ss/?spm_id_from=333.788.recommend_more_video.6&amp;vd_source=b6da26061de3320a8170666f06381a91</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习基本概念</title>
      <link href="/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;大力推荐学习B站王树森的课：<br><a href="https://www.bilibili.com/video/BV1Lg41117D3/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1Lg41117D3/?spm_id_from=333.337.search-card.all.click</a></p><p>&emsp;&emsp;还有莫凡python的强化学习课，有代码，下载pycharm就能跟着跑代码，上面链接是理论课，下面链接时代码教程效果展示，自己跑一遍跟着理解：<br><a href="https://www.bilibili.com/video/BV13W411Y75P/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV13W411Y75P/?spm_id_from=333.337.search-card.all.click</a></p><p>&emsp;&emsp;b站赵世钰的课 <a href="https://www.bilibili.com/video/BV1sd4y167NS?p=24&amp;vd_source=b6da26061de3320a8170666f06381a91">https://www.bilibili.com/video/BV1sd4y167NS?p=24&amp;vd_source=b6da26061de3320a8170666f06381a91</a><br>讲解极其细致，远超王树森的，太笼统了，没有例子。</p><p>Rward:<br>强化学习的奖励Reward是自己确定的，rt相当于整个训练系统的监督信号，奖励确定的合不合理，就会影响学习的好不好！r和st,at,st+1有关：<br><img src="/img/12-18-1.png" alt=""> </p><p>动作函数(Policy)：<br><img src="/img/pai.png" alt=""> </p><p>价值函数(action-value-function)：<br>Rt是随着动作选择的不同依概率取不同值，将未来所有的Rt与衰减因子相乘叠加就是回报强化学习的收益Return（Ut）。对变量return(图中为Ut=Rt+···)求期望就是价值函数(Action-value-function)，其中pai是动作函数。<br><img src="/img/pai1.png" alt=""><br>直观意义：如果用Policy函数pai,在st状态下做动作at是好还是坏，Qpai就会给各种动作打分来判断是好还是坏。pai函数不一样，Qpai值也不一样。Rt+1，Rt+2等可以用pai函数积分掉。<br>最优动作价值函数：Q<em><br>Q</em> 与动作函数pai无关，因为 Q<em> 的定义是通过改变pai函数使得Q最大即Q</em>，因此Q*与pai函数无关。<br>直观意义：在最优pai条件下，Q就会给各种动作打分来判断是好还是坏。</p><p>状态价值函数(state-value-function)<br>把所有动作的积分掉，就可以判断当前所处的状态好不好。因此Vpai可以测试环境以及pai函数的好坏。<br><img src="/img/state-value-function.png" alt=""></p><p>随机性：<br>每次随机选定完acction，环境也是会随机抽样改变的。这就是state transition状态转移。<br>强化学习过程中的随机性：动作函数的随机性，状态转移函数的随机性。</p><p>因此诞生了两种强化学习的基础方式：Policy;Q*。<br>用这两种方式指导智能体行动。<br><img src="/img/12-18-2.png" alt=""> </p><p>Q(st,at,w)是一个数，表示在st,at条件下的期望价值<br>Q（St,At,w）是一个数，额外包含了st的多样性与at多样性的期望价值。<br>用蒙特卡洛近似的Q()举个例子：Q<em>(st,at)=E[Rt+r</em>maxQ*(St+1,a)],蒙特卡洛在该式子中的作用是随机抽样St+1，取均值。</p>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sara与Q-learning</title>
      <link href="/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E8%BF%91%E4%BC%BC/"/>
      <url>/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E8%BF%91%E4%BC%BC/</url>
      
        <content type="html"><![CDATA[<p>什么是蒙特卡洛近似？</p><p>&emsp;&emsp;比如有一个极其复杂的函数f(x)的定积分,复杂到手算根本解不了。你算不了计算机可以算啊！计算机怎么做？<br>很简单，计算机在你要积分的区间随机均匀抽样，将这些值取平均值再乘以区间长度就可以得到定积分值的大小，因此取得点越多，那么得到结果越准。<br>举个例子：求f(x)=x^(e^x<em>lnx)在区间[3,5]上的定积分。<br>蒙特卡洛会在[3,5]上随机均匀抽样抽10000甚至更多个点，这样（这些点对应的函数值加和/10000）</em>区间长度2=f(x)在[3,5]上的定积分值。</p><p>&emsp;&emsp;同理，如果f(x)函数在[3,5]上以一定的概率密度分布，蒙特卡洛法也可以轻松计算出f(x)在[3,5]上按概率密度分布的期望。计算方法和上面一样，唯一不同的地方就是均匀抽样要改成 “ 按照概率密度抽样！”，即概率密度大的地方肯定多抽几个点，概率密度小的地方少抽几个点。同样抽10000个点这样（这些点对应的函数值加和/10000）*区间长度2=f(x)在[3,5]上按一定概率密度分布的期望值。</p>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蒙特卡洛近似 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
